<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-09-28T14:03:48+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/28/ruby-les-methodes-du-module-kernel-2/"/>
    <updated>2013-09-28T13:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/28/ruby-les-methodes-du-module-kernel-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>On continue l&#8217;exploration du module Kernel avec quatre
autres méthodes de conversions, pour les nombres:</p>

<ul>
<li>Complex</li>
<li>Float</li>
<li>Integer</li>
<li>Rational</li>
</ul>


<!-- more -->


<p>Voyons d&#8217;abord <code>Integer</code>. On peut lui passer une chaîne de caractère:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Integer</span><span class="p">(</span><span class="s2">&quot;123&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">123</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça fonctionne avec les préfixes. En octal, hexadécimal et binaire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Integer</span><span class="p">(</span><span class="s2">&quot;0123&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">83</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Integer</span><span class="p">(</span><span class="s2">&quot;0x123&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">291</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Integer</span><span class="p">(</span><span class="s2">&quot;0b111&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">7</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut aussi spécifier la base:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Integer</span><span class="p">(</span><span class="s2">&quot;0123&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="go">123</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut aussi passer en argument un objet répondant à <code>to_int</code> ou <code>to_i</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">to_i</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>    <span class="mi">123</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="k">end</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">nil</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Integer</span><span class="p">(</span><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="go">123</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passons maintenant à <code>Float(arg)</code> qui convertit un argument en type <code>Float</code>.
Soit l&#8217;argument est de type <code>Numeric</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Float</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
</span><span class='line'><span class="go">123.0</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Float</span><span class="p">(</span><span class="no">Rational</span><span class="p">(</span><span class="s2">&quot;1/2&quot;</span><span class="p">))</span>
</span><span class='line'><span class="go">0.5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Soit la méthode fait appel à <code>to_f</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="k">def</span> <span class="nf">to_f</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>    <span class="mi">1</span><span class="o">.</span><span class="mi">23</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="k">end</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">nil</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">Float</span><span class="p">(</span><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="go">1.23</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au tour de la méthode <code>Rational</code> qui convertit son (ses) argument(s) en un
nombre rationnel (de classe <code>Rational</code>), autrement dit une fraction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Rational</span><span class="p">(</span><span class="s2">&quot;1/3&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">1/3</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">1/3</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="no">Rational</span><span class="p">(</span><span class="s2">&quot;1/3&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">1/3</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="n">x</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'><span class="go">2/3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reste la méthode <code>Complex</code>, qui convertit son (ses) argument(s) en un nombre
complexe. Je la signale pour être exhaustif, mais les nombres complexes
dépassent largement mes compétences en mathématique.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel/'>Ruby: Les méthodes du module Kernel</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes/'>Un plugin Octopress pour les articles connexes</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 24]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/"/>
    <updated>2013-09-27T18:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant vous connaissez bien la procédure : on trouve comment représenter
les chromosomes, comment les évaluer, puis une fois la population
initialisée on sélectionne, on croise, on mute…</p>

<!-- more -->


<p>Dernièrement on s&#8217;est occupé des chromosomes, de l&#8217;évaluation et de la
population. Reste à sélectionner, croiser, muter.
Je ne vais pas trop m&#8217;étendre sur le code permettant de faire ceci puisqu&#8217;il
s&#8217;agit pratiquement d&#8217;un copier/coller des classes développées
précédement. Voici le code permettant de résoudre le problème des
8 dames:</p>

<figure class='code'><figcaption><span>8_queens.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display</span>
</span><span class='line'>    <span class="vi">@chromosome</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">queen_position</span><span class="o">|</span>
</span><span class='line'>      <span class="n">row</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="vi">@chromosome</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
</span><span class='line'>        <span class="n">row</span> <span class="o">+=</span> <span class="p">(</span><span class="n">cell</span> <span class="o">==</span> <span class="n">queen_position</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;Q&quot;</span> <span class="p">:</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">row</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Gene</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">rand</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@board_size</span> <span class="o">=</span> <span class="n">board_size</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">fitness</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">board</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@board_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">row1</span><span class="o">|</span>
</span><span class='line'>      <span class="n">gene1</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row1</span><span class="o">]</span>
</span><span class='line'>      <span class="p">(</span><span class="n">row1</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@board_size</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row2</span><span class="o">|</span>
</span><span class='line'>        <span class="n">gene2</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row2</span><span class="o">]</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">gene1</span> <span class="o">==</span> <span class="n">gene2</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">row2</span> <span class="o">-</span> <span class="n">row1</span> <span class="o">==</span> <span class="p">(</span><span class="n">gene1</span> <span class="o">-</span> <span class="n">gene2</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fitness</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GeneticAlgorithm</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">board_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@generations</span> <span class="o">=</span> <span class="n">generations</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>    <span class="vi">@board_size</span> <span class="o">=</span> <span class="n">board_size</span>
</span><span class='line'>    <span class="vi">@mutation_rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@crossover</span> <span class="o">=</span> <span class="no">Crossover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="vi">@generations</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Evaluator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@board_size</span><span class="p">,</span> <span class="vi">@population</span><span class="p">)</span><span class="o">.</span><span class="n">evaluate</span>
</span><span class='line'>      <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">best</span>
</span><span class='line'>      <span class="nb">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">best</span><span class="o">.</span><span class="n">score</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>        <span class="n">best</span><span class="o">.</span><span class="n">display</span>
</span><span class='line'>        <span class="nb">exit</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">next_generation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;----------------------&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Gen: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Best: </span><span class="si">#{</span><span class="n">best</span><span class="o">.</span><span class="n">score</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>    <span class="n">pool</span> <span class="o">=</span> <span class="no">MatingPool</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@population</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="vi">@crossover</span><span class="o">.</span><span class="n">two_point</span><span class="p">(</span><span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">,</span> <span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MatingPool</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">integer_part</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">real_part</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">-</span> <span class="n">integer_part</span>
</span><span class='line'>      <span class="n">integer_part</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">individual</span><span class="o">.</span><span class="n">dup</span> <span class="p">}</span>
</span><span class='line'>      <span class="vi">@mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">individual</span><span class="o">.</span><span class="n">dup</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="n">real_part</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="vi">@mating_pool</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random</span>
</span><span class='line'>    <span class="vi">@mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Crossover</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@mutator</span> <span class="o">=</span> <span class="no">Mutator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@size</span><span class="p">,</span> <span class="vi">@rate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">two_point</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">assemble</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">,</span> <span class="n">two_cut_points</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="vi">@mutator</span><span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Individual</span><span class="o">.</span><span class="n">from_chromosome</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">two_cut_points</span>
</span><span class='line'>    <span class="n">point1</span> <span class="o">=</span> <span class="n">cut_point</span>
</span><span class='line'>    <span class="n">point2</span> <span class="o">=</span> <span class="n">cut_point</span>
</span><span class='line'>    <span class="n">point1</span><span class="p">,</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">point2</span><span class="p">,</span> <span class="n">point1</span> <span class="k">if</span> <span class="n">point1</span> <span class="o">&gt;</span> <span class="n">point2</span>
</span><span class='line'>    <span class="o">[</span><span class="n">point1</span><span class="p">,</span> <span class="n">point2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cut_point</span>
</span><span class='line'>    <span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assemble</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point1</span><span class="p">,</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">points</span>
</span><span class='line'>    <span class="n">parent1</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point1</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">parent2</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="n">point1</span><span class="o">.</span><span class="n">.point2</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">parent1</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="n">point2</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mutator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span>
</span><span class='line'>        <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">chromosome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">generations</span> <span class="o">=</span> <span class="mi">500</span>
</span><span class='line'><span class="n">board_size</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="n">population</span> <span class="o">=</span> <span class="no">Population</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">mutation</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">001</span>
</span><span class='line'><span class="no">GeneticAlgorithm</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">board_size</span><span class="p">,</span> <span class="n">mutation</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai seulement ajouter une méthode <code>display</code> à la classe <code>Individual</code> pour
afficher à l&#8217;écran une représentation de la solution. Voilà le programme
en marche:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb 
----------------------
Gen: 0
Best: 0.5
----------------------
Gen: 1
Best: 0.5
.
.
.
Gen: 11
Best: 1.0
----------------------
Gen: 12
Best: Infinity
.......Q
.Q......
...Q....
Q.......
......Q.
....Q...
..Q.....
.....Q..
</code></pre>

<p>Cool ! Une solution en 12 générations. J&#8217;ai écrit récemment que trouver
une solution pour un échiquier de 8 x 8 cases ne serait pas difficile.
Et bien voilà, c&#8217;est fait. J&#8217;ai écrit aussi qu&#8217;il serait plus intéressant de
voir ce qu&#8217;il se passe avec des plateaux plus grands. Si on essaye en
doublant les dimensions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">board_size</span> <span class="o">=</span> <span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>On aura de grandes chances de voir ce type de sortie:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb 
----------------------
Gen: 0
Best: 0.125
----------------------
Gen: 1
Best: 0.16666666666666666
.
.
.
Gen: 70
Best: 0.5
----------------------
Gen: 71
Best: 1.0
.
.
.
----------------------
Gen: 499
Best: 1.0
</code></pre>

<p>Plus de 400 générations coincées sur le même résultat. Vous pensiez en
avoir fini avec les extremums locaux ? Et ben non, ils ne sont jamais
bien loin. 3 questions:</p>

<ol>
<li>Comment je sais que l&#8217;algorithme est coinçé dans un extremum local ?</li>
<li>Pourquoi cet algorithme coinçe alors qu&#8217;il est écrit comme le
précédent qui lui, ne coinçait pas ?</li>
<li>Comment on s&#8217;en sort ?</li>
</ol>


<p>Avant de répondre à cela, je pense qu&#8217;il est plus que temps d&#8217;expliquer
quelques petites choses sur les extremums locaux:</p>

<ol>
<li>Qu&#8217;est ce que c&#8217;est qu&#8217;un extremum local ?</li>
<li>Comment un extremum local se manifeste dans les algorithmes génétiques ?</li>
</ol>


<p>J&#8217;ai mon sujet pour le prochain article…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23/'>Les algorithmes génétiques démystifiés 23</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/'>Les algorithmes génétiques démystifiés 22</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/'>Les algorithmes génétiques démystifiés 21: Problème des 8 dames</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 23]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23/"/>
    <updated>2013-09-26T18:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour évaluer une solution potentielle dans le problème des 8 dames, on va
devoir calculer le nombre de paires de dames qui sont en conflit (en prise,
pour les joueurs d&#8217;échecs).</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/">l&#8217;article précédent</a>
on a mis en place la classe <code>Evaluator</code>, mais il manquait une partie
déterminante: le calcul du nombre de conflits. Le voici:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">board</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@board_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">row1</span><span class="o">|</span>
</span><span class='line'>      <span class="n">gene1</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row1</span><span class="o">]</span>
</span><span class='line'>      <span class="p">(</span><span class="n">row1</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@board_size</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row2</span><span class="o">|</span>
</span><span class='line'>        <span class="n">gene2</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row2</span><span class="o">]</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">gene1</span> <span class="o">==</span> <span class="n">gene2</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">row2</span> <span class="o">-</span> <span class="n">row1</span> <span class="o">==</span> <span class="p">(</span><span class="n">gene1</span> <span class="o">-</span> <span class="n">gene2</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je ne suis pas très satisfait de cette méthode, elle est assez imposante
(trop longue) et difficile à lire (pas claire). Néanmoins elle fait son
travail et c&#8217;est ce qui compte pour l&#8217;instant. Je ferais peut-être du
refactoring plus tard (ou bien c&#8217;est un lecteur charitable qui va nous
le faire ?). Une explication s&#8217;impose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@board_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">row1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">gene1</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a une première itération sur chaque rangées. Dans chaque boucle, la variable
<code>gene1</code> reçoit la position de la dame de cette rangée, c&#8217;est à dire
le numéro de la colonne (base 0). On va ensuite
comparer cette dame avec les dames des rangées suivantes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="p">(</span><span class="n">row1</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@board_size</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row2</span><span class="o">|</span>
</span><span class='line'>    <span class="n">gene2</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans cette seconde itération, <code>gene2</code> reçoit successivement les positions
de chaque dames restantes. On peut maintenant regarder si deux dames sont
dans la même colonne:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">gene1</span> <span class="o">==</span> <span class="n">gene2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça se passe de commentaire… Pour savoir si deux dames sont sur une
même diagonale, c&#8217;est un peu plus tordu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">row2</span> <span class="o">-</span> <span class="n">row1</span> <span class="o">==</span> <span class="p">(</span><span class="n">gene1</span> <span class="o">-</span> <span class="n">gene2</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vois un peu ça comme un problème de géométrie. Si deux dames ont le
même écart en nombre de colonnes et en nombre de rangées, c&#8217;est qu&#8217;elles
partagent la même diagonale.</p>

<p>Cet article n&#8217;était pas vraiment orienté algorithme génétique mais je pense
qu&#8217;il était pourtant nécessaire. Si on a pas une bonne fonction d&#8217;évaluation,
un algorithme génétique n&#8217;est d&#8217;aucune aide. C&#8217;est pour ça que la première
chose que je fais quand j&#8217;aborde un nouveau problème c&#8217;est de réfléchir au
combo évaluation/chromosome jusqu&#8217;à en avoir une vision claire.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/'>Les algorithmes génétiques démystifiés 24</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/'>Les algorithmes génétiques démystifiés 22</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/'>Les algorithmes génétiques démystifiés 21: Problème des 8 dames</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 22]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/"/>
    <updated>2013-09-25T14:22:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir trouver comment représenter un chromosome pour le
problème des 8 dames (<a href="http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/">article précédent</a>),
on regarde aujourd&#8217;hui comment réaliser l&#8217;évaluation de la population.</p>

<!-- more -->


<p>Sans plus attendre, voici la classe <code>Evaluator</code> dans toute sa
splendeur, on la détaille après:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@board_size</span> <span class="o">=</span> <span class="n">board_size</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">fitness</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Calcule et renvoie le nombre de paires de dames en conflits.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fitness</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout d&#8217;abord le constucteur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il prends comme paramêtre la taille de l&#8217;échiquier et la population à
évaluer. Trouver une solution pour un échiquier de 8 x 8 cases ne
devrait pas être trop difficile et il sera plus intéressant de voir
comment l&#8217;algorithme se débrouille avec des échiquiers de plus grande
taille.</p>

<p>La méthode <code>evalute</code> est identique à celle de la
<a href="http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/">dernière fois</a>:
elle calcule le <em>score</em> puis le <em>fitness</em> de chaque individu.</p>

<p>Passons à la méthode <code>conflicts</code>, qui n&#8217;est pas encore implémentée:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Calcule et renvoie le nombre de paires de dames en conflits.</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est en calculant le nombre de paires de dames en conflits qu&#8217;on pourra
évaluer les différentes positions. Plus il y a de conflits, plus on est
loin d&#8217;une solution. À l&#8217;inverse, une solution possède zéro conflits.
L&#8217;implémentation sera pour la prochaine fois.</p>

<p>Voyons maintenant la méthode <code>score</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">conflicts</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pourquoi diviser 1 par le nombre de conflits ? Pourquoi ne pas avoir écrit
simplement <code>individual.score = conflicts(individual)</code> ?
Parce que je ne trouve pas naturel qu&#8217;un score de zéro soit meilleur qu&#8217;un
score de 5, 10, 20, etc. Je préfère donc calculer l&#8217;inverse du nombre de
conflits. De cette manière si il y a 10 conflits, le score sera 0,1 et si il
y a 2 conflits le score sera 0,5. Et si il y a zéro conflits ? Ruby ne pose
pas de problème avec les nombres réèls:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">[~]⇒ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span>
</span><span class='line'><span class="go">Infinity</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je saurais donc que j&#8217;ai trouvé une solution quand un score sera supérieur
à 1. Avec d&#8217;autres langages on peut gérer ça avec des exceptions, des erreurs,
détecter la division par zéro avant de la faire, etc. Ou encore ajouter
une petite valeur au nombre de conflits, par exemple:</p>

<pre><code>score = 1.0 / (nombre_de_conflits + 0.1)
</code></pre>

<p>La prochaine fois on verra comment calculer le nombre de conflits.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/'>Les algorithmes génétiques démystifiés 24</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23/'>Les algorithmes génétiques démystifiés 23</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/'>Les algorithmes génétiques démystifiés 21: Problème des 8 dames</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 21: Problème des 8 dames]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/"/>
    <updated>2013-09-24T10:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On va tenter de résoudre le problème des 8 dames à l&#8217;aide d&#8217;un algorithme
génétique.</p>

<blockquote><p>Le but du problème des huit dames est de placer huit dames d&#8217;un jeu d&#8217;échecs sur un échiquier de 8 × 8 cases sans que les dames ne puissent se menacer mutuellement, conformément aux règles du jeu d&#8217;échecs (la couleur des pièces étant ignorée). Par conséquent, deux dames ne devraient jamais partager la même rangée, colonne, ou diagonale.</p><footer><strong>Wikipédia</strong> <cite><a href='http://fr.wikipedia.org/wiki/Probl%C3%A8me_des_huit_dames'>fr.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>




<!-- more -->


<p>Avant toute chose, il faut trouver comment nos chromosomes vont pouvoir
représenter une solution potentielle. On pourrait coder ça sous forme
d&#8217;une chaîne de 64 bits, un par case, les 0 étants des cases vides et
les 1 étants les cases occupées par les dames. On pourrait aussi les coder
comme un tableau à deux dimensions, soit 8 rangées multipliées par 8 colonnes.
En y regardant de plus près (ou simplement en relisant la définition du
problème), on remarque que pour qu&#8217;une solution soit
viable, il faut une seule dame par rangée, une seule par colonne et une
seule par diagonale. On peut donc se contenter d&#8217;une liste (un tableau) de
8 nombres entiers, ces nombres étants le numéro de la colonne. Ainsi, pour
un échiquier de 4 x 4 cases, la liste <code>[0, 2, 3, 3]</code> équivaut à la position
suivante:</p>

<pre><code>---------
|D| | | |
---------
| | |D| |
---------
| | | |D|
---------
| | | |D|
---------
</code></pre>

<p>Maintenant on peut s&#8217;occuper de la population. Je vais me servir du code
objet développé dans les derniers articles, en essayant de le modifier
le moins possible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">&lt;&lt;</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Gene</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">rand</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai été obligé de modifier la méthode <code>initialize</code> de la classe <code>Individual</code>
ainsi que la classe <code>Gene</code>. Il faudra en tenir compte si on veut qu&#8217;un
framework sorte de tout ça…</p>

<p>Le prochain article traitera de l&#8217;évaluation du problème des 8 dames.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/'>Les algorithmes génétiques démystifiés 24</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23/'>Les algorithmes génétiques démystifiés 23</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/'>Les algorithmes génétiques démystifiés 22</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 20]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/23/les-algorithmes-genetiques-demystifies-20/"/>
    <updated>2013-09-23T18:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/23/les-algorithmes-genetiques-demystifies-20</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>C&#8217;est le vingtième article de cette série sur les algorithmes génétiques et
j&#8217;aimerai en profiter pour dresser un petit bilan provisoire.</p>

<!-- more -->


<p>On a vu le fonctionnement d&#8217;un algorithme génétique à l&#8217;aide de deux exemples
simples. Dans le premier exemple il s&#8217;agissait de trouver une expression comme
«123+54x3» et dans le second il fallait trouver la chaîne «Mon royaume pour un
cheval».</p>

<p>On a appris à représenter une population d&#8217;individus. Chaque individu étant une
solution potentielle du problême posé. Cette solution est codée dans le
chromosome d&#8217;un individu. On a vu l&#8217;utilisation «historique» d&#8217;une chaîne de
bits pour réprésenter les chromosomes, mais aussi qu&#8217;on pouvait utiliser une
chaîne de caractères quelconques. En fait, il ne faut pas hésiter à représenter
les chromosomes comme bon vous semble.</p>

<p>On a vu ensuite la phase d&#8217;évaluation de la population. Il s&#8217;agit d&#8217;abord
d&#8217;évaluer un chromosome seul en lui affectant un score, puis de l&#8217;évaluer par
rapport aux autres chromosomes, en lui affectant un <em>fitness</em> (aptitude).  Le
fitness permettant d&#8217;être plus fin lors de l&#8217;étape de sélection.</p>

<p>Pour l&#8217;étape de la sélection, nous avons vu deux manières de faire :
l&#8217;élitisme et la roue de la fortune. L&#8217;élitisme consiste à ne conserver
qu&#8217;un pourcentage des meilleurs spécimens d&#8217;une génération. La roue de la
fortune consiste à donner à chaque individu une chance plus ou moins
grande de se reproduire en rapport avec son <em>fitness</em>.</p>

<p>Nous avons fait se reproduire les individus/solutions selectionnés par
croisement de leurs chromosomes. À partir de deux parents, nous avons
obtenu un ou deux enfants. On a utilisé la méthode du croisement en
un point, du croisement en deux points et du croisement uniforme.</p>

<p>Enfin, la mutation (ou l&#8217;apport de matériel génétique inédit d&#8217;une façon ou d&#8217;une
autre) a joué un rôle déterminant pour éviter à nos algorithmes de tomber dans
un extremum local.</p>

<p>En résumé, on a abordé pas mal de choses. Mais ce n&#8217;est que la surface
de l&#8217;iceberg.</p>

<p>Pour les articles à venir, je pense me pencher sur le
<a href="http://fr.wikipedia.org/wiki/Probl%C3%A8me_des_huit_dames">problème des 8 dames</a>.
Ça permettra de voir une autre façon de coder un chromosome et aussi de
confronter les classes développées dans les derniers articles à un
problème bien différent. Ensuite, j&#8217;aimerais résoudre un problème visuel.
Du genre : «Si je dispose de 1000 carrés de taille et de couleur quelconque,
quelle est la meilleure disposition pour s&#8217;approcher au mieux d&#8217;une
image donnée ?». C&#8217;est typiquement le genre de problème qui pourrait
tourner dans les navigateurs et être codé en Javascript. Avez-vous
d&#8217;autres idées/envies pour la suite ?</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/'>Les algorithmes génétiques démystifiés 24</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23/'>Les algorithmes génétiques démystifiés 23</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/'>Les algorithmes génétiques démystifiés 22</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dans le grenier: Le premier pas vers l'an 2000]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/22/dans-le-grenier-le-premier-pas-vers-lan-2000/"/>
    <updated>2013-09-22T21:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/22/dans-le-grenier-le-premier-pas-vers-lan-2000</id>
    <content type="html"><![CDATA[<p>En fouillant dans le grenier, j&#8217;ai retrouvé un livre de 1989 au titre
évocateur : «Devenir champion de Logo plus».</p>

<p><img src="http://lkdjiin.github.io/images/livre_logo.jpg"></p>

<!-- more -->


<p>C&#8217;est une phrase sur la quatrième de couverture qui m&#8217;a le plus frappé:
«En route vers l&#8217;an 2000». Assez drôle avec le recul, mais à l&#8217;époque on
voyait ça partout.</p>

<p>Mon souvenir du langage Logo est assez nostalgique. J&#8217;ai beaucoup
apprécié de l&#8217;utiliser. 25 ans plus tard, je me demande si je
l&#8217;apprécierai toujours autant ? Je pense que je vais consacrer quelques
articles à ce langage, histoire de me remémorer ses particularités.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel/"/>
    <updated>2013-09-21T13:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Les méthodes définies dans le module Kernel de Ruby sont <em>à priori</em> des
méthodes très importantes. En effet le module Kernel est inclus d&#8217;office
dans la classe Object, et donc, ses méthodes sont toujours disponibles.
Elles s&#8217;utilisent directement sous la forme <code>method_name</code> et non pas
<code>object_name.method_name</code>. C&#8217;est cette différence de traitement qui
me donne à penser qu&#8217;elles sont importantes. Dans cette série d&#8217;articles,
je me propose de passer en revue chacune des méthodes du module Kernel
de Ruby version 2.0.</p>

<!-- more -->


<p>Aujourd&#8217;hui on voit les méthodes suivantes:</p>

<ul>
<li>Array(<em>arg</em>)</li>
<li>Hash(<em>arg</em>)</li>
<li>String(<em>arg</em>)</li>
</ul>


<p>Ce sont toutes les trois des méthodes de conversions. Elles transforment
respectivement l&#8217;argument en un type Array, Hash ou String. Pour effectuer
cette conversion elles utilisent la méthode <code>to_*</code> sur l&#8217;argument. Par
exemple <code>String(self)</code> utilise <code>self.to_s</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">[~]⇒ irb</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">String</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="go">&quot;main&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="nb">self</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="go">&quot;main</span>
</span></code></pre></td></tr></table></div></figure>


<p>La particularité de ces méthodes est que leur nom débutent par une majuscule,
ce qui va à l&#8217;encontre des conventions en Ruby et les fait ressembler un
peu comme à un constructeur en Java et consorts. D&#8217;un autre coté, le langage
n&#8217;empêche pas de nommer les méthodes ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="k">def</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt; </span>  <span class="nb">puts</span> <span class="n">arg</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="k">end</span>
</span><span class='line'><span class="go">nil</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">hello</span>
</span><span class='line'><span class="go">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;imagine que si ces méthodes débutent par une majuscule, c&#8217;est pour
permettre aux développeurs d&#8217;utiliser <code>array</code>, <code>hash</code> et <code>string</code> comme
nom de variable. Par contre je n&#8217;arrive pas à trouver une utilité à
ces méthodes… Je veux dire pourquoi utiliser <code>String(arg)</code> plutôt que
<code>arg.to_s</code> ?</p>

<p>Si toi, Lecteur, tu as une réponse, n&#8217;hésite pas à laisser un commentaire ;&ndash;)</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/28/ruby-les-methodes-du-module-kernel-2/'>Ruby: Les méthodes du module Kernel 2</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes/'>Un plugin Octopress pour les articles connexes</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 19]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/"/>
    <updated>2013-09-20T09:31:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Suite et fin de la transformation en code orienté objet de l&#8217;algorithme
génétique sur le paradoxe du singe savant.</p>

<!-- more -->


<p>Le rôle de la classe <code>MatingPool</code> est de sélectionner les individus pour
la reproduction, suivant la méthode de la roue de la fortune:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MatingPool</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">integer_part</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">real_part</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">-</span> <span class="n">integer_part</span>
</span><span class='line'>      <span class="n">integer_part</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">individual</span><span class="o">.</span><span class="n">dup</span> <span class="p">}</span>
</span><span class='line'>      <span class="vi">@mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">individual</span><span class="o">.</span><span class="n">dup</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="n">real_part</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="vi">@mating_pool</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random</span>
</span><span class='line'>    <span class="vi">@mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Au passage, la méthode <code>random</code> permettra de choisir un parent au hasard.</p>

<p>Les classes <code>Crossover</code> et <code>Mutator</code> s&#8217;occupent bien sûr de la partie
reproduction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Crossover</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@mutator</span> <span class="o">=</span> <span class="no">Mutator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@size</span><span class="p">,</span> <span class="vi">@rate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">two_point</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="n">assemble</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">,</span> <span class="n">two_cut_points</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child</span> <span class="o">=</span> <span class="vi">@mutator</span><span class="o">.</span><span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Individual</span><span class="o">.</span><span class="n">from_chromosome</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">two_cut_points</span>
</span><span class='line'>    <span class="n">point1</span> <span class="o">=</span> <span class="n">cut_point</span>
</span><span class='line'>    <span class="n">point2</span> <span class="o">=</span> <span class="n">cut_point</span>
</span><span class='line'>    <span class="n">point1</span><span class="p">,</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">point2</span><span class="p">,</span> <span class="n">point1</span> <span class="k">if</span> <span class="n">point1</span> <span class="o">&gt;</span> <span class="n">point2</span>
</span><span class='line'>    <span class="o">[</span><span class="n">point1</span><span class="p">,</span> <span class="n">point2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cut_point</span>
</span><span class='line'>    <span class="nb">rand</span><span class="p">(</span><span class="vi">@size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assemble</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">,</span> <span class="n">points</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point1</span><span class="p">,</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">points</span>
</span><span class='line'>    <span class="n">parent1</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point1</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="n">point1</span><span class="o">.</span><span class="n">.point2</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>      <span class="n">parent1</span><span class="o">.</span><span class="n">chromosome</span><span class="o">[</span><span class="n">point2</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mutator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span> <span class="o">=</span> <span class="n">chromosome_size</span>
</span><span class='line'>    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">index</span><span class="o">|</span> <span class="n">chromosome</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@rate</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">chromosome</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code de ces trois classes reprends plus ou moins le code développé en
style procédural dans les articles précédents et je ne vois pas tellement
ce que je pourrais en dire de plus. Il reste donc à lancer la machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">generations</span> <span class="o">=</span> <span class="mi">500</span>
</span><span class='line'><span class="n">search</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="n">population</span> <span class="o">=</span> <span class="no">Population</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">search</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">mutation</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">001</span>
</span><span class='line'><span class="no">GeneticAlgorithm</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">search</span><span class="p">,</span> <span class="n">mutation</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, c&#8217;est terminé pour le code objet. Quand j&#8217;aurais présenter 2 ou 3
algorithmes génétiques de plus, on verra quelles classes résistent et peuvent
être réutilisées et lesquelles doivent être repensées. Ça nous conduira
éventuellement vers la création d&#8217;un framework…</p>

<p>À demain</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing/'>Les algorithmes génétiques démystifiés 16: Le Hill-Climbing</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 18]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/"/>
    <updated>2013-09-19T18:14:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On continue la transformation en code orienté objet de l&#8217;algorithme génétique
sur le paradoxe du singe savant.</p>

<!-- more -->


<p>D&#8217;abord la classe <code>Evaluator</code>, dont le rôle est d&#8217;évaluer la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Evaluator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">search_value</span><span class="p">,</span> <span class="n">population</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@search_value</span> <span class="o">=</span> <span class="n">search_value</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">evaluate</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">fitness</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">chromosome</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fitness</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">individual</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>      <span class="n">individual</span><span class="o">.</span><span class="n">fitness</span> <span class="o">=</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit le découpage entre <em>score</em> et <em>fitness</em>, dont on a parlé hier.</p>

<p>Ensuite, voici la classe <code>GeneticAlgorithm</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GeneticAlgorithm</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">generations</span><span class="p">,</span> <span class="n">population</span><span class="p">,</span> <span class="n">search_value</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@generations</span> <span class="o">=</span> <span class="n">generations</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">=</span> <span class="n">population</span>
</span><span class='line'>    <span class="vi">@search_value</span> <span class="o">=</span> <span class="n">search_value</span>
</span><span class='line'>    <span class="vi">@mutation_rate</span> <span class="o">=</span> <span class="n">mutation_rate</span>
</span><span class='line'>    <span class="vi">@crossover</span> <span class="o">=</span> <span class="no">Crossover</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">search_value</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">mutation_rate</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="vi">@generations</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Evaluator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@search_value</span><span class="p">,</span> <span class="vi">@population</span><span class="p">)</span><span class="o">.</span><span class="n">evaluate</span>
</span><span class='line'>      <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">best</span>
</span><span class='line'>      <span class="nb">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">exit</span> <span class="k">if</span> <span class="n">best</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>      <span class="n">next_generation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">best</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;----------------------&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Gen: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Best: </span><span class="si">#{</span><span class="n">best</span><span class="o">.</span><span class="n">chromosome</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>    <span class="n">pool</span> <span class="o">=</span> <span class="no">MatingPool</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@population</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="vi">@population</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="vi">@crossover</span><span class="o">.</span><span class="n">two_point</span><span class="p">(</span><span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">,</span> <span class="n">pool</span><span class="o">.</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>run</code> remplace la fonction principale qu&#8217;on avait dans nos
scripts jusqu&#8217;ici. En écrivant l&#8217;article, je vois que la méthode <code>display</code>
me dérange : elle ne repose sur aucun membre, elle serait donc mieux dans
une classe à part entière.</p>

<p>Voilà, c&#8217;est un peu court en explication comme article et je m&#8217;en excuse
mais aujourd&#8217;hui je suis très préssé. La prochaine fois on parle des classes
<code>MatingPool</code>, <code>Crossover</code> et <code>Mutator</code>.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing/'>Les algorithmes génétiques démystifiés 16: Le Hill-Climbing</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 17: Orienté Objet]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/"/>
    <updated>2013-09-18T10:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Il est temps de donner du code orienté objet, non ? C&#8217;est ce à quoi je vais
m&#8217;attacher dans cet article et les quelques qui suivront. Après ça, je
pense qu&#8217;on pourra en finir avec le paradoxe du singe savant et passer à
quelque chose de plus intéressant.</p>

<!-- more -->


<p>Aujourd&#8217;hui on voit la création de la population selon le paradigme OO.
Il nous faut d&#8217;abord pouvoir créer un individu:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Individual</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_chromosome</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:score</span><span class="p">,</span> <span class="ss">:fitness</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:chromosome</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">chromosome_size</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">chromosome</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="n">chromosome</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@chromosome</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">chromosome_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@chromosome</span> <span class="o">+=</span> <span class="no">Gene</span><span class="o">.</span><span class="n">random</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il y a deux manières de créer un individu. Lors de l&#8217;initialisation de
la population, on utilisera <code>Individual.random</code> avec la taille du chromosome.
Lors d&#8217;un accouplement, on utilisera <code>Individual.from_chromosome</code> avec le
chromosome résultant des parents. On note aussi les deux attributs <code>score</code>
et <code>fitness</code>. Je ne vais pas m&#8217;étaler sur le <code>score</code>, 1 point par lettre
bien placée, voilà, vous avez compris. Par contre <code>fitness</code> demande
quelques explications puisque c&#8217;est la première fois que j&#8217;emploie ce terme,
pourtant courant en algorithme génétique.</p>

<p><em>Fitness</em> signifie aptitude. Quand le score mesure la performance d&#8217;un
individu face à un problème, le <em>fitness</em> mesure un individu par rapport
à son environnement, c&#8217;est à dire ici par rapport à la population. Il n&#8217;y
a rien de nouveau, on a déjà fait ça quand on normalisait les scores et
qu&#8217;on les transformaient en pourcentage (ou en fraction). Jusqu&#8217;ici
j&#8217;étais resté vague en parlant seulement d&#8217;évaluation et je profite du
code d&#8217;aujourd&#8217;hui pour introduire cette notion de <em>fitness</em>.</p>

<p>La production d&#8217;un gène est assurée par la classe <code>Gene</code>, qui ne demande
pas d&#8217;explications:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Gene</span>
</span><span class='line'>  <span class="vc">@@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">random</span>
</span><span class='line'>    <span class="vc">@@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vc">@@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il reste à concevoir la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Population</span> <span class="o">&lt;</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">,</span> <span class="n">population_size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">self</span> <span class="o">&lt;&lt;</span> <span class="no">Individual</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="n">chromosome_size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">best</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="n">individual</span><span class="o">.</span><span class="n">score</span><span class="p">}</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La population étant basiquement une liste d&#8217;objets <code>Individual</code>, il me
semble logique d&#8217;hériter de <code>Array</code>. J&#8217;ai prévu une méthode <code>best</code> qui
permettra d&#8217;afficher la progression de l&#8217;algorithme et qui pourra aussi
servir pour la condition d&#8217;arrêt du programme quand <code>individual.score</code>
sera égal à la taille de la chaîne recherchée.</p>

<p>Demain ce sera au tour de l&#8217;évaluation d&#8217;être transformée en code objet.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing/'>Les algorithmes génétiques démystifiés 16: Le Hill-Climbing</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 16: Le Hill-Climbing]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing/"/>
    <updated>2013-09-17T10:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/17/les-algorithmes-genetiques-demystifies-16-le-hill-climbing</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>J&#8217;aime les algorithmes génétiques. Je les trouvent fascinants. Mais je ne
voudrais pas laisser croire qu&#8217;ils sont toujours <em>la</em> solution.
Aujourd&#8217;hui je parle de l&#8217;algorithme <em>Hill-Climbing</em>, qu&#8217;on peut considérer
comme un algorithme génétique dégénéré.</p>

<!-- more -->


<h2>Hill-Climbing</h2>

<p>Pourquoi dégénéré ? Parce que le <em>Hill-Climbing</em> est essentiellement un
algorithme génétique sans population et sans croisement… Le principe est
très simple: on produit une solution au hasard, puis on mute cette solution
en espérant qu&#8217;elle soit meilleure que la précédente. Dit comme ça, cela
semble un peu aventureux. Mais parfois, suivant le problème posé, ça
fonctionne vraiment bien. Gardons le thème des articles précédents,
c&#8217;est à dire le paradoxe du singe savant. On cherche toujours la même phrase,
à savoir «Mon royaume pour un cheval». C&#8217;est parti pour le code.</p>

<h3>Le code</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">random_gene</span>
</span><span class='line'>  <span class="n">phrase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">quality</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@solution</span> <span class="o">=</span> <span class="n">make_chromosome</span>
</span><span class='line'><span class="vi">@generation</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a besoin de produire une phrase au hasard, que je continue à appeler
<em>chromosome</em>, et c&#8217;est la méthode <code>make_chromosome</code> qui s&#8217;en charge.
On a besoin de modifier une phrase, je continue à dire <em>muter</em>, et c&#8217;est
bien sûre le rôle de <code>mutate</code>. Enfin, on doit pouvoir évaluer la qualité
d&#8217;une phrase, avec <code>quality</code>. Rien de vraiment nouveau sous le soleil, ça
ressemble furieusement au code développé pour l&#8217;algorithme génétique
précédent.
On peut noter avec intérêt la ligne <code>@solution = make_chromosome</code>. Ici, on
ne parle pas d&#8217;individus puisqu&#8217;il n&#8217;y a pas de population.</p>

<p>Et maintenant le <em>Hill-Climbing</em> proprement dit. Attention les yeux, ça va
être rapide:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Hill-Climbing</span>
</span><span class='line'><span class="k">until</span> <span class="vi">@solution</span> <span class="o">==</span> <span class="vi">@search_value</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">opponent</span> <span class="o">=</span> <span class="n">mutate</span><span class="p">(</span><span class="vi">@solution</span><span class="o">.</span><span class="n">dup</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@solution</span> <span class="o">=</span> <span class="n">opponent</span> <span class="k">if</span> <span class="n">quality</span><span class="p">(</span><span class="n">opponent</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">quality</span><span class="p">(</span><span class="vi">@solution</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Gen: </span><span class="si">#{</span><span class="vi">@generation</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@solution</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="vi">@generation</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà. Pas de population, pas de reproduction, pas de <em>mating pool</em>. Juste
une mutation et une comparaison de qualité. Mais est-ce que ça fonctionne ?</p>

<pre><code>[~/genetic]⇒ time ruby monkey_hill.rb
Gen: 0    CwAEKaVBHW nTVWIsvhnwODtaL
...
Gen: 449  CwAEKoVaHW  TouI vh wODtal
...
Gen: 1446 Mnn royaiueUpoustun chFvml
...
Gen: 4652 Mon royaume popr un cheval
Gen: 4653 Mon royaume pour un cheval

real  0m0.598s
user  0m0.572s
sys   0m0.024s
</code></pre>

<p>Un grand nombre de générations par rapport à l&#8217;algorithme génétique mais
un temps de calcul bien plus court (pour ce problème particulier).</p>

<h3>Moralité</h3>

<p>Avant de se jeter dans l&#8217;écriture d&#8217;un algorithme génétique, il est
intéressant d&#8217;écrire d&#8217;abord un <em>Hill-Climbing</em>. Parfois on n&#8217;a pas
besoin de plus, parfois ça permet de valider la fonction d&#8217;évaluation.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 15: croisement uniforme]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/16/les-algorithmes-genetiques-demystifies-15-croisement-uniforme/"/>
    <updated>2013-09-16T13:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/16/les-algorithmes-genetiques-demystifies-15-croisement-uniforme</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après le croisement en un point et le croisement en deux points, on
discute aujourd&#8217;hui d&#8217;une troisième méthode: le croisement uniforme.</p>

<!-- more -->


<h2>Croisement uniforme (uniform crossover)</h2>

<p>Pourquoi s&#8217;arrêter au croisement en deux points ? Pourquoi pas trois points ?
Ou encore quatre ? Si on pousse cette démarche, on arrive au croisement
uniforme. Le principe est le suivant: on prend deux parents, A et B ; pour
chaque gènes on lance une pièce de monnaie ; si c&#8217;est face l&#8217;enfant prend
le gène du parent A ; si c&#8217;est pile l&#8217;enfant prend le gène du parent B.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">uniform_crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">bit</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span> <span class="o">&gt;=</span> <span class="nb">rand</span>
</span><span class='line'>      <span class="n">child</span> <span class="o">+=</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">index</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">child</span> <span class="o">+=</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">index</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alors voyons les performances pour un nombre d&#8217;individus égal et un taux de
mutation égal:</p>

<pre><code>=================================================
| méthode de croisement | génération | secondes |
=================================================
| un point              |         81 |        5 |
|-----------------------------------------------|
| deux points           |         54 |        3 |
|-----------------------------------------------|
| uniforme              |         47 |        6 |
|-----------------------------------------------|
</code></pre>

<p>Le nombre de générations nécéssaires pour trouver la solution diminue
significativement mais en même temps le nombre de secondes a doublé
par rapport au croisement en deux points. Est-ce qu&#8217;il faut jetter la
méthode du croisement uniforme aux oubliettes ? Je ne pense pas. On peut
imaginer que si le croisement uniforme prends 2 fois plus de temps que
le croisement en deux points, c&#8217;est parce que celle-ci (croisement uniforme)
génère un nombre aléatoire pour chaque gènes. Si la méthode d&#8217;évaluation
était plus gourmande en temps de calcul, les quelques générations gagnées
par le croisement uniforme s&#8217;avéreraient payantes.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: le croisement en deux points]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/15/les-algorithmes-genetiques-demystifies-le-croisement-en-deux-points/"/>
    <updated>2013-09-15T11:40:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/15/les-algorithmes-genetiques-demystifies-le-croisement-en-deux-points</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on parle plus en détail de la méthode de reproduction
utilisé jusqu&#8217;ici, à savoir le «croisement» de deux individus, et
je décris la variante du «croisement en deux points».</p>

<!-- more -->


<h2>Croisement en un point (one point crossover)</h2>

<p>Pour l&#8217;instant on a utilisé la méthode du croisement en un point
(<em>one point crossover</em> in english). Pour mémoire, voici son
implémentation dans le dernier problème, le paradoxe du singe savant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et en voici une représentation, le caractère <code>:</code> représente le point
de croisement:</p>

<pre><code>parent A  123:45678
parent B  abc:defgh

enfant A  123:defgh
enfant B  abc:45678
</code></pre>

<p>On remarque que je prends garde d&#8217;éviter les valeurs extrèmes pour le
point de croisement. Si ce point était par exemple zéro,
il n&#8217;y aurait pas croisement mais une simple copie conforme d&#8217;un parent.
Malgré tout, je ne voudrais pas laisser croire que c&#8217;est très important,
et on pourrait très bien écrire:</p>

<pre><code>point = rand(0..@search_value.size+1)
</code></pre>

<p>Il y aurait copie, et non croisement, dans 2/<em>l</em> cas (où <em>l</em> est la longueur
du chromosome). Plus les chromosomes sont long et moins c&#8217;est un problème.</p>

<p>On peut remarquer aussi que je ne crée qu&#8217;un seul enfant sur les deux
possibles. Un code plus générique devrait créer et renvoyer les deux
enfants, libre à nous d&#8217;en utiliser un seul ou les deux.</p>

<h2>Croisement en deux points (two point crossover)</h2>

<p>Une autre méthode de croisement populaire est le croisement en deux
points. On intervertit le matériel génétique qui se trouve <em>entre</em> les
deux points de croisement. Voici une représentation de cette méthode:</p>

<pre><code>parent A  123:456:78
parent B  abc:def:gh

enfant A  123:def:78
enfant B  abc:456:gh
</code></pre>

<p>Et voici une implémentation (toujours avec la création d&#8217;un seul
enfant):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">two_point_crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point1</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point2</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point1</span><span class="p">,</span> <span class="n">point2</span> <span class="o">=</span> <span class="n">point2</span><span class="p">,</span> <span class="n">point1</span> <span class="k">if</span> <span class="n">point1</span> <span class="o">&gt;</span> <span class="n">point2</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point1</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point1</span><span class="o">.</span><span class="n">.point2</span><span class="o">]</span> <span class="o">+</span>
</span><span class='line'>          <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point2</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À ce stade, vous vous demandez sûrement quel est l&#8217;intérêt de cette
méthode ? Pour le comprendre, prenons un exemple. Le chromosome qu&#8217;on
recherche est <code>bonjour</code> et dans notre population on a le chromosome
suivant:</p>

<pre><code>bacdefr
</code></pre>

<p>Seul ces deux gènes extrèmes sont bons. On peut aussi le noter de cette
façon:</p>

<pre><code>b*****r
</code></pre>

<p>Le <code>*</code> indique un emplacement dont la valeur n&#8217;est pas significative pour
la discussion en cours. Si on applique le croisement en un point, les deux
bons gènes vont être séparés dans presque tout les cas (et même dans tous
les cas si on ne permet pas que le point de croisement se fasse aux valeurs
extrèmes). Comparez avec le chromosome suivant:</p>

<pre><code>bo*****
</code></pre>

<p>Les deux gènes <code>bo</code> seront rarement séparés. La probabilité est de
1/<em>l</em>-1 si on ne permet pas les valeurs extrèmes (<em>l</em> est la longueur du
chromosome). Donc avec la méthode du croisement en un point, le premier
et le dernier gène sont traités différement des autres.
Reste à savoir quelle incidence cela a sur la performance de l&#8217;algorithme.
Voici les mesures pour l&#8217;algorithme précédent (avec taille de population
et taux de mutation égal):</p>

<pre><code>=================================================
| méthode de croisement | génération | secondes |
=================================================
| un point              |         81 |        5 |
|-----------------------------------------------|
| deux points           |         54 |        3 |
|-----------------------------------------------|
</code></pre>

<p>L&#8217;amélioration se lit clairement. En attendant le prochain article,
n&#8217;hésitez pas à expérimenter ce qui vous passe par la tête (par exemple,
pourquoi se limiter à 2 parents ?).</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: la commande point et le clavier Azerty]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty/"/>
    <updated>2013-09-14T09:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Tout Vimiste sait à quoi sert le <code>.</code>, cette commande répète le dernier
changement. Si vous venez de saisir <code>dap</code> pour supprimer un paragraphe,
il suffit de tapez <code>.</code> pour en supprimer un second. Très utile, c&#8217;est
ce que nous dit toute la littérature sur Vim. Y&#8217;aurait pas comme un petit
malaise quand même ?</p>

<!-- more -->


<p>Quand j&#8217;ai débuté sur Vim, je lisais ça partout: «Le <code>.</code> c&#8217;est génial» ou
encore «Préparez vous à utiliser <code>.</code> tout le temps», etc. Après un mois
à utiliser Vim, j&#8217;avais du utiliser cette commande 3 fois maximum… Je
sentais bien qu&#8217;il y avait un souci quelque part, mais pris dans
l&#8217;apprentissage de Vim je ne mettais pas le doigt dessus. J&#8217;ai presque fini par
l&#8217;oublier, ce <code>.</code>.</p>

<p>Et puis un jour, j&#8217;ai changé de clavier pour un Bépo. Et comme par magie je
me suis mis à utiliser le <code>.</code> tout le temps, sans même m&#8217;en rendre compte.</p>

<p>Voici un clavier Bépo et un clavier Qwerty:</p>

<p><img src="http://lkdjiin.github.io/images/clavier-bepo.png"></p>

<p><img src="http://lkdjiin.github.io/images/clavier-qwerty.png"></p>

<p>Sur Bépo et Qwerty, le point est une touche en accès direct. Au contraire
de l&#8217;Azerty où il faut combiner avec la touche Majuscule pour l&#8217;atteindre:</p>

<p><img src="http://lkdjiin.github.io/images/clavier-azerty.png"></p>

<p>Du coup je me demande si ça ne vaudrait pas le coup d&#8217;échanger le <code>.</code> et
le <code>;</code> pour les Vimistes qui utilisent un clavier Azerty. Je suis curieux
de savoir ce que vous en pensez. Avez vous déjà tenté cette manip et la
conseilleriez vous ?</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/'>Le système de fenêtrage de Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte/'>Bien débuter avec Vim: Recherche de texte</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/'>Bien débuter avec Vim: la touche Escape</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/13/les-algorithmes-genetiques-demystifies-13/"/>
    <updated>2013-09-13T07:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/13/les-algorithmes-genetiques-demystifies-13</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Aujourd&#8217;hui on analyse ce qui arrive lorsqu&#8217;on joue avec les deux
variables dont on dispose pour l&#8217;instant : la taille de la population
et le taux de mutation.</p>

<!-- more -->


<h2>Une définition de la performance</h2>

<p>Comment mesurer les performances d&#8217;un algorithme génétique ? Le nombre de
générations nécessaires pour trouver la solution vient tout de suite à
l&#8217;esprit. C&#8217;est toujours une mesure intéressante mais la plus importante
mesure reste évident <strong>le temps</strong> écoulé avant de trouver la solution.</p>

<p>Les mesures que je propose ici n&#8217;ont rien de très <em>scientifique</em>. Pour
chaque mesure j&#8217;ai fait tourner l&#8217;algorithme génétique développé dans les
<a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">derniers articles</a> (le paradoxe du singe savant) 5 fois de suite.
C&#8217;est malgré tout suffisant pour dégager les tendances.</p>

<h2>Performances suivant la taille de la population</h2>

<p>Tout d&#8217;abord voyons ce qu&#8217;il se passe quand on augmente la taille de la
population.</p>

<pre><code>======================================
| population | génération | secondes |
======================================
|        150 |       3277 |       32 |
|------------------------------------|
|        500 |        363 |       12 |
|------------------------------------|
|      1.000 |         81 |        5 |
|------------------------------------|
|     10.000 |         50 |       33 |
|------------------------------------|
</code></pre>

<p>Ça ne devrait pas vous surprendre : plus la population augmente plus la
solution est trouvée en un minimum de générations. C&#8217;est presque la même
chose avec le temps, sauf que passé un certain point, il remonte en flêche.
C&#8217;est essentiellement du aux structures de données utilisées pour
construire le <em>mating pool</em>, évaluer les individus, etc. Et ça pose la
question de trouver un langage informatique adapté aux algorithmes
génétiques, langage qui soit un bon compromis entre facilité
d&#8217;écriture/lecture et performances brutes.</p>

<h2>Performances suivant le taux de mutation</h2>

<p>Voyons maintenant l&#8217;influence du taux de mutation.</p>

<pre><code>======================================
| taux de    | génération | secondes |
| mutation * |            |          |
======================================
|       0.02 |        293 |       20 |
|------------------------------------|
|       0.01 |         81 |        5 |
|------------------------------------|
|      0.005 |         75 |        5 |
|------------------------------------|
|      0.001 |         73 |        5 |
|------------------------------------|
|     0.0001 |         65 |        4 |
|------------------------------------|
|          0 |         ** |       ** |
|------------------------------------|
* Pour une population de 1000 individus.
** Aux environs de la 60ème génération si on a de la
   chance, sinon jamais car on atteint un extremum local.
</code></pre>

<p>Entre 1/100ème et 1/10.000ème la performance évolue, mais peu. À 2/100ème on
voit que la performance est déjà en train de chuter. En dessous de
1/10.000ème, le comportement se rapproche fortement d&#8217;un taux de zéro pourcent.
On considère généralement un taux de mutation de 1/<em>n</em> comme un bon
compromis (où <em>n</em> est la taille de la population).</p>

<p>Voilà, cette petite analyse est terminée.
Je ne sais pas de quoi je parlerais la prochaine fois, mais le sujet
est tellement vaste que j&#8217;ai l&#8217;impression que
cette série sur les algorithmes génétiques ne s&#8217;arretera jamais…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/12/les-algorithmes-genetiques-demystifies-12/"/>
    <updated>2013-09-12T08:28:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/12/les-algorithmes-genetiques-demystifies-12</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Pour résoudre le paradoxe du singe savant, on a utilisé la méthode
de sélection dite de «la roue de la fortune», mais je n&#8217;avais pas
fournit l&#8217;algorithme complet de cette méthode. On en parle aujourd&#8217;hui.</p>

<!-- more -->


<p>Le problème avec la simulation de la roue de la fortune que j&#8217;ai
utilisé <a href="http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/">précédemment</a>,
c&#8217;est qu&#8217;elle n&#8217;est pas réaliste. Je n&#8217;utilisai que la partie entière des
scores d&#8217;évaluation pour placer des copies des individus dans le
<em>mating pool</em>. Ainsi un score de 0,99 était éliminatoire, et un score de 2,01
était vu comme deux fois plus adapté qu&#8217;un score de 1,99 !</p>

<h2>Une roue de la fortune réaliste</h2>

<p>L&#8217;idée, qui vient de <a href="http://en.wikipedia.org/wiki/John_Henry_Holland">John Holland</a>, est de donner une chance supplémentaire
au individus de placer une copie d&#8217;eux-mêmes en fonction de la partie
fractionnaire de leur score. Par exemple un individu évalué à 1,87 placera
d&#8217;office une copie dans le <em>mating pool</em> et aura 87 chances sur 100 de placer
une seconde copie. De même, un individu évalué à 0,49 aura 49 chances sur 100
de placer une copie. Simple, efficace et réaliste. Voici la méthode
<code>create_mating_pool</code> révisée:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_mating_pool</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">integer_part</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="n">fractional_part</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="n">integer_part</span>
</span><span class='line'>    <span class="n">integer_part</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="n">fractional_part</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">mating_pool</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour que ça fonctionne avec n&#8217;importe quelle taille de population, et pas
seulement 100 individus, il faut aussi réviser la façon dont on
normalise les scores:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="vi">@population_size</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà, on peut maintenant jouer avec nos deux variables que sont
<code>@population_size</code>, la taille de la population, et <code>@mutation_rate</code>, le
taux de mutation, pour rendre l&#8217;algorithme le plus rapide possible.</p>

<p>Il y a beaucoup de choses à propos des algorithmes génétiques sur
lesquelles j&#8217;ai encore envie d&#8217;écrire, notamment:</p>

<ul>
<li>analyse des variables</li>
<li>autres méthodes de reproduction</li>
<li>autres méthodes de sélection</li>
<li>mélange élitisme/roue de la fortune</li>
<li>code orienté objet (éventuellement création d&#8217;un framework)</li>
<li>algorithme dégénéré (Hill-climbing)</li>
<li>extremum local</li>
</ul>


<p>Chaque point de cette liste fera sûrement l&#8217;objet d&#8217;un (ou plusieurs)
futur article.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/"/>
    <updated>2013-09-11T09:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La <a href="http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/">dernière fois</a>
on a assuré la sélection à l&#8217;aide d&#8217;une piscine
d&#8217;accouplement (je ne me lasse pas de ce terme…). Aujourd&#8217;hui, on peut
aller au bout de l&#8217;algorithme en ajoutant la reproduction.</p>

<!-- more -->


<h2>La reproduction des phrases</h2>

<p>Il n&#8217;y a rien de nouveau par rapport à <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l&#8217;algorithme précédent</a>,
c&#8217;est peut-être même plus simple. Voici la méthode <code>crossover</code>, qui
permet d&#8217;obtenir un enfant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Edit du 14 sept 2013</strong> Le code ci-dessus contient une erreur, à la
seconde ligne il faut lire: <code>point = rand(1..@search_value.size)</code>.</p>

<p><code>crossover</code> prends deux chromosomes en entrée (les parents). On définit
un point de croisement au hasard. On utilise ce point de croisement pour
<em>couper</em> les parents en deux parties. Un enfant est produit en concaténant
la première partie du premier parent avec la seconde partie du second
parent. Enfin on renvoie un chromosome, après avoir passer l&#8217;enfant/phrase
à la mutation. Voici justement la méthode chargée de la mutation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">phrase</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">random_gene</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">phrase</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La différence avec <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l&#8217;algorithme précédent</a> est que cette fois chaque gène
peut muter. Avantage: on est plus proche du phénomène naturel et on pourrait
se retrouver avec un chromosome dont 2 ou 3 gènes sont mutants, ça semble
bon pour la diversité génétique. Inconvénient: Générer un nombre aléatoire
pour chaque gène peut faire tomber les performances si on a un millier de
gènes (ou plus) par chromosome et/ou une population importante. Comme
je dis d&#8217;habitude: «Si c&#8217;est de l&#8217;informatique, c&#8217;est une histoire de
compromis».</p>

<p>On peut maintenant créer une méthode <code>next_generation</code> qui englobe la
sélection et la reproduction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="n">create_mating_pool</span>
</span><span class='line'>  <span class="n">pool_size</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">parent2</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je ne vais pas vous faire l&#8217;affront d&#8217;expliquer cette méthode, vous avez
toutes les cartes en main pour la comprendre. Sinon, c&#8217;est que j&#8217;ai mal
fait mon boulot…</p>

<p>Il reste à mettre tout ça ensemble, voici le code complet du programme:</p>

<figure class='code'><figcaption><span>monkey.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="n">create_mating_pool</span>
</span><span class='line'>  <span class="n">pool_size</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">parent2</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_mating_pool</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">mating_pool</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">phrase</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">random_gene</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">phrase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">solution_found</span>
</span><span class='line'>  <span class="n">found</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">found</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="vi">@search_value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">found</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@population_size</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@mutation_rate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">01</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>  <span class="n">score_population</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Generation: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="k">if</span> <span class="n">solution_found</span>
</span><span class='line'>  <span class="n">next_generation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà le résultat:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
...
Generation: 869
[1.0092854259184496, "Mon royaume pour un chevaB"]
[1.0092854259184496, "Mon royaume pour un chevan"]
[1.0092854259184496, "Mon royaume pour un chevaB"]
...
[1.0496568429551878, "Mon royaume pour un cheval"]
...
[1.0092854259184496, "Mon royaume pour un chevan"]
[1.0092854259184496, "Mon royaume pour un chevaB"]
[0.9689140088817118, "Mon royaume pour un chNvaB"]
</code></pre>

<p>La prochaine fois on va améliorer notre méthode de sélection pour
tenir compte des chiffres après la virgule.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/"/>
    <updated>2013-09-10T08:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/">l&#8217;article précédent</a>
on a appris à évaluer la population en normalisant les scores.
Aujourd&#8217;hui on s&#8217;attaque à la méthode de sélection dite de
«la roue de la fortune».</p>

<!-- more -->


<p>Dans l&#8217;algorithme génétique <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
j&#8217;utilisais une méthode de sélection <em>artificielle</em> qu&#8217;on appelle
l&#8217;élitisme : je conservais un certain nombre des meilleurs
individus d&#8217;une génération, en éliminant purement et simplement les
autres. J&#8217;ai commencé par présenter cette méthode, l&#8217;élitisme, car c&#8217;est
la plus simple. On a ainsi pu se concentrer sur d&#8217;autres parties des
algorithmes génétiques. Seulement voilà, on a vu que cette méthode de
sélection posait certains problèmes, notamment l&#8217;appauvrissement du
patrimoine génétique. La méthode de la roue de la fortune va donner une
chance à tout individu porteur d&#8217;un bon gène de le transmettre à la
génération suivante. Mais bien sûr, certains auront plus de chances
que d&#8217;autres…</p>

<h2>La roue de la fortune</h2>

<p>Imaginez une roue de la fortune où chaque case représenterait un individu.
Imaginez que plus l&#8217;individu est adapté, plus sa case sur cette roue est
large. Autrement dit, un meilleur individu à une case qui occupe un
pourcentage plus important de la roue qu&#8217;un moins bon individu. Tiens !
Ça tombe bien, la dernière fois on a justement transformé les scores en
pourcentages.</p>

<p>On va utiliser cette image de la roue de la
fortune pour sélectionner des individus en vue de la reproduction.
Je vais prendre un exemple : supposons une population de 5 individus nommés
A, B, C, D et E. Après évaluation nous pourrions avoir:</p>

<pre><code>A 40%
B 30%
C 20%
D 10%
E  0%
</code></pre>

<p>Pour simuler le principe de la roue de la fortune, nous allons créer une
sélection avec 40 copies de A, 30 copies de B, 20 copies de C et 10 copies
de D. Quand le moment de la reproduction sera venu, on tirera au sort des
couples de parents. De cette manière, les plus adaptés auront plus de
chances de transmettre leurs gènes, mais même les moins adaptés auront aussi
leur chance. L&#8217;endroit où l&#8217;on place les individus sélectionnés (suivant le
langage : une liste, un tableau, etc) est appellé <em>mating pool</em>, qu&#8217;on peut
traduire par piscine d&#8217;accouplement. J&#8217;aurais préféré un terme qui fasse
moins laboratoire, comme «club de rencontre»…</p>

<p>Voyons le code pour créer ce fameux <em>mating pool</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_mating_pool</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># mating_pool.each {|i| puts i.inspect }</span>
</span><span class='line'>  <span class="n">mating_pool</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne commentée ne sera pas incluse dans le programme final,
mais elle va servir aujourd&#8217;hui pour voir ce qu&#8217;il se passe et
identifier un souci. Voici le code complet du programme, jusqu&#8217;à maintenant:</p>

<figure class='code'><figcaption><span>monkey.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_mating_pool</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">mating_pool</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">mating_pool</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@population_size</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'><span class="n">score_population</span>
</span><span class='line'><span class="n">create_mating_pool</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on lance ce programme, voici une sortie possible:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[1.9607843137254901, "xuo pqnnoRrKbvXoQUXbvNVHxA"]
[1.9607843137254901, "Yri QsIVwvnPsNouYLugGlZPEg"]
[1.9607843137254901, "MBxSiHlhlnlgeMwtiVIXNa eiC"]
[1.9607843137254901, "JggyWIGUdXwfpcpeRVVUGPzeFx"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
...
</code></pre>

<p>On voit que les individus ayant un pourcentage de 1 virgule quelque chose
ont une seule copie d&#8217;eux-mêmes, alors qu&#8217;un individu avec un pourcentage
de 5 virgule quelque chose a bien placé cinq copies de lui-même.
Comme il n&#8217;est pas possible de mettre 1.96 (ou 5.88) copie(s) j&#8217;ai utilisé
seulement la partie entière. C&#8217;est un vrai problème. Un pourcentage de 1.0
place une copie et un pourcentage de 1.99 place aussi une copie alors que
1.99 est en gros 2 fois meilleur que 1.0 ! Pire, un pourcentage de
0.99 est éliminé, et on a vu avec l&#8217;algorithme <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
que ça n&#8217;était pas une bonne chose. Encore pire, l&#8217;oubli de ces chiffres
après la virgule peut faire crasher notre programme ! Comment ? Si on
augmente la taille de la population, il devient plus que probable que
chaque individus totalise un pourcentage inférieur à 1%. Autrement dit,
le <em>mating pool</em> risque de rester vide… Tant qu&#8217;on gardera une population
de 100 individus ça devrait passer, mais il faudra bien résoudre ce
problème un jour. La prochaine fois on terminera notre algorithme
avec la reproduction.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/"/>
    <updated>2013-09-09T12:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">l&#8217;article précédent</a>
j&#8217;ai donné l&#8217;objectif de ce second algorithme, inspiré par le paradoxe du
singe savant, et on a vu comment construire la population de phrases.
Aujourd&#8217;hui, on se concentre sur la méthode d&#8217;évaluation, tout en
introduisant l&#8217;idée de «normaliser un score».</p>

<!-- more -->


<p>Une fois la population créée, il faut l&#8217;évaluer avant de pouvoir passer à
l&#8217;étape de sélection. Je rappelle que nos chromosomes (que j&#8217;appelle aussi
individus ou encore solutions potentielles) sont mémorisés dans une liste
contenant un score et une phrase (voir
<a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">Les algorithmes génétiques démystifiés 8</a>).</p>

<p>Voici comment j&#8217;évalue la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je donne 1 point pour chaque lettre bien placée. C&#8217;est difficile de
faire plus simple. Je pense que dans un autre article, on expérimentera
une autre manière d&#8217;évaluer les phrases en attribuant aussi des points pour
les lettres mal placées.</p>

<p>Contrairement à l&#8217;algorithme précédent, je vais aller plus loin en
transformant ces scores en pourcentages. Utiliser les pourcentages sera
très utile pour la méthode de sélection que je développerais dans le
prochain article. Pour transformer les scores en pourcentages, on doit
d&#8217;abord les normaliser. Cela signifie qu&#8217;on va transformer chaque score en
un nombre compris entre 0 et 1. Pour normaliser, on calcule la somme de
tous les scores de la population et on divise chaque score par ce total.
Il suffit ensuite de multiplier par 100 pour avoir un pourcentage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, on met tout ça ensemble dans une méthode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici notre programme <code>monkey.rb</code> pour l&#8217;instant:</p>

<figure class='code'><figcaption><span>monkey.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@population_size</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'><span class="n">score_population</span>
</span><span class='line'><span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici ce que ça donne:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[2.083333333333333, "GPjvZUOnEHAwBuVPazOXXYhwaG"]
[0.0, "yQdkKetHFCUpMSMjVFwepXREhT"]
[4.166666666666666, "Fz pHfkVjyRoIhgGglvfWhXhpl"]
[0.0, "fwjafrGAalfDRhpnpAtUoNfVNU"]
[0.0, "zXxPlALVVKxGg sOUdKpSAdKNG"]
[0.0, "myoLBtIbKhfNQPnHUzqHkw Mjz"]
[0.0, "HXDVgzNAKoUhjbVPLLNikGdWqX"]
[0.0, "XQIqLRKNzrxXJUqWRFQpYozNMB"]
[0.0, "xuIIUHEwaAdFcVedVJXkTJjFEv"]
.
.
.
[6.25, " oFkamnafTYpazNMRPY KCEVLZ"]
[2.083333333333333, "JqxvMEowRmEzeRPUwXJdCQQ UB"]
</code></pre>

<p>La prochaine fois, on parlera de la méthode de sélection dite de
«la roue de la fortune», secondée par une piscine d&#8217;accouplement
(oui, c&#8217;est bien le terme, véridique !).</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/20/les-algorithmes-genetiques-demystifies-19/'>Les algorithmes génétiques démystifiés 19</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/'>Les algorithmes génétiques démystifiés 18</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/'>Les algorithmes génétiques démystifiés 17: Orienté Objet</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
