<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-09-11T09:13:20+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 11]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/"/>
    <updated>2013-09-11T09:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La <a href="http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/">dernière fois</a>
on a assuré la sélection à l&#8217;aide d&#8217;une piscine
d&#8217;accouplement (je ne me lasse pas de ce terme…). Aujourd&#8217;hui, on peut
aller au bout de l&#8217;algorithme en ajoutant la reproduction.</p>

<!-- more -->


<h2>La reproduction des phrases</h2>

<p>Il n&#8217;y a rien de nouveau par rapport à <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l&#8217;algorithme précédent</a>,
c&#8217;est peut-être même plus simple. Voici la méthode <code>crossover</code>, qui
permet d&#8217;obtenir un enfant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>crossover</code> prends deux chromosomes en entrée (les parents). On définit
un point de croisement au hasard. On utilise ce point de croisement pour
<em>couper</em> les parents en deux parties. Un enfant est produit en concaténant
la première partie du premier parent avec la seconde partie du second
parent. Enfin on renvoie un chromosome, après avoir passer l&#8217;enfant/phrase
à la mutation. Voici justement la méthode chargée de la mutation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">phrase</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">random_gene</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">phrase</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La différence avec <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l&#8217;algorithme précédent</a> est que cette fois chaque gène
peut muter. Avantage: on est plus proche du phénomène naturel et on pourrait
se retrouver avec un chromosome dont 2 ou 3 gènes sont mutants, ça semble
bon pour la diversité génétique. Inconvénient: Générer un nombre aléatoire
pour chaque gène peut faire tomber les performances si on a un millier de
gènes (ou plus) par chromosome et/ou une population importante. Comme
je dis d&#8217;habitude: «Si c&#8217;est de l&#8217;informatique, c&#8217;est une histoire de
compromis».</p>

<p>On peut maintenant créer une méthode <code>next_generation</code> qui englobe la
sélection et la reproduction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="n">create_mating_pool</span>
</span><span class='line'>  <span class="n">pool_size</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">parent2</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je ne vais pas vous faire l&#8217;affront d&#8217;expliquer cette méthode, vous avez
toutes les cartes en main pour la comprendre. Sinon, c&#8217;est que j&#8217;ai mal
fait mon boulot…</p>

<p>Il reste à mettre tout ça ensemble, voici le code complet du programme:</p>

<figure class='code'><figcaption><span>monkey.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="n">create_mating_pool</span>
</span><span class='line'>  <span class="n">pool_size</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">parent2</span> <span class="o">=</span> <span class="n">mating_pool</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">pool_size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_mating_pool</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">mating_pool</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">mutate</span><span class="p">(</span><span class="n">child</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">phrase</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">random_gene</span> <span class="k">if</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="vi">@mutation_rate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">phrase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">solution_found</span>
</span><span class='line'>  <span class="n">found</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">found</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="vi">@search_value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">found</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@population_size</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@mutation_rate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mo">01</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>  <span class="n">score_population</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Generation: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="k">if</span> <span class="n">solution_found</span>
</span><span class='line'>  <span class="n">next_generation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà le résultat:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
...
Generation: 869
[1.0092854259184496, "Mon royaume pour un chevaB"]
[1.0092854259184496, "Mon royaume pour un chevan"]
[1.0092854259184496, "Mon royaume pour un chevaB"]
...
[1.0496568429551878, "Mon royaume pour un cheval"]
...
[1.0092854259184496, "Mon royaume pour un chevan"]
[1.0092854259184496, "Mon royaume pour un chevaB"]
[0.9689140088817118, "Mon royaume pour un chNvaB"]
</code></pre>

<p>La prochaine fois on va améliorer notre méthode de sélection pour
tenir compte des chiffres après la virgule.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/'>Les algorithmes génétiques démystifiés 8 &ndash; Le paradoxe du singe savant</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/"/>
    <updated>2013-09-10T08:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/">l&#8217;article précédent</a>
on a appris à évaluer la population en normalisant les scores.
Aujourd&#8217;hui on s&#8217;attaque à la méthode de sélection dite de
«la roue de la fortune».</p>

<!-- more -->


<p>Dans l&#8217;algorithme génétique <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
j&#8217;utilisais une méthode de sélection <em>artificielle</em> qu&#8217;on appelle
l&#8217;élitisme : je conservais un certain nombre des meilleurs
individus d&#8217;une génération, en éliminant purement et simplement les
autres. J&#8217;ai commencé par présenter cette méthode, l&#8217;élitisme, car c&#8217;est
la plus simple. On a ainsi pu se concentrer sur d&#8217;autres parties des
algorithmes génétiques. Seulement voilà, on a vu que cette méthode de
sélection posait certains problèmes, notamment l&#8217;appauvrissement du
patrimoine génétique. La méthode de la roue de la fortune va donner une
chance à tout individu porteur d&#8217;un bon gène de le transmettre à la
génération suivante. Mais bien sûr, certains auront plus de chances
que d&#8217;autres…</p>

<h2>La roue de la fortune</h2>

<p>Imaginez une roue de la fortune où chaque case représenterait un individu.
Imaginez que plus l&#8217;individu est adapté, plus sa case sur cette roue est
large. Autrement dit, un meilleur individu à une case qui occupe un
pourcentage plus important de la roue qu&#8217;un moins bon individu. Tiens !
Ça tombe bien, la dernière fois on a justement transformé les scores en
pourcentages.</p>

<p>On va utiliser cette image de la roue de la
fortune pour sélectionner des individus en vue de la reproduction.
Je vais prendre un exemple : supposons une population de 5 individus nommés
A, B, C, D et E. Après évaluation nous pourrions avoir:</p>

<pre><code>A 40%
B 30%
C 20%
D 10%
E  0%
</code></pre>

<p>Pour simuler le principe de la roue de la fortune, nous allons créer une
sélection avec 40 copies de A, 30 copies de B, 20 copies de C et 10 copies
de D. Quand le moment de la reproduction sera venu, on tirera au sort des
couples de parents. De cette manière, les plus adaptés auront plus de
chances de transmettre leurs gènes, mais même les moins adaptés auront aussi
leur chance. L&#8217;endroit où l&#8217;on place les individus sélectionnés (suivant le
langage : une liste, un tableau, etc) est appellé <em>mating pool</em>, qu&#8217;on peut
traduire par piscine d&#8217;accouplement. J&#8217;aurais préféré un terme qui fasse
moins laboratoire, comme «club de rencontre»…</p>

<p>Voyons le code pour créer ce fameux <em>mating pool</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create_mating_pool</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># mating_pool.each {|i| puts i.inspect }</span>
</span><span class='line'>  <span class="n">mating_pool</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne commentée ne sera pas incluse dans le programme final,
mais elle va servir aujourd&#8217;hui pour voir ce qu&#8217;il se passe et
identifier un souci. Voici le code complet du programme, jusqu&#8217;à maintenant:</p>

<figure class='code'><figcaption><span>monkey.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_mating_pool</span>
</span><span class='line'>  <span class="n">mating_pool</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">person</span><span class="o">|</span>
</span><span class='line'>    <span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">mating_pool</span> <span class="o">&lt;&lt;</span> <span class="n">person</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">mating_pool</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">mating_pool</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@population_size</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'><span class="n">score_population</span>
</span><span class='line'><span class="n">create_mating_pool</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si on lance ce programme, voici une sortie possible:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[1.9607843137254901, "xuo pqnnoRrKbvXoQUXbvNVHxA"]
[1.9607843137254901, "Yri QsIVwvnPsNouYLugGlZPEg"]
[1.9607843137254901, "MBxSiHlhlnlgeMwtiVIXNa eiC"]
[1.9607843137254901, "JggyWIGUdXwfpcpeRVVUGPzeFx"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
...
</code></pre>

<p>On voit que les individus ayant un pourcentage de 1 virgule quelque chose
ont une seule copie d&#8217;eux-mêmes, alors qu&#8217;un individu avec un pourcentage
de 5 virgule quelque chose a bien placé cinq copies de lui-même.
Comme il n&#8217;est pas possible de mettre 1.96 (ou 5.88) copie(s) j&#8217;ai utilisé
seulement la partie entière. C&#8217;est un vrai problème. Un pourcentage de 1.0
place une copie et un pourcentage de 1.99 place aussi une copie alors que
1.99 est en gros 2 fois meilleur que 1.0 ! Pire, un pourcentage de
0.99 est éliminé, et on a vu avec l&#8217;algorithme <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
que ça n&#8217;était pas une bonne chose. Encore pire, l&#8217;oubli de ces chiffres
après la virgule peut faire crasher notre programme ! Comment ? Si on
augmente la taille de la population, il devient plus que probable que
chaque individus totalise un pourcentage inférieur à 1%. Autrement dit,
le <em>mating pool</em> risque de rester vide… Tant qu&#8217;on gardera une population
de 100 individus ça devrait passer, mais il faudra bien résoudre ce
problème un jour. La prochaine fois on terminera notre algorithme
avec la reproduction.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/'>Les algorithmes génétiques démystifiés 8 &ndash; Le paradoxe du singe savant</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/"/>
    <updated>2013-09-09T12:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">l&#8217;article précédent</a>
j&#8217;ai donné l&#8217;objectif de ce second algorithme, inspiré par le paradoxe du
singe savant, et on a vu comment construire la population de phrases.
Aujourd&#8217;hui, on se concentre sur la méthode d&#8217;évaluation, tout en
introduisant l&#8217;idée de «normaliser un score».</p>

<!-- more -->


<p>Une fois la population créée, il faut l&#8217;évaluer avant de pouvoir passer à
l&#8217;étape de sélection. Je rappelle que nos chromosomes (que j&#8217;appelle aussi
individus ou encore solutions potentielles) sont mémorisés dans une liste
contenant un score et une phrase (voir
<a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">Les algorithmes génétiques démystifiés 8</a>).</p>

<p>Voici comment j&#8217;évalue la population:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je donne 1 point pour chaque lettre bien placée. C&#8217;est difficile de
faire plus simple. Je pense que dans un autre article, on expérimentera
une autre manière d&#8217;évaluer les phrases en attribuant aussi des points pour
les lettres mal placées.</p>

<p>Contrairement à l&#8217;algorithme précédent, je vais aller plus loin en
transformant ces scores en pourcentages. Utiliser les pourcentages sera
très utile pour la méthode de sélection que je développerais dans le
prochain article. Pour transformer les scores en pourcentages, on doit
d&#8217;abord les normaliser. Cela signifie qu&#8217;on va transformer chaque score en
un nombre compris entre 0 et 1. Pour normaliser, on calcule la somme de
tous les scores de la population et on divise chaque score par ce total.
Il suffit ensuite de multiplier par 100 pour avoir un pourcentage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, on met tout ça ensemble dans une méthode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici notre programme <code>monkey.rb</code> pour l&#8217;instant:</p>

<figure class='code'><figcaption><span>monkey.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="n">evaluate_population</span>
</span><span class='line'>  <span class="n">normalize_population_score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate_population</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">evaluate</span><span class="p">(</span><span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="p">),</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">phrase</span><span class="p">)</span>
</span><span class='line'>  <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">phrase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">character</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="vi">@search_value</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">score</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_population_score</span>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">person</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="n">first</span> <span class="p">}</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">person</span><span class="o">|</span> <span class="o">[</span><span class="n">person</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="p">,</span> <span class="n">person</span><span class="o">.</span><span class="n">last</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@population_size</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'><span class="n">score_population</span>
</span><span class='line'><span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici ce que ça donne:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[2.083333333333333, "GPjvZUOnEHAwBuVPazOXXYhwaG"]
[0.0, "yQdkKetHFCUpMSMjVFwepXREhT"]
[4.166666666666666, "Fz pHfkVjyRoIhgGglvfWhXhpl"]
[0.0, "fwjafrGAalfDRhpnpAtUoNfVNU"]
[0.0, "zXxPlALVVKxGg sOUdKpSAdKNG"]
[0.0, "myoLBtIbKhfNQPnHUzqHkw Mjz"]
[0.0, "HXDVgzNAKoUhjbVPLLNikGdWqX"]
[0.0, "XQIqLRKNzrxXJUqWRFQpYozNMB"]
[0.0, "xuIIUHEwaAdFcVedVJXkTJjFEv"]
.
.
.
[6.25, " oFkamnafTYpazNMRPY KCEVLZ"]
[2.083333333333333, "JqxvMEowRmEzeRPUwXJdCQQ UB"]
</code></pre>

<p>La prochaine fois, on parlera de la méthode de sélection dite de
«la roue de la fortune», secondée par une piscine d&#8217;accouplement
(oui, c&#8217;est bien le terme, véridique !).</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/'>Les algorithmes génétiques démystifiés 8 &ndash; Le paradoxe du singe savant</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 8 - Le paradoxe du singe savant]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/"/>
    <updated>2013-09-08T09:40:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans son livre <a href="http://natureofcode.com/">The nature of code</a>,
Daniel Shiffman consacre un chapitre aux algorithmes génétiques. Je lui
pique l&#8217;idée du prochain algorithme que je vais développer sur ce blog.</p>

<p>Cette fois j&#8217;aimerais vous montrer un algorithme génétique plus traditionnel,
dans l&#8217;esprit de la <em>méthode</em> développée par
<a href="http://en.wikipedia.org/wiki/John_Henry_Holland">John Holland</a>, qu&#8217;on peut
considerer comme le pionnier en la matière.</p>

<!-- more -->


<h2>Objectif</h2>

<p>Le but du jeu est d&#8217;obtenir la phrase suivante : «Mon royaume pour un
cheval». C&#8217;est une variante du
<a href="http://fr.wikipedia.org/wiki/Paradoxe_du_singe_savant">paradoxe du singe savant</a>.
Contrairement à <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l&#8217;algorithme précédent</a>, les chromosomes vont
être représentés par une simple phrase, et non par une chaîne de bits.
Cela va me permettre de me concentrer plus sur l&#8217;explication de la
méthode de sélection. Le programme sera encore écrit en Ruby, dans un
style procédural, pour permettre au plus grand nombre de le comprendre
facilement. La seule différence avec le style de code de
<a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l&#8217;algorithme précédent</a> est que je vais éviter les <em>nombres magiques</em>
pour pouvoir plus simplement personnalisé l&#8217;algorithme.</p>

<p>L&#8217;intérêt d&#8217;un problème aussi simple, et dont on connait déjà la solution,
est d&#8217;apprendre à avoir confiance dans les algorithmes génétiques.
Lorsqu&#8217;on passera plus tard à la résolution d&#8217;un problème inconnu, on n&#8217;aura
pas à se demander «est-ce-que ça fonctionne vraiment ?».</p>

<h2>Créer la population</h2>

<p>Voici le code qui va permettre de créer la population de solutions
potentielles:</p>

<figure class='code'><figcaption><span>monkey.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="vi">@search_value</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="n">length</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="n">random_gene</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">random_gene</span>
</span><span class='line'>  <span class="vi">@genes</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="vi">@genes</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@population_size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="s2">&quot;Mon royaume pour un cheval&quot;</span>
</span><span class='line'><span class="vi">@genes</span> <span class="o">=</span> <span class="s2">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span>
</span><span class='line'><span class="vi">@population_size</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'><span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">.</span><span class="n">inspect</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>make_chromosome</code> crée une phrase de la même taille que celle qu&#8217;on
recherche. Elle se sert de la fonction <code>random_gene</code> pour obtenir les gènes
au hasard. Un gène, ici, est une lettre minuscule ou majuscule, ou un espace.
<code>make_chromosome</code> renvoie une liste avec la phrase et une valeur nulle placée
au début. Cette valeur nulle sera remplacée plus tard par l&#8217;évaluation
de la phrase.</p>

<p>Voilà ce que donne le programme pour l&#8217;instant:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[nil, "OdjBvCjnhCGRukFKwbpnUbSGzR"]
[nil, "uVqkznTRQwbUkrxUklkWgIVfyv"]
[nil, "LIRrECVrjFZPqaoySxosMs hdX"]
[nil, "XghuLIEopQNUjECpnnhtISelLs"]
[nil, "ovkilBZhnFTMEweTDOjsDbcqXX"]
[nil, "tGkEbfscRscqqRfoCxtwPuRqVx"]
[nil, "FHnwlsnoHtHbXTzsJohbyaxjIb"]
[nil, "xNbSYbkULcgfootEBJwfYiZqrC"]
[nil, "RcQfonEVMQnbdZX k glNDphbB"]
.
.
.
[nil, "OZVyLLOkKbzZnYTTLNxGty NWh"]
[nil, "rPyGwpTjvUmblwXCqlYBUBtPmZ"]
[nil, "FSQPGCFqYMWhaEurBOnefJceoZ"]
[nil, "bsMFghPtlFfkYLpKWRohhSAHjY"]
[nil, "FFATOumGCSfviwnzobeZOaIOJx"]
[nil, "svVsIjmbuOBTxhfNCUgBrtoI j"]
[nil, "ZyIqsyTefpdTmqxLzSDDPrMxQf"]
[nil, "nbpmNBYOYcmEGI jbs RxocKzv"]
[nil, "FlsryVrgyaGiciJBUzOfJameCh"]
</code></pre>

<p>Dans le prochain article, on s&#8217;occupera d&#8217;évaluer cette population de
phrase.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le système de fenêtrage de Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/"/>
    <updated>2013-09-07T09:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je vous présente les combinaisons de touches que j&#8217;utilise
au quotidien pour travailler avec les fenêtres dans Vim.</p>

<!-- more -->


<p>Avant d&#8217;entrer dans le vif du sujet, je dois vous prévenir que
pour ouvrir un fichier dans une nouvelle fenêtre (ou dans un nouvel onglet)
j&#8217;utilise le plugin Ctrlp. Il n&#8217;y aura donc pas de commandes relatives
à l&#8217;ouverture d&#8217;un nouveau fichier.</p>

<h2>La base</h2>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
horizontale:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">sp</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>sp</code> est l&#8217;abréviation de <code>split</code>.</p>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
verticale:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">vs</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>vs</code> est l&#8217;abréviation de <code>vsplit</code>.</p>

<h2>Un peu de mappage</h2>

<p>Pour faciliter les manipulations de fenêtres, j&#8217;utilise <code>w</code> comme
un Ctrl+w. Ctrl+w étant le préfixe de nombreuses commandes concernants
les fenêtres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">noremap</span> <span class="k">w</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>
</span><span class='line'><span class="nb">noremap</span> W <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En mode normal, les touches fléchées me servent à changer de fenêtre.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">up</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span><span class="k">up</span><span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>down<span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span>down<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">left</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span><span class="k">left</span><span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">right</span><span class="p">&gt;</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">w</span><span class="p">&gt;&lt;</span><span class="k">right</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bouger et fermer</h2>

<p>Pour changer de fenêtre en cycle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">ww</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour échanger deux fenêtres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>wx
</span></code></pre></td></tr></table></div></figure>


<p>Pour fermer la fenêtre active, deux solutions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">q</span>
</span><span class='line'><span class="c">&quot; ou bien</span>
</span><span class='line'>ZZ
</span></code></pre></td></tr></table></div></figure>


<p>Pour fermer toutes les fenêtres sauf la courante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>wo
</span></code></pre></td></tr></table></div></figure>


<p>Pour basculer la fenêtre active dans un nouvel onglet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>wT
</span></code></pre></td></tr></table></div></figure>


<h2>Dimensions des fenêtres</h2>

<p>Pour un agencement de fenêtres un peu complexe, il est sûrement plus simple et
rapide d&#8217;utiliser la souris. Et oui, il arrive parfois (mais c&#8217;est rare, hein)
que le clavier ne soit pas le périphérique le mieux adapté.</p>

<p>Pour donner une taille identique à toutes les fenêtres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">w</span><span class="p">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour redimensionner les fenêtres, j&#8217;utilise la touche <code>Control</code> combinée
avec les flèches:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">up</span><span class="p">&gt;</span> :<span class="k">resize</span> <span class="p">+</span><span class="m">2</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span>down<span class="p">&gt;</span> :<span class="k">resize</span> <span class="m">-2</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">right</span><span class="p">&gt;</span> :<span class="k">vertical</span> <span class="k">resize</span> <span class="p">+</span><span class="m">2</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>C<span class="p">-</span><span class="k">left</span><span class="p">&gt;</span> :<span class="k">vertical</span> <span class="k">resize</span> <span class="m">-2</span><span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ainsi,
Ctrl + flèche vers le haut va augmenter la hauteur de la fenêtre active.
Ctrl + flèche vers le bas va diminuer la hauteur de la fenêtre active.
Ctrl + flèche vers la droite va augmenter la largeur de la fenêtre active.
Ctrl + flèche vers la gauche va diminuer la largeur de la fenêtre active.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte/'>Bien débuter avec Vim: Recherche de texte</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/'>Bien débuter avec Vim: la touche Escape</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf/'>Bien débuter avec Vim: conseil numéro neuf</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/06/les-algorithmes-genetiques-demystifies-7/"/>
    <updated>2013-09-06T11:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/06/les-algorithmes-genetiques-demystifies-7</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p><a href="http://lkdjiin.github.io/blog/2013/09/05/les-algorithmes-genetiques-demystifies-6/">Hier</a>
on a amélioré l&#8217;algorithme grâce à la mutation. C&#8217;est mieux mais on
peut encore faire mieux. Aujourd&#8217;hui on parle un peu plus en détail de
la sélection et de la diversité génétique.</p>

<!-- more -->


<h2>La sélection</h2>

<p>Voici la méthode de sélection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">selection</span>
</span><span class='line'>  <span class="vi">@selected</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">50</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est clair et limpide : on conserve la meilleure moitié de la population.
Mais ça pose des problèmes. Que faire si un gène important pour notre
solution se trouve dans la moitié supprimée ? On a vu hier qu&#8217;en <em>théorie</em>
la mutation régle le problème. Mais en <em>pratique</em> on a vu aussi qu&#8217;on pouvait
atteindre 10.000 générations sans trouver la solution. Autre problème de
taille : l&#8217;individu classé à la 1ère place va produire quatre enfants,
tout comme l&#8217;invidu classé à la 50ème place. Pourtant il y a un monde entre
les deux. De même, il y a peu de différence entre la 50ème place et la
51ème, et pourtant l&#8217;un se reproduira et pas l&#8217;autre. Tout ceci semble assez
bancal et arbitraire. Dans un prochain article on explorera une méthode de
sélection plus <em>naturelle</em>, pour l&#8217;instant on va essayer d&#8217;augmenter le
nombre d&#8217;individus sélectionnés, juste pour voir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">selection</span>
</span><span class='line'>  <span class="vi">@selected</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">80</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>La diversité génétique</h2>

<p>Voici la méthode utilisée hier pour produire une nouvelle génération:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@selection</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">25</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span> <span class="o">=</span> <span class="vi">@selection</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child1</span><span class="p">,</span> <span class="n">child2</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">+=</span> <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="p">,</span> <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On va la changer ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@selection</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">40</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span> <span class="o">=</span> <span class="vi">@selection</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child1</span><span class="p">,</span> <span class="n">child2</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">+=</span> <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="vi">@population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout d&#8217;abord on tient compte du fait que le nombre d&#8217;individus sélectionnés
a changé : il est maintenant de 80, on va donc former 40 couples. Ensuite,
chaque couple ne va produire que 2 enfants. Enfin, on complète notre
population avec 20 individus créés au hasard. Ce sont eux qui vont apporter
la diversité génétique qui nous faisait défaut.</p>

<p>J&#8217;ai testé plusieurs dizaines de fois, et la solution a toujours été
trouvée avant la 1000ème génération (généralement bien avant).
N&#8217;hésitez pas à faire des tests
en modifiant le nombre d&#8217;invidus sélectionnés, le taux de mutation,
la taille de la population initiale, etc.</p>

<p>La prochaine fois, j&#8217;aimerais trouver un problème (toujours très simple) où
les individus ne seraient pas codés sous forme de bits. Je vais chercher ça.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/05/les-algorithmes-genetiques-demystifies-6/"/>
    <updated>2013-09-05T13:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/05/les-algorithmes-genetiques-demystifies-6</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>La dernière fois on était resté sur un algorithme parfois <em>bloqué</em> par
l&#8217;extremum local. Aujourd&#8217;hui on arrange cela grâce à la mutation génétique.</p>

<!-- more -->


<p>Tout d&#8217;abord un petit mot sur la mutation génétique. Vous voyez peut-être
cela comme de sombres expériences de laboratoire, ou bien vous pensez à
Peter Parker mordu par une araignée radioactive et devenant Spiderman…
En fait, la mutation génétique est un phénomène tout à fait naturel, et
à l&#8217;origine de l&#8217;évolution des espèces. Pour ce qui nous intéresse ici, on
imaginera que, de temps en temps, un gène est <em>mal recopié</em>, ce qui va se
traduire par une inversion d&#8217;un bit dans un chromosome.</p>

<p>Voici la méthode qui est chargée de muter un chromosome:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="n">bit</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">48</span><span class="p">)</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="n">chromosome</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">value</span><span class="o">[</span><span class="n">bit</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>    <span class="n">value</span><span class="o">[</span><span class="n">bit</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">value</span><span class="o">[</span><span class="n">bit</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On sélectionne au hasard un bit parmi les 48 que comporte le chromosome,
puis on l&#8217;inverse. Enfin on retourne le nouveau chromosome. Pour voir ce
code à l&#8217;oeuvre, on peut écrire ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">make_chromosome</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">c</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">mutate</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">c</span><span class="o">.</span><span class="n">inspect</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut voir qu&#8217;un bit a été inversé:</p>

<pre><code>[~/genetic]⇒ ruby test.rb 
[nil, "101000101001011110110000011000010000110011011110"]
[nil, "101000101001011110110000011000010000110010011110"]
</code></pre>

<p>Reste à savoir <em>quand</em> muter ? On considère généralement que le bon taux
de mutation se trouve entre 1/1000 et 1/100000. Ce qui nous donne la
méthode suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">mutation</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">mutate</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">individual</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un individu sur 1000 va recevoir une mutation, ce qui va permettre d&#8217;apporter
du nouveau matériel génétique et, en théorie, d&#8217;éviter de tomber dans un
extremum local. Pour voir ce que ça donne, il faut modifier le code du
dernier article pour appliquer la mutation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>  <span class="n">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Generation: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2"> Best: </span><span class="si">#{</span><span class="n">best</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">best</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Formula: </span><span class="si">#{</span><span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">next_generation</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="n">mutation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous noterez au passage que je suis passé de 50 générations à 10000. Les
algorithmes génétiques n&#8217;ont vraiment de sens que sur un grand nombre de
générations. Voyons le résultat:</p>

<pre><code>[~/genetic]⇒ ruby test.rb 
Generation: 0 Best: 39
Generation: 1 Best: 100
Generation: 2 Best: 34
Generation: 3 Best: 88
Generation: 4 Best: 44
Generation: 5 Best: 19
Generation: 6 Best: 105
Generation: 7 Best: 47
Generation: 8 Best: 13
Generation: 9 Best: 13
Generation: 10 Best: 13
Generation: 11 Best: 2
Generation: 12 Best: 1
Generation: 13 Best: 3
Generation: 14 Best: 33
Generation: 15 Best: 19
Generation: 16 Best: 7
Generation: 17 Best: 9
Generation: 18 Best: 1
...
Generation: 465 Best: 1
Generation: 466 Best: 0
Formula: 88-1%3+900
</code></pre>

<p>Ça fonctionne ! Sauf que parfois…</p>

<p>Parfois on atteint la 10.000ème génération sans avoir la solution. Je l&#8217;ai
déjà dit et je le répète : un algorithme génétique ne peut pas garantir
que l&#8217;on trouvera la meilleure solution. Le problème avec notre algorithme
(dont je donne le code complet à la fin de l&#8217;article) tient sûrement dans
sa méthode de sélection ainsi que dans la manière dont on produit une
nouvelle génération. Il serait intéressant de voir ce qu&#8217;il se passe
en introduisant du sang frais, c&#8217;est à dire quelques individus produits
au hasard. Peut-être le sujet d&#8217;un prochain article ?</p>

<h2>Le code source entier</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="mi">48</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">chromosome_to_gene</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">scan</span> <span class="sr">/.{4}/</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">gene</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0000&quot;</span> <span class="k">then</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0001&quot;</span> <span class="k">then</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0010&quot;</span> <span class="k">then</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0011&quot;</span> <span class="k">then</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0100&quot;</span> <span class="k">then</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0101&quot;</span> <span class="k">then</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0110&quot;</span> <span class="k">then</span> <span class="mi">6</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0111&quot;</span> <span class="k">then</span> <span class="mi">7</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1000&quot;</span> <span class="k">then</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1001&quot;</span> <span class="k">then</span> <span class="mi">9</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1010&quot;</span> <span class="k">then</span> <span class="s2">&quot;+&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1011&quot;</span> <span class="k">then</span> <span class="s2">&quot;-&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1100&quot;</span> <span class="k">then</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1101&quot;</span> <span class="k">then</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">selection</span>
</span><span class='line'>  <span class="vi">@selected</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">50</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">genes</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">gene</span><span class="o">|</span> <span class="n">formula</span> <span class="o">&lt;&lt;</span> <span class="n">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">formula</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@search_value</span> <span class="o">-</span> <span class="nb">eval</span><span class="p">(</span><span class="n">formula</span><span class="p">))</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>    <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">47</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child1</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">child2</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@selection</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">25</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span> <span class="o">=</span> <span class="vi">@selection</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child1</span><span class="p">,</span> <span class="n">child2</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">+=</span> <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="p">,</span> <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mutation</span>
</span><span class='line'>  <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">mutate</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">individual</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="n">bit</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">48</span><span class="p">)</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="n">chromosome</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">value</span><span class="o">[</span><span class="n">bit</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>    <span class="n">value</span><span class="o">[</span><span class="n">bit</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">value</span><span class="o">[</span><span class="n">bit</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="mi">987</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'>
</span><span class='line'><span class="mi">10000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>  <span class="n">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Generation: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2"> Best: </span><span class="si">#{</span><span class="n">best</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">best</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Formula: </span><span class="si">#{</span><span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">next_generation</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="n">mutation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Générer un fichier Changelog avec Git]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/"/>
    <updated>2013-09-04T11:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><em>J&#8217;ai écrit un script pour Git qui permet de produire un fichier</em>
changelog
<em>en html ou en markdown à partir des commits.</em></p>

<!-- more -->


<p>Dans un
<a href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/">article précédent</a>
j&#8217;ai montré comment étendre Git avec un script pour créer ses propres
commandes. Aujourd&#8217;hui je vous présente mon script <code>git-changelog</code>.
Vous pouvez le trouver sur
<a href="https://github.com/lkdjiin/git-changelog">Github</a>.</p>

<p>Il s&#8217;agit d&#8217;un script Ruby qui ajoute une commande <code>changelog</code> à Git.
Il est utile pour automatiser (ou semi-automatiser) la production du
fichier changelog. Il peut produire des fichiers au format HTML ou au
format Markdown.</p>

<p>Pour l&#8217;installer, il faut mettre le fichier <code>git-changelog</code> quelque part
dans votre PATH, après l&#8217;avoir téléchargé.</p>

<h2>Utilisation</h2>

<p>Sortie sur la console:</p>

<pre><code>git changelog
</code></pre>

<p>Sortie dans un fichier:</p>

<pre><code>git changelog &gt; changelog.markdown
</code></pre>

<p>Le script accepte l&#8217;option <code>--since</code>. C&#8217;est la même option qu&#8217;utilise la
commande <code>git log</code>:</p>

<pre><code>git changelog --since=2013-07-01
git changelog --since=10.days
</code></pre>

<p>Sortie au format HTML:</p>

<pre><code>git changelog --html
</code></pre>

<p>Un exemple de combinaison:</p>

<pre><code>git changelog --html --since=2013-05-27 &gt; changelog.html
</code></pre>

<h2>Un exemple</h2>

<p>Voici ce que produit <code>git-changelog</code>:</p>

<pre><code>2013-07-18 Version 0.2.1  
==========================
* 2013-07-18 Fix bug for markdown format  
  Html entities are now escaped.
* 2013-07-18 Fix bug with markdown format  
  Commit body now start on a new line.
* 2013-07-18 Add auto-generated changelog file  

2013-07-18 Version 0.2.0  
==========================
* 2013-07-18 Add html format output  
  A new --html option outputs a &amp;lt;ul&amp;gt;.
* 2013-07-17 First commit  
  The script outputs in markdown and accept the option '--since'.
</code></pre>

<p>Et voilà ce que ça donne (avec le style de ce blog):</p>

<h1>2013-07-18 Version 0.2.1  </h1>

<ul>
<li>2013-07-18 Fix bug for markdown format<br/>
Html entities are now escaped.</li>
<li>2013-07-18 Fix bug with markdown format<br/>
Commit body now start on a new line.</li>
<li>2013-07-18 Add auto-generated changelog file</li>
</ul>


<h1>2013-07-18 Version 0.2.0  </h1>

<ul>
<li>2013-07-18 Add html format output<br/>
A new &mdash;html option outputs a &lt;ul&gt;.</li>
<li>2013-07-17 First commit<br/>
The script outputs in markdown and accept the option &lsquo;&mdash;since&rsquo;.</li>
</ul>


<h2>Rake task</h2>

<p>Voici un exemple de <em>rake task</em> pour une gem Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Generate the changelog&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:changelog</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git changelog &gt; Changelog.markdown&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et un exemple pour un projet Rails:</p>

<figure class='code'><figcaption><span>lib/tasks/changelog.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Generate the changelog in html&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:changelog</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git changelog --html &gt; app/views/pages/_changelog.html&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/'>Comment étendre Git avec ses propres scripts: la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/'>Comment étendre Git avec ses propres scripts</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/'>Bash: ajouter une ligne à la fin de plusieurs fichiers</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/"/>
    <updated>2013-09-03T08:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant qu&#8217;on sait créer une population de solutions, l&#8217;évaluer,
opérer une sélection des meilleures solutions et obtenir une nouvelle
génération par la reproduction, il reste à assembler toutes ces parties
et voir ce qu&#8217;il se passe…</p>

<!-- more -->


<p>Voici le code complet de notre algorithme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="mi">48</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">chromosome_to_gene</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">scan</span> <span class="sr">/.{4}/</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">gene</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0000&quot;</span> <span class="k">then</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0001&quot;</span> <span class="k">then</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0010&quot;</span> <span class="k">then</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0011&quot;</span> <span class="k">then</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0100&quot;</span> <span class="k">then</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0101&quot;</span> <span class="k">then</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0110&quot;</span> <span class="k">then</span> <span class="mi">6</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0111&quot;</span> <span class="k">then</span> <span class="mi">7</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1000&quot;</span> <span class="k">then</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1001&quot;</span> <span class="k">then</span> <span class="mi">9</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1010&quot;</span> <span class="k">then</span> <span class="s2">&quot;+&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1011&quot;</span> <span class="k">then</span> <span class="s2">&quot;-&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1100&quot;</span> <span class="k">then</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1101&quot;</span> <span class="k">then</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">selection</span>
</span><span class='line'>  <span class="vi">@selected</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">50</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">genes</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">gene</span><span class="o">|</span> <span class="n">formula</span> <span class="o">&lt;&lt;</span> <span class="n">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">formula</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@search_value</span> <span class="o">-</span> <span class="nb">eval</span><span class="p">(</span><span class="n">formula</span><span class="p">))</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>    <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">47</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child1</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">child2</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@selection</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">25</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span> <span class="o">=</span> <span class="vi">@selection</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child1</span><span class="p">,</span> <span class="n">child2</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">+=</span> <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="p">,</span> <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ce qui suit est nouveau:</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="mi">987</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'>
</span><span class='line'><span class="mi">50</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>  <span class="n">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Generation: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2"> Best: </span><span class="si">#{</span><span class="n">best</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="k">if</span> <span class="n">best</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">next_generation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seules les dernières lignes de code sont nouvelles. Elles sont assez
simple à comprendre je pense, même si vous ne connaissez pas le
langage Ruby. On commence par définir le nombre qu&#8217;on recherche puis
on crée la population d&#8217;origine au hasard avec <code>@population = make_population</code>.
Ensuite on itère sur 50 générations avec <code>50.times do |generation|</code>. C&#8217;est
notre première condition de sortie : quoiqu&#8217;il se passe, on arrête le
traitement au bout à la 50ème génération. Dans cette boucle on évalue
la génération en cours avec <code>score_population</code> et on la trie. Pour savoir
où on en est visuellement on extrait le meilleur score avec
<code>best = @population.first.first</code> et on affiche cette information à la ligne
suivante. Vient ensuite notre seconde et dernière condition de sortie avec
<code>exit if best == 0</code> ; autrement dit on stoppe le traitement à la première
solution trouvée. Pour finir, on produit la génération suivante avec
<code>next_generation</code>.</p>

<h2>Et ça donne quoi ?</h2>

<p>La plupart du temps ça donne quelque chose comme ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[~/genetic]⇒ ruby test.rb </span>
</span><span class='line'><span class="go">Generation: 0 Best: 507</span>
</span><span class='line'><span class="go">Generation: 1 Best: 138</span>
</span><span class='line'><span class="go">Generation: 2 Best: 485</span>
</span><span class='line'><span class="go">Generation: 3 Best: 347</span>
</span><span class='line'><span class="go">Generation: 4 Best: 65</span>
</span><span class='line'><span class="go">Generation: 5 Best: 208</span>
</span><span class='line'><span class="go">Generation: 6 Best: 222</span>
</span><span class='line'><span class="go">Generation: 7 Best: 15</span>
</span><span class='line'><span class="go">Generation: 8 Best: 15</span>
</span><span class='line'><span class="go">Generation: 9 Best: 2</span>
</span><span class='line'><span class="go">Generation: 10 Best: 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les générations successives convergent lentement vers la solution.
Si vous voulez voir la solution trouvée (c&#8217;est normal d&#8217;être curieux)
vous pouvez remplacez une ligne de code pour afficher la solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># exit if best == 0</span>
</span><span class='line'><span class="k">if</span> <span class="n">best</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Formula: </span><span class="si">#{</span><span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici quelques exemples de solutions:</p>

<pre><code>Formula: 912%429+933
Formula: 670+594-277
Formula: 893+91%96+3
Formula: 923--03--61
</code></pre>

<p>Alors, la plupart du temps, ça se passe bien. Mais parfois un phénomène
étrange se produit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[~/genetic]⇒ ruby test.rb </span>
</span><span class='line'><span class="go">Generation: 0 Best: 597</span>
</span><span class='line'><span class="go">Generation: 1 Best: 621</span>
</span><span class='line'><span class="go">Generation: 2 Best: 104</span>
</span><span class='line'><span class="go">...</span>
</span><span class='line'><span class="go">Generation: 25 Best: 1</span>
</span><span class='line'><span class="go">...</span>
</span><span class='line'><span class="go">Generation: 48 Best: 1</span>
</span><span class='line'><span class="go">Generation: 49 Best: 1</span>
</span><span class='line'><span class="go">[~/genetic]⇒ </span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;algorithme reste <em>bloqué</em> sur une valeur et on atteint la 50ème
génération sans avoir trouver de solution. What the fuck ? Et bien
l&#8217;algorithme a atteint ce qu&#8217;on appelle
<a href="http://fr.wikipedia.org/wiki/Extremum_local">l&#8217;extremum local</a>. Pour faire
court, ça signifie qu&#8217;il ne peut pas faire mieux
avec les gènes dont il disposait à l&#8217;origine. Je developperais cette
idée dans un futur article. En attendant, comment on règle ça ?
En s&#8217;inspirant encore une fois de phénomènes naturels : la mutation
et/ou la diversité génétique.
C&#8217;est le sujet du prochain article.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/"/>
    <updated>2013-09-02T08:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après en avoir terminer avec la création de la population et la sélection,
on passe à la reproduction.</p>

<!-- more -->


<p>Pour imiter ce qu&#8217;il se passe dans la nature, de manière fort simple,
on va définir une fonction <code>crossover</code> (croisé, croisement) qui prend
en entrée deux chromosomes, les parents, et qui produit en sortie une liste
de deux autres chromosomes, les enfants. Le principe est de couper chaque
chromosomes parents en deux parties A et B, puis d&#8217;assembler la partie A
du parent 1 avec la partie B du parent 2 et vice-versa. Voici une illustration
du processus avec des chromosomes de 8 bits (symbolisés par des lettres):</p>

<pre><code>parent1  aaabbbbb
parent2  xxxyyyyy

enfant1  aaayyyyy
enfant2  xxxbbbbb
</code></pre>

<p>Voici donc la fonction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">47</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child1</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">child2</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout d&#8217;abord on défini le point de croisement avec <code>point = rand(1..47)</code>.
Puis on assemble les deux chromosomes enfants et on les renvoient sous
la forme d&#8217;une liste. Ce mode de reproduction est le plus simple, mais
pas forcement le plus efficace (on en reparle un autre jour).</p>

<p>On a maintenant tout ce qu&#8217;il faut pour produire la génération suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@selection</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">25</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span> <span class="o">=</span> <span class="vi">@selection</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child1</span><span class="p">,</span> <span class="n">child2</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">+=</span> <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="p">,</span> <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après avoir sélectionné les 50 meilleures solutions (voir
<a href="http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/">article précédent</a>) je crée une nouvelle population : Avec 50
individus on forme 25 couples qui vont chacun produire 4 enfants et
on retrouve une population de 100 solutions, sensée être globalement
meilleure que la génération précédente.</p>

<p>Même si c&#8217;est peu représentatif des phénomènes naturels, dans un algorithme
génétique les générations successives restent généralement stable en taille.
Ça évite aussi bien la croissance infinie (mémoire des ordinateurs limitée)
que le dépérissement de la population.</p>

<p>La prochaine fois on assemblera le tout pour voir notre algorithme
génétique à l&#8217;oeuvre.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/"/>
    <updated>2013-09-01T21:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir utilisé un AST pour représenter le code source de Naam,
je parcours cet AST pour sortir le code assembleur PIR pour la machine
virtuelle Parrot.</p>

<!-- more -->


<p>Voici la méthode principale (et temporaire):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="n">syntaxer</span> <span class="o">=</span> <span class="no">Syntaxer</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ast</span> <span class="o">=</span> <span class="n">syntaxer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">units</span><span class="o">.</span><span class="n">dup</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">organizer</span> <span class="o">=</span> <span class="no">Organizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ast</span> <span class="o">=</span> <span class="n">organizer</span><span class="o">.</span><span class="n">reorganize</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">emitter</span> <span class="o">=</span> <span class="no">Emitter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pir_code</span> <span class="o">=</span> <span class="n">emitter</span><span class="o">.</span><span class="n">pir_code</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">pir_code</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe Syntaxer se charge de transformer la suite d&#8217;unités lexicales
en un arbre syntaxique abstrait (AST). La classe Organizer va en
quelque sorte réorganiser l&#8217;arbre, par exemple en regroupant les instructions
qui ne sont pas dans une fonction à l&#8217;intérieur d&#8217;une fonction principale
PIR.
Quant à la classe Emitter, elle est chargée de transformer l&#8217;AST en code PIR.</p>

<p>Voici un extrait de cette classe Emitter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Emitter</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@ast</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="vi">@label</span> <span class="o">=</span> <span class="s2">&quot;LABEL0000&quot;</span>
</span><span class='line'>      <span class="vi">@labels</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Get PIR code.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns PIR code as a String.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">pir_code</span>
</span><span class='line'>      <span class="n">compile</span><span class="p">(</span><span class="vi">@ast</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@code</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compile</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">node</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">MainAST</span> <span class="k">then</span> <span class="n">compile_main</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">FunctionHeaderAST</span> <span class="k">then</span> <span class="n">compile_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">IfClauseAST</span> <span class="k">then</span> <span class="n">compile_if_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">ElseClauseAST</span> <span class="k">then</span> <span class="n">compile_else_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">FunctionFooterAST</span> <span class="k">then</span> <span class="n">compile_footer</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="n">compile</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compile_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>      <span class="n">arg</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">+=</span> <span class="s2">&quot;.sub </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">+=</span> <span class="s2">&quot;    .param int </span><span class="si">#{</span><span class="n">arg</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">+=</span> <span class="s2">&quot;    .local int result</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Get the next label.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># value - The String value attached to the label.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Examples</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   next_label</span>
</span><span class='line'>    <span class="c1">#   # =&gt; {name: &quot;LABEL0001&quot;, value: &quot;123&quot;}.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns a Hash.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next_label</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">label</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="vi">@label</span><span class="o">.</span><span class="n">next!</span><span class="o">.</span><span class="n">dup</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="n">value</span><span class="p">}</span>
</span><span class='line'>      <span class="vi">@labels</span> <span class="o">&lt;&lt;</span> <span class="n">label</span>
</span><span class='line'>      <span class="n">label</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois, le compilateur sera fonctionnel.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/'>Un langage sur Parrot &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/'>Un langage sur Parrot &ndash; partie 11: Arbre syntaxique abstrait</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/"/>
    <updated>2013-08-31T11:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le dernier épisode, j&#8217;utilisais un AST pour capturer la grammaire
de Naam, et le code n&#8217;était pas très propre. Cette fois je nettoie un peu
tout ça en mettant les règles de grammaire dans leur propres classes.</p>

<!-- more -->


<p>De ce fait, le syntaxer a beaucoup maigri puisqu&#8217;il se contente
maintenant de lancer la première règle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Public: Here we transform a list of lexical units in an AST.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Syntaxer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@ast</span> <span class="o">=</span> <span class="no">AST</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;ast&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Compile lexical units from a Naam program in an AST.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># units - Array of LexicalUnits</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns the AST.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span> <span class="n">units</span>
</span><span class='line'>      <span class="no">ProgramRule</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">units</span><span class="p">,</span> <span class="vi">@ast</span><span class="p">)</span><span class="o">.</span><span class="n">apply!</span>
</span><span class='line'>      <span class="vi">@ast</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici la règle de base:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">BaseRule</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">units</span><span class="p">,</span> <span class="n">ast_node</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@units</span> <span class="o">=</span> <span class="n">units</span>
</span><span class='line'>      <span class="vi">@ast_node</span> <span class="o">=</span> <span class="n">ast_node</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">apply!</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">unit</span> <span class="o">=</span> <span class="vi">@units</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">&lt;&lt;</span> <span class="n">unit</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">type</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">accept_series</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">accept</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reste à écrire une classe par règle de grammaire. Voici par exemple la
règle pour la <code>else clause</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ElseClauseRule</span> <span class="o">&lt;</span> <span class="no">BaseRule</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">apply!</span>
</span><span class='line'>      <span class="n">accept</span><span class="p">(</span><span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>      <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;else&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>      <span class="n">else_node</span> <span class="o">=</span> <span class="no">ElseClauseAST</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">else_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="no">ReturnValueAST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@series</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>      <span class="vi">@ast_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">else_node</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine étape sera de sortir le code PIR à partir de l&#8217;AST.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/'>Un langage sur Parrot &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/'>Un langage sur Parrot &ndash; partie 11: Arbre syntaxique abstrait</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/"/>
    <updated>2013-08-30T09:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On termine ce qu&#8217;on a commencé
<a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">hier</a>,
à savoir l&#8217;évaluation de la population et on s&#8217;occupe aussi
de la sélection, en vue de la reproduction.</p>

<!-- more -->


<p>Il est temps de noter la population entière:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>    <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>score_population</code> itère sur chaque individu,
calcule son score et modifie
l&#8217;individu pour qu&#8217;il reflète ce score. On peut voir ce que donne
notre code jusqu&#8217;ici en ajoutant ces quelques lignes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="mi">987</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'><span class="n">score_population</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'><span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">individual</span><span class="o">.</span><span class="n">inspect</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous ne connaissez pas trop Ruby, sachez que <code>sort</code> va trier
la population sur le premier élément de chaque individu, soit son score.
Et voici un résultat possible:</p>

<pre><code>[4, "001100111010111110010010100011111010111100110000"]
[198, "101000011111001000010011110100101010011110001000"]
[331, "011011101110010101101101011100000110001110000100"]
[524, "111011100101011010100010011010101110001110000001"]
[666, "001100101110000111011000100001010101011000000001"]
[735, "101000101111100001001110101101100010101000110000"]
[895, "100111110011101101000110110000110101110100101111"]
[932, "001100010100000111000101011111011000010111110100"]
...
[999999999999, "111100001100101011100000001011111110101110001100"]
[999999999999, "111100101001110111110101101101101101000111101010"]
</code></pre>

<p>Vous pouvez vous amuser à décrypter quelques chromosomes à la main si
ça vous amuse (ou bien si vous êtes sceptique).</p>

<p>On en a maintenant fini avec l&#8217;évaluation. Il faut savoir que cette partie est
toujours spécifique à un problème donné. C&#8217;est à dire que pour chaque
problème il faut trouver:</p>

<ul>
<li>comment représenter/crypter un gène, un chromosome</li>
<li>comment les décrypter</li>
<li>comment évaluer une solution</li>
<li>comment classer la population</li>
</ul>


<h2>La sélection</h2>

<p>Maintenant on peut passer à l&#8217;étape de selection. Ça va être très rapide.
Je vais m&#8217;inspirer de la selection artificielle, et non pas naturelle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">selection</span>
</span><span class='line'>  <span class="vi">@selected</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">50</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple, non ? Je conserve les 50 premiers individus. Au passage, <code>shuffle</code> sert
à mélanger au hasard. Demain, nous ferons se reproduire ces 50 solutions qui
sont les meilleures de leur génération.</p>

<p><strong>Attention :</strong> si ce type de sélection a le mérite
d&#8217;être simple, il n&#8217;en est pas moins radical. C&#8217;est de l&#8217;élitisme, voir
limite de l&#8217;eugénisme
(heureusement ce n&#8217;est que de l&#8217;informatique). Il y a un tas
d&#8217;autres façons d&#8217;opérer une sélection, et j&#8217;en parlerais sûrement plus en
détails plus tard. D&#8217;ici là, cette méthode élitiste devrait convenir assez
bien pour notre petit problème (il est possible qu&#8217;elle nous cause
quelques soucis quand même… suspens…).</p>

<h2>Un mot sur le code</h2>

<p>J&#8217;utilise Ruby pour présenter les algorithmes génétiques car je trouve que
c&#8217;est un langage assez facile à comprendre même pour ceux qui ne le
maitrise pas. J&#8217;utilise aussi un style volontairement très simple et
procédural pour que chacun puisse l&#8217;adapter le plus facilement possible
à son propre paradigme/langage. Si vous voulez voir ce que donne le code
de l&#8217;article d&#8217;hier d&#8217;une manière orienté objet,
<a href="https://twitter.com/PagedeGeek">@Sam</a>
(de <a href="http://www.pagedegeek.com/">Page de Geek</a>)
a eu la gentillesse de s&#8217;y coller et a pondu
<a href="https://gist.github.com/PagedeGeek/6378269">ce code</a>
très bien écrit.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/"/>
    <updated>2013-08-29T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans cette seconde partie, on commence à coder…</p>

<p>J&#8217;ai choisi un problème simple: trouver une expression qui vaut 987 en
mélangeant les chiffres de 0 à 9 et les symboles +, &ndash;, / et %, respectivement
pour addition, soustraction, division entière et reste de la division.
L&#8217;expression comportera 12 caractères/symboles maximum. Par exemple:</p>

<ul>
<li>&ldquo;987&rdquo;</li>
<li>&ldquo;900+87&rdquo;</li>
<li>&ldquo;2000/2-13&rdquo;</li>
</ul>


<p>sont différentes solutions possibles au problème posé.</p>

<!-- more -->


<p>Je n&#8217;utilise pas la multiplication pour éviter d&#8217;avoir des nombres trop
grands (<code>**</code> est l&#8217;opérateur de puissance en Ruby, comme dans certains
autres langages).</p>

<p>La première chose à faire est de définir comment on va coder les gènes.
Traditionnellement, ils sont représentés sous la forme d&#8217;une chaîne de bits.
Comme on a 14 symboles (10 chiffres et 4 opérateurs mathématiques) à
coder, 4 bits sont suffisants. Les 2 derniers encodages sont des gènes qui
ne font rien:</p>

<pre><code>0000 0
0001 1
0010 2
0011 3
0100 4
0101 5
0110 6
0111 7
1000 8
1001 9
1010 +
1011 -
1100 /
1101 %
1110 ne rien faire
1111 ne rien faire
</code></pre>

<p>L&#8217;expression recherchée devant faire au maximum 12 caractères de long, nos
chromosomes mesureront 48 bits (12 caractères multiplié par 4 bits).</p>

<p>Le problème est posé,
c&#8217;est parti pour le code. Il est en Ruby mais je vais faire en sorte
qu&#8217;il soit compréhensible par tous et facilement transposable dans
votre langage de prédilection.</p>

<p>On doit pouvoir créer un chromosome au hasard:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="mi">48</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction renvoie une liste avec <code>nil</code>, qui sera plus tard utilisé
pour mémoriser l&#8217;évaluation du chromosome (son score) et une chaîne de
48 caractères au hasard parmi &ldquo;1&rdquo; et &ldquo;0&rdquo;.</p>

<p>On peut maintenant fabriquer une population complète:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>make_population</code> renvoie une liste de 100 chromosomes.</p>

<p>On peut voir ce que ça donne avec <code>make_population.each {|x| puts x.inspect}</code>:</p>

<pre><code>[nil, "110111010010111000000001011001111000100010101111"]
[nil, "101100010001001000011000111011000001100010000000"]
...
[nil, "111110110011110111111110110000010100100100000100"]
[nil, "000010101001000010011001101010101110011100010010"]
</code></pre>

<p>Maintenant qu&#8217;on a créé une population de 100 solutions potentielles, il
faut pouvoir évaluer chaque solution. Pour cela, il faut d&#8217;abord être en
mesure de séparer une suite de 48 bits (le chromosome) en 12 parties de
4 bits (les gènes):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">chromosome_to_gene</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">scan</span> <span class="sr">/.{4}/</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>chromosome_to_gene</code> prend en entrée un chromosome (créé avec
<code>make_chromosome</code>) et renvoie une liste des 12 gènes qui le compose.</p>

<p>Pour décrypter l&#8217;expression composée par les 12 gènes, il faut tout
d&#8217;abord décrypter un seul gène:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">gene</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0000&quot;</span> <span class="k">then</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0001&quot;</span> <span class="k">then</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0010&quot;</span> <span class="k">then</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0011&quot;</span> <span class="k">then</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0100&quot;</span> <span class="k">then</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0101&quot;</span> <span class="k">then</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0110&quot;</span> <span class="k">then</span> <span class="mi">6</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0111&quot;</span> <span class="k">then</span> <span class="mi">7</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1000&quot;</span> <span class="k">then</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1001&quot;</span> <span class="k">then</span> <span class="mi">9</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1010&quot;</span> <span class="k">then</span> <span class="s2">&quot;+&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1011&quot;</span> <span class="k">then</span> <span class="s2">&quot;-&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1100&quot;</span> <span class="k">then</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1101&quot;</span> <span class="k">then</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut maintenant decrypter la formule complète (l&#8217;expression):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">genes</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">gene</span><span class="o">|</span> <span class="n">formula</span> <span class="o">&lt;&lt;</span> <span class="n">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">formula</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>genes_to_formula</code> prend en entrée la liste des 12 gènes d&#8217;un chromosome
et renvoie l&#8217;expression sous la forme d&#8217;une chaîne de caractères.</p>

<p>L&#8217;évaluation proprement dite se passe ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@search_value</span> <span class="o">-</span> <span class="nb">eval</span><span class="p">(</span><span class="n">formula</span><span class="p">))</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction mérite quelques d&#8217;explications. L&#8217;expression (<code>formula</code>)
est évaluée avec <code>eval</code>. En ruby, <code>eval</code> evalue une chaîne de caractères
comme si c&#8217;était du code source (comme en Javascript, etc).
On ôte ce résultat de <code>@search_value</code>, qui
contient le nombre qu&#8217;on cherche (notre problème) et on garde la valeur
absolue. Ainsi zéro signifie une solution et plus on s&#8217;éloigne de zéro,
plus on est loin d&#8217;une solution. On pourra donc facilement classer nos
individus. Si <code>eval</code> provoque une exception (à cause d&#8217;une formule/expression
incompréhensible), on place une grande valeur
comme résultat puisqu&#8217;on est très loin de la solution. On peut voir
le nombre 999.999.999.999 comme étant l&#8217;infini. Enfin je regarde si
le résultat de <code>eval</code> est bien un nombre et dans le cas contraire, je
change le résultat pour refleter ce souci. Qu&#8217;est ce que ça peut être
d&#8217;autre qu&#8217;un nombre ? En ruby, une chaîne placée entre <code>/</code> est une
expression régulière. Voilà pour aujourd&#8217;hui.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/28/les-algorithmes-genetiques-demystifies/"/>
    <updated>2013-08-28T09:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/28/les-algorithmes-genetiques-demystifies</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p><strong>démystifié</strong>:</p>

<blockquote><p>Enlever le caractère mystérieux.</p></blockquote>


<p>Un algorithme génétique c&#8217;est quoi ? Comment ça marche ? À quoi ça sert ?
Si vous vous posez une de ces questions, cette
nouvelle série d&#8217;articles peut vous
intéresser.</p>

<!-- more -->


<h2>Une définition simple</h2>

<p>Tout d&#8217;abord, un algorithme génétique est un <em>algorithme</em>. Autrement dit
c&#8217;est une suite d&#8217;instructions, ou encore une recette, pour résoudre un
problème. C&#8217;est peut-être bidon pour certains d&#8217;entre vous, mais ça va mieux
en le disant.</p>

<p>Ensuite, pourquoi génétique ? Et bien parce que pour résoudre un problème,
cette catégorie d&#8217;algorithmes s&#8217;inspire de la biologie, de la génétique,
et notamment du mécanisme de la séléction naturelle et/ou artificielle.</p>

<h2>La démarche</h2>

<p>Pour faire court:</p>

<ol>
<li>On crée une population au hasard. Chaque individu représente une solution
possible au problème posé.</li>
<li>On évalue chaque individu (solution) de la population. En clair, on leur
donne une note.</li>
<li>On selectionne certains individus parmi les plus adaptés.</li>
<li>Les individus (solutions) sélectionnés se reproduisent pour donner
naissance à la nouvelle génération, qui est globalement plus adaptée.</li>
<li>On recommence au point 2 jusqu&#8217;à ce qu&#8217;on trouve la solution du
problème.</li>
</ol>


<h2>Les domaines d&#8217;application</h2>

<p>Tous, ou presque. Trouver le meilleur profil pour une hélice de bateau ou
une aile d&#8217;avion, apprendre à marcher à un robot, adapter le comportement
d&#8217;un personnage dans un jeu vidéo, maximiser l&#8217;exploitation du volume
d&#8217;un hangar, etc. Comme chaque nouvelle génération produit globalement
une meilleure solution, les algorithmes génétiques peuvent être très
intéressants lorsqu&#8217;on veut obtenir une <em>bonne</em> solution rapidement (et
pas forcement la <em>meilleure</em> solution).</p>

<p>Dans mes prochains articles, je parlerais plus en détails de ces
algorithmes et je montrerais notamment comment les coder.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/11/les-algorithmes-genetiques-demystifies-11/'>Les algorithmes génétiques démystifiés 11</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/'>Les algorithmes génétiques démystifiés 10</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/'>Les algorithmes génétiques démystifiés 9</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: Recherche de texte]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte/"/>
    <updated>2013-08-27T10:14:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je montre comment rechercher une chaîne de caractères dans un
fichier avec Vim: les commandes, les options et un petit truc en plus…</p>

<!-- more -->


<h2>Les commandes utiles</h2>

<p>Pour rechercher un texte dans le fichier, on utilise la commande <code>/</code> suivie
du texte à rechercher et de la touche entrée. Ainsi:</p>

<pre><code>/texte
</code></pre>

<p>va chercher toutes les occurences de «texte» dans le fichier.</p>

<p>Pour se déplacer parmi les occurences trouvées, on utilise <code>n</code> et <code>N</code>. <code>n</code>
va à l&#8217;occurence suivante tandis que <code>N</code> va à l&#8217;occurence précédente.</p>

<p>Attention, la commande de recherche <code>/</code> ne tient pas compte des <em>mots</em>.
Je m&#8217;explique: <code>/xxx</code> va trouver les 4 expressions suivantes.</p>

<ol>
<li>xxx</li>
<li>aaaxxx</li>
<li>xxxbbb</li>
<li>aaaxxxbbb</li>
</ol>


<p>Parfois c&#8217;est ce que l&#8217;on veut, parfois non. Pour modifier ce comportement
on utilise <code>\&lt;</code> et <code>\&gt;</code>, respectivement pour signifier le début et la fin
d&#8217;un mot. Ainsi <code>\&lt;xxx\&gt;</code> ne trouvera que l&#8217;expression n° 1. <code>\&lt;xxx</code> trouvera
la n° 1 et la n° 3. Quand à <code>/xxx\&gt;</code>, elle trouvera la n° 1 et la n° 2.</p>

<h2>Les options</h2>

<p>Voici quelques options à utiliser dans votre fichier .vimrc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">incsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>La recherche sera mise en évidence au fur et à mesure de la frappe clavier,
et non pas seulement après la touche entrée. <code>incsearch</code> signifie
<em>incremental search</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">ignorecase</span> <span class="nb">smartcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ces deux options marchent souvent de pair. <code>ignorecase</code> permet d&#8217;ignorer la
différence minuscule/majuscule, ainsi <code>/texte</code> trouvera «texte», «TEXTE» et
«Texte». <code>smartcase</code> repassera en mode différenciation des
minuscules/majuscules si vous saisissez une majuscule, ainsi <code>/Texte</code> trouvera
«Texte» mais pas «TEXTE» ni «texte».</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette option sert à mettre en évidence la recherche, autrement dit à la
surligner.</p>

<h2>Supprimer la mise en évidence du texte après une recherche</h2>

<p>Une fois que vous avez fait ce que vous aviez à faire avec votre recherche,
celle-ci reste surlignée, ce qui devient vite très agaçant (pour rester poli).
Pour effacer le surlignage, on utilise la commande <code>nohlsearch</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">nohlsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>On aura évidemment intérêt à mapper cette commande, par exemple sur
<code>&lt;Leader&gt;h</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">h</span> :<span class="k">nohlsearch</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personnellement, je n&#8217;ai pas de mappage pour cette commande: je ne m&#8217;en
sert tout simplement pas. Pour supprimer la mise en évidence de la
dernière recherche je tape juste <code>/xx</code>. Vous pouvez utiliser <code>/yy</code> ou <code>/ww</code>
ou tout ce qui tombe bien sous vos doigts. Le principe est de rechercher
une chaîne qui n&#8217;existe pas, ce qui a pour effet d&#8217;effacer la dernière
mise en évidence.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/'>Le système de fenêtrage de Vim</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/'>Bien débuter avec Vim: la touche Escape</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf/'>Bien débuter avec Vim: conseil numéro neuf</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 11: Arbre syntaxique abstrait]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/"/>
    <updated>2013-08-26T08:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le dernier épisode, je me suis rendu compte que j&#8217;aurais intéret
à utiliser un arbre syntaxique abstrait pour mon petit langage. En
voici une première implémentation.</p>

<!-- more -->


<p>Un arbre syntaxique abstrait (<em>Abstract Syntax Tree</em> en anglais, ou AST)
est avant tout une manière de structurer des données:</p>

<pre><code>    A
   / \
  B   C
 / \   \
D   E   F
   /
  G
</code></pre>

<p>On part d&#8217;un noeud racine (ici <code>A</code>) et on ajoute des branches qui mènent à
d&#8217;autres noeuds. On peut distinguer les noeuds terminaux (<code>D</code>, <code>F</code> et <code>G</code>) des
noeuds non-terminaux.
Les noeuds terminaux, aussi appelés feuilles, contiennent une valeur. Les noeuds
non-terminaux contiennent d&#8217;autres noeuds.
C&#8217;est une manière pratique de représenter un code source,
l&#8217;AST étant (assez) facilement manipulable. Il est dit abstrait dans le sens
où il ne contient pas chaque éléments du langage source. Par exemple, les
parenthèses, les virgules, ou encore les débuts et fins de blocs sont
souvent absents de l&#8217;AST. Si vous voulez en savoir plus sur les AST:
<a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">http://en.wikipedia.org/wiki/Abstract_syntax_tree</a>.</p>

<p>Le code qui suit est sur <a href="https://github.com/lkdjiin/naam">Github</a>,
à la version 0.0.5.</p>

<p>L&#8217;objectif est de créer l&#8217;AST et de le visualiser ainsi:</p>

<pre><code>program
  function definition
    header
      name ::= sign
      argument ::= n
    if clause
      return value ::= 1
      test
        left value ::= n
        operator value ::= &gt;
        right value ::= 0
    if clause
      return value ::= -1
      test
        left value ::= n
        operator value ::= &lt;
        right value ::= 0
    else clause
      return value ::= 0
  print statement ::= sign(4)
</code></pre>

<p>Voici la classe de base de l&#8217;AST:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::AST</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Node</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="nb">name</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>      <span class="vi">@children</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:children</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_child</span> <span class="n">child</span><span class="p">;</span> <span class="vi">@children</span> <span class="o">&lt;&lt;</span> <span class="n">child</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">leaf?</span><span class="p">;</span> <span class="vi">@children</span><span class="o">.</span><span class="n">empty?</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">indent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">indent</span> <span class="o">+</span> <span class="vi">@name</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; ::= </span><span class="si">#{</span><span class="vi">@value</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">leaf?</span>
</span><span class='line'>      <span class="nb">puts</span>
</span><span class='line'>      <span class="vi">@children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="n">child</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">indent</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elle permet entre autres d&#8217;ajouter un noeud enfant avec <code>add_child</code> et de
déterminer si un noeud est une feuille avec <code>leaf?</code>. La méthode <code>display</code>,
appliquée sur le noeud racine permettra d&#8217;afficher l&#8217;arbre complet.</p>

<p>Un noeud non-terminal ressemblera à ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::AST</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Program</span> <span class="o">&lt;</span> <span class="no">Node</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="s2">&quot;program&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour un noeud terminal (une feuille), on ajoutera simplement une valeur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::AST</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Argument</span> <span class="o">&lt;</span> <span class="no">Node</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="s2">&quot;argument&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comment appliquer tout ça ? Directement dans le <em>syntaxer</em>. En voici
quelques extraits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::Parser</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Syntaxer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>      <span class="vi">@ast</span> <span class="o">=</span> <span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">Program</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">function_def</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">FunctionDef</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@ast</span><span class="o">.</span><span class="n">add_child</span> <span class="n">node</span>
</span><span class='line'>      <span class="n">function_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="n">if_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="k">while</span> <span class="n">if_clause?</span>
</span><span class='line'>      <span class="n">else_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">function_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:paro</span><span class="p">,</span> <span class="ss">:word</span><span class="p">,</span> <span class="ss">:parc</span><span class="p">,</span> <span class="ss">:affect</span><span class="p">,</span> <span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>      <span class="n">f_header</span> <span class="o">=</span> <span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">FunctionHeader</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">f_header</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@series</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>      <span class="n">f_header</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">Arg</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@series</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">f_header</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;AST va me permettre de faire un truc plus propre (même si cette classe
<code>Syntaxer</code> demande toujours un gros <em>refactoring</em>) et de manipuler plus
aisement le code source.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/'>Un langage sur Parrot &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/'>Un langage sur Parrot &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mon générateur d'ombres CSS]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/25/mon-generateur-dombres-css/"/>
    <updated>2013-08-25T20:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/25/mon-generateur-dombres-css</id>
    <content type="html"><![CDATA[<p>Il y a quelques années, j&#8217;ai écrit un générateur d&#8217;ombres portées pour CSS.</p>

<p><img src="http://lkdjiin.github.io/images/css3-drop-shadow-generator.jpg"></p>

<!-- more -->


<p>Le site se trouve ici:
<a href="http://css3-drop-shadows.herokuapp.com/app">css3-drop-shadows</a>
et le code source est sur
<a href="https://github.com/lkdjiin/css3_shadow">Github</a>.
La majorité du code est en CoffeeScript, j&#8217;avais d&#8217;ailleurs écrit ça pour
apprendre ce langage. Les changements sont visualisables en temps réel et
l&#8217;application produit du code CSS et Sass.</p>

<p>J&#8217;espère que ça vous sera utile.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/19/vos-captures-decrans-dans-un-environnement-realiste/'>Vos captures d&#8217;écrans dans un environnement réaliste</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques ressources libres pour Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir/"/>
    <updated>2013-08-24T11:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>J&#8217;ai passé quelques semaines à tester/jouer avec le langage Elixir. Voici
une liste des ressources qui m&#8217;ont été très utiles.</p>

<!-- more -->


<h2>Le site officiel</h2>

<p>Tout commence ici: <a href="http://elixir-lang.org/">http://elixir-lang.org/</a>.
Plus spécifiquement, vous y trouverez une liste de
<a href="http://elixir-lang.org/getting_started/1.html">tutoriels</a>
bien foutus, quoique trop succints à mon goût.</p>

<h2>La documentation</h2>

<p>N&#8217;hésitez jamais à consulter la
<a href="http://elixir-lang.org/docs/stable/">documentation d&#8217;Elixir</a>. Elle est
claire et assez complète pour un jeune projet.</p>

<h2>Études for Elixir</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000001642">Études for Elixir</a>
est un bouquin par O&#8217;Reilly en open-source. Il s&#8217;agit d&#8217;une série d&#8217;exercices
à réaliser, on apprend beaucoup. Si vous êtes coincés, les solutions se
trouvent
<a href="https://github.com/oreillymedia/etudes-for-elixir">ici</a>.</p>

<h2>La mailing list</h2>

<p>Si vous êtes perdus, la <a href="https://groups.google.com/forum/#!forum/elixir-lang-talk">mailing list</a>
d&#8217;Elixir est votre amie. L&#8217;auteur du langage, et d&#8217;autres passionnés/engagés,
vous répondent rapidement et poliment. Les réponses sont toujours pertinentes.
C&#8217;est vraiment une très bonne mailing list.</p>

<h2>Plugin vim</h2>

<p>Si vous utilisez Vim, ce qu&#8217;il vous faut pour la syntaxe, l&#8217;indentation, etc,
se trouve <a href="https://github.com/elixir-lang/vim-elixir">ici</a>.</p>

<p>Si vous utilisez le plugin Vim Snipmate, voici en bonus un fichier de
snippets pour Elixir que j&#8217;ai commencé. Il y en a peu, mais je pense que
c&#8217;est un bon départ, à vous ensuite de créer les votres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>snippet case
</span><span class='line'>  case ${<span class="m">1</span>:var} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>:condition1} <span class="p">-&gt;</span> ${<span class="m">3</span>:action1}
</span><span class='line'>      _ <span class="p">-&gt;</span> ${<span class="m">4</span>:other}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet cond
</span><span class='line'>  cond <span class="k">do</span>
</span><span class='line'>      ${<span class="m">1</span>:condition1} <span class="p">-&gt;</span> ${<span class="m">2</span>:action1}
</span><span class='line'>      true <span class="p">-&gt;</span> ${<span class="m">3</span>:other}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet <span class="k">d</span>
</span><span class='line'>  <span class="nb">def</span> ${<span class="m">1</span>:<span class="k">function</span>} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet dm
</span><span class='line'>  defmodule ${<span class="m">1</span>:ModuleName} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet dp
</span><span class='line'>  defp ${<span class="m">1</span>:<span class="k">function</span>} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet map
</span><span class='line'>  Enum.map<span class="p">(</span>${<span class="m">1</span>:<span class="nb">list</span>}<span class="p">,</span> fn <span class="k">e</span> <span class="p">-&gt;</span> ${<span class="m">2</span>:action} <span class="k">end</span><span class="p">)</span>
</span><span class='line'>snippet puts
</span><span class='line'>  IO.puts ${<span class="m">1</span>}
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion provisoire sur Elixir</h2>

<p>Apprendre les bases d&#8217;Elixir a été plaisant, mais je vais m&#8217;arrêter là,
du moins jusqu&#8217;à la sortie de la version 1.0.
Le gros avantage d&#8217;Elixir est d&#8217;utiliser la totalité de vos processeurs
gratuitement. Il n&#8217;y a rien à faire, rien à dire, rien à configurer. Ça
marche et c&#8217;est tout. J&#8217;ai moins aimé la syntaxe qui te fait croire que
tu es en terrain conquis si tu connais Ruby. Ça n&#8217;est pas le cas, les
deux langages sont vraiment différents. Le couplage avec Erlang ne
m&#8217;a pas convaincu. À un moment ou un autre (du moins quand j&#8217;écris ces
lignes) si on veut écrire quelque chose de conséquent, il faut apprendre
un minimum d&#8217;Erlang. Ça changera peut-être avec le temps.</p>

<p>Quoiqu&#8217;il en soit, la fréquence de nos processeurs n&#8217;augmentant plus, un
langage élégant qui sait <em>réellement</em> utiliser le multi-coeur simplement
et avec efficacité est sans conteste un langage sur lequel il faut
garder un oeil…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut/'>Elixir et les paramètres par défaut</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir/'>Comment lire et écrire un fichier texte avec Elixir</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/'>Pattern matching avec Elixir: une première approche</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash: ajouter une ligne à la fin de plusieurs fichiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/"/>
    <updated>2013-08-23T11:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans l&#8217;article d&#8217;hier, je décrivais mon deuxième plugin pour Octopress.
Pour le mettre en place sur ce blog, je vais devoir ajouter une ligne de
texte à l&#8217;ensemble des articles. Il y en a presque une cinquantaine
maintenant, il est donc hors de question de le faire à la main.
Bash va me faire ça en quelques secondes.</p>

<!-- more -->


<p>J&#8217;ouvre une console dans le dossier où sont placés mes articles, et j&#8217;entre
ce qui suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[~/.../source/_posts]⇒ for file in *.markdown; do</span>
</span><span class='line'><span class="gp">&gt;</span> <span class="nb">echo</span> <span class="s1">&#39;ligne à ajouter&#39;</span> &gt;&gt; <span class="s2">&quot;$file&quot;</span>
</span><span class='line'><span class="gp">&gt;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada ! C&#8217;est fini. Si vous n&#8217;êtes pas familier de Bash, voici une petite
description de ce qui s&#8217;est passé:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>file in *.markdown; <span class="k">do</span>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>for - do - done</code> est une structure d&#8217;itération de Bash, en gros l&#8217;équivalent
d&#8217;une boucle <code>for</code> en C, Java, etc. On l&#8217;utilise généralement pour itérer
sur les arguments de la ligne de commande, ou bien, comme ici, sur les
fichiers du répertoire. Elle peut s&#8217;écrire aussi sur 3 lignes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>x in *
</span><span class='line'><span class="k">do</span>
</span><span class='line'>ma_commande
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et même sur une seule ligne: <code>for x in *; do ma_commande ; done</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;ligne à ajouter&#39;</span> &gt;&gt; <span class="s2">&quot;$file&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La commande <code>echo</code> affiche normalement une chaîne de caractère sur
la console. Ici cette chaîne est redirigée avec <code>&gt;&gt;</code> dans le fichier
représenté par <code>"$file"</code>.</p>

<p><code>&gt;&gt;</code> permet d&#8217;ajouter en fin de fichier. et le <code>$</code> permet d&#8217;extraire le contenu
d&#8217;une variable.</p>

<h2>Pour conclure</h2>

<p>La syntaxe de Bash m&#8217;a toujours défrisé, mais quand il s&#8217;agit de traiter des
fichiers texte, c&#8217;est vraiment un outil puissant. Comme je suis curieux,
j&#8217;aimerais bien savoir ce que <em>toi</em>, lecteur, tu aurais utilisé pour
cette tâche. Bash, Perl, Sed, Awk, Ruby, autre chose ?</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/'>Comment étendre Git avec ses propres scripts: la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/'>Comment étendre Git avec ses propres scripts</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
