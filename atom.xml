<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-19T15:10:49+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vos captures d'écrans dans un environnement réaliste]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/19/vos-captures-decrans-dans-un-environnement-realiste/"/>
    <updated>2013-08-19T14:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/19/vos-captures-decrans-dans-un-environnement-realiste</id>
    <content type="html"><![CDATA[<p>Comme moi vous n&#8217;avez pas l&#8217;âme d&#8217;un graphiste, mais vous avez parfois
besoin de présenter un site ou une application de manière élégante ?
Je suis tombé hier sur un site qui fait ça en 30 secondes:</p>

<p><img src="http://lkdjiin.github.io/images/breezi.png"></p>

<!-- more -->


<p>Le site s&#8217;appelle <em>PlaceIt by Breezi</em> et se trouve à l&#8217;adresse suivante:
<a href="http://placeit.breezi.com/">http://placeit.breezi.com/</a>. Le principe est
ultra simple: Vous choisissez un appareil (téléphone, tablette, portable,
écran) et vous y glissez/déposez votre capture d&#8217;écran. Quelques secondes
plus tard vous pouvez télécharger l&#8217;image. Les différents appareils sont
disponibles dans plusieurs environnements: bureau, extérieur, neutre, etc.</p>

<p>Je sens que cette application va me servir régulièrement et j&#8217;avais envie
de la partager avec vous. Si vous en connaissez d&#8217;autres dans le même genre,
je suis preneur.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 9: la syntaxe]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/"/>
    <updated>2013-08-18T08:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe</id>
    <content type="html"><![CDATA[<p>Après avoir écrit un
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">tokenizer</a>,
avoir produit les <a href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/">unités lexicales</a>
et avoir défini
<a href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/">une grammaire</a>
pour le langage Naam, je passe maintenant à la vérification de la syntaxe.</p>

<!-- more -->


<p>La vérification de la syntaxe se passe dans la classe <code>Compiler</code>. <em>&ndash; C&#8217;est pas
le meilleur choix de nom et ça changera par la suite &ndash;</em>. Basiquement, cette
classe ne fait que suivre la logique de la grammaire.</p>

<figure class='code'><figcaption><span>lib/naam/compiler.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Compiler</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># units - Array of LexicalUnits</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compile</span> <span class="n">units</span>
</span><span class='line'>    <span class="vi">@units</span> <span class="o">=</span> <span class="n">units</span>
</span><span class='line'>    <span class="n">program</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">program</span>
</span><span class='line'>    <span class="k">while</span> <span class="vi">@units</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">case</span> <span class="vi">@units</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:eol</span> <span class="k">then</span> <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">instruction</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instruction</span>
</span><span class='line'>    <span class="k">case</span> <span class="vi">@units</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:keyword</span> <span class="k">then</span> <span class="n">print_statement</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:word</span> <span class="k">then</span> <span class="n">function_def</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">Error</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_statement</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;print&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:paro</span><span class="p">,</span> <span class="ss">:int</span><span class="p">,</span> <span class="ss">:parc</span><span class="p">,</span> <span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">function_def</span>
</span><span class='line'>    <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:paro</span><span class="p">,</span> <span class="ss">:word</span><span class="p">,</span> <span class="ss">:parc</span><span class="p">,</span> <span class="ss">:affect</span><span class="p">,</span> <span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>    <span class="n">if_clause</span> <span class="k">while</span> <span class="n">if_clause?</span>
</span><span class='line'>    <span class="n">else_clause</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">if_clause</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;if&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">test</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">else_clause</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;else&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>    <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:op</span><span class="p">,</span> <span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">unit</span> <span class="o">=</span> <span class="vi">@units</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">type</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept_series</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">accept</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">if_clause?</span>
</span><span class='line'>    <span class="vi">@units</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">type</span> <span class="o">==</span> <span class="ss">:keyword</span> <span class="o">&amp;&amp;</span> <span class="vi">@units</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">value</span> <span class="o">==</span> <span class="s1">&#39;if&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quelques commentaires sur ce code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">instruction</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Error</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plusieurs fois j&#8217;utilise la classe <code>Error</code>, qui n&#8217;existe pas. C&#8217;est parce que
je ne veux pas encore réfléchir à la gestion des erreurs. Les seuls cas qui
m&#8217;intéressent pour l&#8217;instant sont ceux où ça fonctionne.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">unit</span> <span class="o">=</span> <span class="vi">@units</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">type</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est la méthode <code>accept</code>, toute simple, qui effectue la vérification
de la syntaxe en comparant l&#8217;unité lexicale attendue avec celle réellement
disponible. On constate que les unités lexicales (représentées par <code>@units</code>)
sont détruites au fur et à mesure de leur consommation.</p>

<p>La prochaine, il sera enfin temps d&#8217;émettre le code PIR.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 8: la grammaire]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/"/>
    <updated>2013-08-17T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Écrire un langage sans en spécificier la grammaire c&#8217;est un peu comme se
tirer une balle dans le pied. Même quand le langage est aussi simple et
petit que
Naam (voir l&#8217;<a href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/">article originel</a>),
c&#8217;est un gain de temps pour la suite.</p>

<!-- more -->


<p>Pour spécificier la grammaire d&#8217;un langage informatique, on utilise
généralement la
<a href="http://fr.wikipedia.org/wiki/Forme_de_Backus-Naur">BNF</a>,
(Backus Naur Form) ou l&#8217;une de ses extensions. Il n&#8217;est pas rare qu&#8217;un auteur
utilise une version personnalisée de la BNF, et c&#8217;est ce que je vais faire
pour Naam.</p>

<p>Voici les quelques règles de la méta-syntaxe:</p>

<pre><code>{foo}         zero or more foo
foo | bar     foo or bar
foo           a non-terminal foo
'foo'         keyword foo
[foo]         zero or one foo
---           free speech
</code></pre>

<p>Et voici la grammaire de Naam:</p>

<pre><code>program           ::= {instruction | eol}

instruction       ::= function_def | print_statement

print_statement   ::= 'print' word ( int ) eol

function_def      ::= word ( word ) = eol {if_clause} else_clause

if_clause         ::= int 'if' test eol

test              ::= word op int

else_clause       ::= int 'else' eol

op                ::= &lt; | &gt;

eol               ::= --- End of line
int               ::= --- Integer
word              ::= --- Anything else
</code></pre>

<p>Cette grammaire est vraiment toute petite, mais suffisante pour spécifier
le programme suivant, qui est ce que j&#8217;ai choisi pour commencer à écrire
le compilateur Naam:</p>

<pre><code>sign(n)=
1 if n &gt; 0
-1 if n &lt; 0
0 else
</code></pre>

<p>Alors pourquoi écrire une grammaire ? Pourquoi ne pas commencer à coder
directement le compilateur ? Parce qu&#8217;il faut bien avouer qu&#8217;écrire une
telle grammaire n&#8217;a rien d&#8217;amusant. Tout d&#8217;abord une grammaire, même petite,
possède toujours un certain niveau de complexité qu&#8217;il est difficile de
faire tenir entièrement dans sa tête. En l&#8217;écrivant on met à jour certains
problèmes qui sinon resteraient cachés longtemps. Autre intéret d&#8217;écrire la
grammaire: chaque règle va devenir un morceau de code ; écrire la grammaire
c&#8217;est un peu comme avoir déjà écrit une partie du compilateur.
Dans un prochain article je suivrais cette grammaire pour effectuer la
vérification de la syntaxe.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une définition de la programmation fonctionnelle avec Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir/"/>
    <updated>2013-08-16T09:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<h2>Ou ma tentative désespérée de comprendre la non mutabilité</h2>

<p>Cet article est un article égoiste ! Depuis que je joue un peu avec Elixir, je
m&#8217;aperçois que j&#8217;ai des soucis à comprendre <em>vraiment</em> la programmation
fonctionnelle.
J&#8217;ai entre autres, des difficultés à me faire au coté immuable, non-mutable,
de la chose (<em>immutable</em> en anglais). Je tente donc aujourd&#8217;hui de
mettre au clair mes idées sur la question. Ce qui suit peut ressembler
à un dialogue de fou, vous êtes prévenus.</p>

<!-- more -->


<p>Revoici le module Somme, que j&#8217;ai utilisé dans un <a href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/">précédent article</a>.</p>

<figure class='code'><figcaption><span>somme.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais l&#8217;écrire dans un bon vieux langage procédural, et analyser ce qu&#8217;il
s&#8217;y passe.</p>

<figure class='code'><figcaption><span>somme.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">somme</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">somme</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%i</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On compile et on lance:</p>

<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
15
</code></pre>

<p>Ici pas de récursivité mais une simple itération. Une boucle qui change la
variable <code>somme</code> à chaque passage. Je crois qu&#8217;on devrait d&#8217;abord définir
ce qu&#8217;est une variable. Une variable, c&#8217;est un concept. Une variable définit
à la fois un contenant, un contenu et un type, tout cela accessible par un
nom. Notre variable a ici pour nom <code>somme</code>. Son type est <code>int</code>. Son contenu,
ou encore sa valeur est initialement 0 et change à chaque itération. Son
contenant est un emplacement en mémoire, qui lui ne change pas. «<em>Et tu sais ça
comment que ça change pas ?</em>» Bon, puisque j&#8217;ai besoin d&#8217;une preuve,
j&#8217;ajoute un traceur qui affiche l&#8217;emplacement mémoire de <code>somme</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">somme</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">somme</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%i</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
15
</code></pre>

<p>Voilà, on le sait maintenant: la <em>valeur</em> de <code>somme</code> change, mais son
<em>emplacement</em> (son contenant) reste identique.</p>

<p>Si je tente maintenant de mimer ce comportement avec Elixir, je serais tenté
d&#8217;écrire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">somme</span> <span class="o">=</span> <span class="m">0</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">5</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">n</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">somme</span> <span class="o">=</span> <span class="n">somme</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ elixir somme.exs 
/home/xavier/somme.exs:3: variable somme is unused
0
</code></pre>

<p>Comme Elixir est sympa, il tente de me prévenir que quelque chose ne
tourne pas rond. On peut penser à un problème de <em>scope</em>, se dire que le
<code>somme</code> à l&#8217;intérieur de la fonction anonyme n&#8217;est pas le même que le
<code>somme</code> à l&#8217;extérieur de cette fonction. Mais c&#8217;est pas ça. Ou
plus exactement ce n&#8217;est pas <em>seulement</em> ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">somme</span> <span class="o">=</span> <span class="m">100</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">5</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">n</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">somme</span> <span class="o">=</span> <span class="n">somme</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ elixir somme.exs 
105
104
103
102
101
100
</code></pre>

<p>La valeur du <code>somme</code> de l&#8217;intérieur est initialisée à chaque
itération par la valeur du <code>somme</code> de l&#8217;extérieur.
Donc le <code>somme</code> extérieur est connu dans la fonction anonyme.
Ce comportement me
fais m&#8217;arracher les cheveux, je sens que je passe complètement à coté
d&#8217;un truc essentiel. Je sais qu&#8217;on n&#8217;écrirait pas cette fonction de
cette manière, mais je veux comprendre <em>pourquoi</em> ce comportement
quand je fais ça. En fait donner le même nom à ces deux variables est
une illusion.
Pour Elixir le contenu de <code>somme</code> est immuable, il ne peut pas changer.
Il serait donc plus juste d&#8217;écrire ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">somme</span> <span class="o">=</span> <span class="m">0</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">5</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">n</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="n">somme</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui, évidemment, ne mène à rien. Je commence peut-être à comprendre.
Si je reprend le programme du départ:</p>

<figure class='code'><figcaption><span>somme.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit bien que les variables ne changent (ne mutent) jamais. Ce sont à
chaque fois de <em>nouvelle création</em> qui sont passées dans les paramètres.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lors d&#8217;un passage précis dans cette fonction, on se fiche royalement de savoir
quel était l&#8217;état de <code>n</code> et de <code>acc</code> lors des passages précédents. Ce qui
n&#8217;est pas le cas dans l&#8217;exemple en C:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">somme</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>À chaque passage dans la boucle, il faut connaître l&#8217;état de <code>somme</code> dans
l&#8217;itération précédente.</p>

<p>On m&#8217;avait pourtant bien dit que la programmation fonctionnelle s&#8217;occupait
des <em>transformations</em> et pas des <em>états</em>. Mais je ne voyais pas du tout
ce que ça pouvait bien signifier. C&#8217;est maintenant un peu plus clair,
même s&#8217;il me reste encore du chemin à parcourir pour bien saisir tout
ce qu&#8217;implique la programmation fonctionnelle…</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: la touche Escape]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/"/>
    <updated>2013-08-15T10:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Vim a été développé sur des machines dont les claviers avaient une
disposition des touches autres que celle de nos claviers modernes. Comme par
exemple le terminal ADM-3A:</p>

<p><img src="http://lkdjiin.github.io/images/KB_Terminal_ADM3A.png"></p>

<!-- more -->


<p>Le plus frappant c&#8217;est l&#8217;endroit de la touche <em>Escape</em> à l&#8217;époque. On pouvait
y accéder avec une simple extension du petit doigt gauche, sans avoir à
bouger la main. De nos jours, cette touche a été reléguée aux confins de
l&#8217;univers. Sachant que c&#8217;est une touche qu&#8217;on utilise sans cesse, y a de
quoi choper une tendinite. Je vais vous donner 3 trucs pour remédier à ce
problème, choisissez celui qui vous conviendra le mieux.</p>

<h2>Control c</h2>

<p>C&#8217;est le truc le plus simple, rien à configurer. La combinaison <code>&lt;Ctrl-c&gt;</code>
fonctionne naturellement comme une touche <em>Escape</em>. Il y a bien
quelques différences, et vous vous en rendrez compte à l&#8217;occasion, mais
la plupart du temps ça fonctionne. Commencez donc par là avant de vous
attaquer à d&#8217;autres trucs, celui-ci est peut être amplement suffisant.</p>

<h2>Une combinaison personnalisée</h2>

<p>Il semble que <code>jj</code> soit une combinaison de remplacement populaire en
mode insertion:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">inoremap</span> jj <span class="p">&lt;</span>Esc<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;idée c&#8217;est d&#8217;utiliser une combinaison de deux caractères qui n&#8217;existe
pas dans votre langue/langage, et qui bien sûr soit simple et rapide a
taper. J&#8217;ai essayé pendant un moment ce genre de chose, mais je n&#8217;ai
jamais réussi à m&#8217;y faire.</p>

<h2>Échanger caps lock et esc</h2>

<p>Si pour vous la touche <em>caps lock</em> (verrou majuscule) est un mystère, voici
le truc qu&#8217;il vous faut. Mettez donc votre système d&#8217;exploitation à
contribution pour:</p>

<ul>
<li>soit échanger la touche <em>caps lock</em> et <em>esc</em></li>
<li>soit faire de <em>caps lock</em> une touche <em>esc</em> supplémentaire</li>
</ul>


<p>Quelque soit votre OS, vous devriez trouver ça dans un menu du genre
Système > Préférences > Clavier.</p>

<h2>Pour conclure</h2>

<p>Vous trouverez plein d&#8217;autres trucs sur internet, n&#8217;hesitez pas à en
essayer plusieurs avant d&#8217;adopter celui qui vous ressemblera.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un DSL en Ruby facilement avec Docile]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile/"/>
    <updated>2013-08-14T10:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je suis en train de lire «<a href="http://www.wolframscience.com/">A new kind of science</a>» de Stephen Wolfram
et ça me donne envie de me replonger dans les <a href="https://fr.wikipedia.org/wiki/Automate_cellulaire">automates cellulaires</a>.
Le jeu de la vie est sûrement le programme que j&#8217;ai écrit le plus souvent,
mais curieusement jamais en Ruby.</p>

<!-- more -->


<p>J&#8217;ai commencé à écrire un
<a href="https://github.com/lkdjiin/cellula">framework pour automate cellulaire</a>,
qui n&#8217;aboutira peut-être pas faute de temps. Quoiqu&#8217;il en soit, je voudrais
que ce framework soit utilisable par des non-développeurs, d&#8217;où le recours
à un DSL (Domain Specific Language). Et pour développer mon DSL, je n&#8217;ai
pas trouver plus simple que la gem
<a href="https://github.com/ms-ati/docile">docile</a>.</p>

<p>Voici le DSL que je voudrais:</p>

<figure class='code'><figcaption><span>my_automaton.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">automaton</span> <span class="s2">&quot;Test Automaton&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">dimensions</span>       <span class="mi">2</span>
</span><span class='line'>  <span class="n">type</span>             <span class="ss">:elementary</span>
</span><span class='line'>  <span class="n">width</span>            <span class="mi">100</span>
</span><span class='line'>  <span class="n">height</span>           <span class="mi">100</span>
</span><span class='line'>  <span class="n">rule</span>             <span class="ss">:b36s26</span>
</span><span class='line'>  <span class="n">pattern</span>          <span class="ss">:random</span>
</span><span class='line'>  <span class="n">live_probability</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1789</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Docile encourage l&#8217;utilisation du design pattern builder. Alors allons-y
pour une classe builder qui va contenir les valeurs par défaut de notre
futur Automaton:</p>

<figure class='code'><figcaption><span>automaton_builder.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AutomatonBuilder</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@dimensions</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="vi">@type</span> <span class="o">=</span> <span class="ss">:elementary</span>
</span><span class='line'>    <span class="vi">@width</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@rule</span> <span class="o">=</span> <span class="ss">:b3s23</span>
</span><span class='line'>    <span class="vi">@pattern</span> <span class="o">=</span> <span class="ss">:random</span>
</span><span class='line'>    <span class="vi">@live_probability</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dimensions</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="vi">@dimensions</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="nb">self</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">type</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="vi">@type</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="nb">self</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">width</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="vi">@width</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="nb">self</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">height</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="vi">@height</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="nb">self</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rule</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="vi">@rule</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="nb">self</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pattern</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="vi">@pattern</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="nb">self</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">live_probability</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="vi">@live_probability</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span> <span class="nb">self</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build</span>
</span><span class='line'>    <span class="no">Automaton</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@name</span><span class="p">,</span> <span class="vi">@dimensions</span><span class="p">,</span> <span class="vi">@type</span><span class="p">,</span> <span class="vi">@width</span><span class="p">,</span> <span class="vi">@height</span><span class="p">,</span>
</span><span class='line'>                  <span class="vi">@rule</span><span class="p">,</span> <span class="vi">@pattern</span><span class="p">,</span> <span class="vi">@live_probability</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il nous faut maintenant une classe Automaton:</p>

<figure class='code'><figcaption><span>automaton.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Automaton</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">dimensions</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">rule</span><span class="p">,</span>
</span><span class='line'>                <span class="n">pattern</span><span class="p">,</span> <span class="n">live_probability</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@dimensions</span> <span class="o">=</span> <span class="n">dimensions</span>
</span><span class='line'>    <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class='line'>    <span class="vi">@width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>    <span class="vi">@rule</span> <span class="o">=</span> <span class="n">rule</span>
</span><span class='line'>    <span class="vi">@pattern</span> <span class="o">=</span> <span class="n">pattern</span>
</span><span class='line'>    <span class="vi">@live_probability</span> <span class="o">=</span> <span class="n">live_probability</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> running&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et pour finir, on demande à Docile d&#8217;évaluer notre DSL puis on charge le
fichier <code>my_automaton.rb</code>. Il ne reste plus qu&#8217;à lancer la machine:</p>

<figure class='code'><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;docile&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./automaton_builder&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./automaton&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">automaton</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@auto</span> <span class="o">=</span> <span class="no">Docile</span><span class="o">.</span><span class="n">dsl_eval</span><span class="p">(</span><span class="no">AutomatonBuilder</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">load</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@auto</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>La boucle est bouclée. Vous remarquerez que la méthode <code>automaton</code> définie
dans <code>main.rb</code> ci-dessus est celle qui est utilisée dans le DSL
(<code>my_automaton.rb</code>).</p>

<pre><code>$ ruby ./main.rb my_automaton.rb 
Test Automaton running
</code></pre>

<p>Et voilà. C&#8217;est presque trop facile d&#8217;écrire un DSL avec Docile…</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 7: le lexer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/"/>
    <updated>2013-08-13T10:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir vu
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">la tokenisation</a>,
on continue aujourd&#8217;hui l&#8217;analyse
lexicale avec la production des lexèmes.</p>

<!-- more -->


<h2>Qu&#8217;est-ce qu&#8217;un lexème ?</h2>

<p>Si vous avez le temps, lisez <a href="http://fr.wikipedia.org/wiki/Lex%C3%A8me">l&#8217;article de wikipédia</a>.
Sinon voici ma définition pour le domaine qui nous intéresse:</p>

<blockquote><p>Un lexème (unité lexicale) est un token auquel on attache un type<br/>très basique.</p></blockquote>


<p>Par exemple, la phrase «Je mange.» donnerait:</p>

<pre><code>mot:         Je
mot:         mange
ponctuation: .
</code></pre>

<p>On pourrait produire un <em>lexer</em> plus intelligent qui donnerait:</p>

<pre><code>mot:         Je
verbe:       mange
ponctuation: .
</code></pre>

<p>Les langages informatiques étant beaucoup moins complexe que les
langages humains, écrire un <em>lexer</em> est souvent une formalité.</p>

<h2>Objectif</h2>

<p>L&#8217;objectif d&#8217;aujourd&#8217;hui est d&#8217;obtenir quelque chose comme ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[~/devel/ruby/naam]$ bin/naam spec/fixtures/sign.naam </span>
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fca2f8 @type<span class="o">=</span>:word, @value<span class="o">=</span><span class="s2">&quot;sign&quot;</span>&gt;
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fca258 @type<span class="o">=</span>:paro, @value<span class="o">=</span><span class="s2">&quot;(&quot;</span>&gt;
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fca0b4 @type<span class="o">=</span>:word, @value<span class="o">=</span><span class="s2">&quot;n&quot;</span>&gt;
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fc9fec @type<span class="o">=</span>:parc, @value<span class="o">=</span><span class="s2">&quot;)&quot;</span>&gt;
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fc9ee8 @type<span class="o">=</span>:affect, @value<span class="o">=</span><span class="s2">&quot;=&quot;</span>&gt;
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fc9de4 @type<span class="o">=</span>:eol, @value<span class="o">=</span><span class="s2">&quot;\n&quot;</span>&gt;
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fc9b8c @type<span class="o">=</span>:int, @value<span class="o">=</span><span class="s2">&quot;1&quot;</span>&gt;
</span><span class='line'><span class="gp">#</span>&lt;Naam::Parser::LexicalUnit:0x8fc99d4 @type<span class="o">=</span>:keyword, @value<span class="o">=</span><span class="s2">&quot;if&quot;</span>&gt;
</span><span class='line'><span class="go">...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Le code</h2>

<p>Le code source du projet est sur Github, à la
<a href="https://github.com/lkdjiin/naam/tree/v0.0.2">version 0.0.2</a>.</p>

<p>Bien souvent l&#8217;étape de tokenisation et de lexification peuvent être
regroupées en une seule et même étape. Là, j&#8217;ai choisi de les séparer pour
avoir un code plus simple à montrer. Tout d&#8217;abord, voici la classe
<code>lexical_unit</code>:</p>

<figure class='code'><figcaption><span>lib/naam/parser/lexical_unit.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::Parser</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># A container for lexical units.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LexicalUnit</span>
</span><span class='line'>    <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:type</span><span class="p">,</span> <span class="ss">:value</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># type  - Symbol</span>
</span><span class='line'>    <span class="c1"># value - String</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">type</span><span class="p">,</span> <span class="n">value</span>
</span><span class='line'>      <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class='line'>      <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">int</span> <span class="n">value</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:int</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">word</span> <span class="n">value</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">keyword</span> <span class="n">value</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">op</span> <span class="n">value</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:op</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">paro</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:paro</span><span class="p">,</span> <span class="s2">&quot;(&quot;</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">parc</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:parc</span><span class="p">,</span> <span class="s2">&quot;)&quot;</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">eol</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:eol</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">affect</span> <span class="p">;</span> <span class="kp">new</span><span class="p">(</span><span class="ss">:affect</span><span class="p">,</span> <span class="s2">&quot;=&quot;</span><span class="p">)</span> <span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai beau chercher, je ne trouve rien à dire d&#8217;intelligent sur cette classe.
J&#8217;avais prévenu: c&#8217;est très simple. Et ça continue, on passe maintenant au
<em>lexer</em> proprement dit, qui est tout aussi simple:</p>

<figure class='code'><figcaption><span>lib/naam/parser/lexer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::Parser</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Lexer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">from_token</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">paro</span><span class="p">()</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">parc</span><span class="p">()</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">eol</span><span class="p">()</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;=&#39;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">affect</span><span class="p">()</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;&lt;&#39;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">op</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;&gt;&#39;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">op</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;if&#39;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">keyword</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;else&#39;</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">keyword</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">token</span> <span class="o">=~</span> <span class="sr">/[+|-]?\d+/</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">int</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="no">LexicalUnit</span><span class="o">.</span><span class="n">word</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, on a fini l&#8217;analyse lexicale, c&#8217;est à dire la première phase
de l&#8217;écriture d&#8217;un compilateur. La prochaine fois je parlerais de la
grammaire de Naam, ce qui enclenchera la phase d&#8217;analyse syntaxique.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parrot 6: Écrire le tokenizer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/"/>
    <updated>2013-08-12T09:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir défini un semblant de
<a href="http://lkdjiin.github.io/blog/2013/08/11/parrot-5-un-plan-pour-ecrire-un-compilateur/">méthode de travail</a>
on s&#8217;attaque aujourd&#8217;hui à l&#8217;écriture d&#8217;un
<a href="http://en.wikipedia.org/wiki/Tokenization">tokenizer</a>
pour Naam.</p>

<!-- more -->


<h2>Le tokenizer</h2>

<p>Le code du projet est en ligne sur Github à l&#8217;adresse suivante:
<a href="https://github.com/lkdjiin/naam">naam</a>.
N&#8217;hésitez pas à le consulter. Les extraits qui suivront sont tirés de la
version 0.0.1.</p>

<p>La <em>tokenization</em> est le processus de séparation des éléments
basiques d&#8217;un langage.
C&#8217;est la première étape de l&#8217;analyse lexicale.
Par exemple, à partir du programme suivant:</p>

<pre><code>sign(n)=
1  if n &gt; 0
-1 if n &lt; 0
0  else

print sign(4)
</code></pre>

<p>Je veut obtenir la suite de tokens suivante:</p>

<pre><code>sign
(
n
)
=

1
if
n
&gt;
0

-1
if
n
&lt;
0

0
else


print
sign
(
4
)
</code></pre>

<p>Je vais d&#8217;abord introduire la classe <code>Main</code>, qui est certainement
temporaire et aussi (exceptionnellement) la seule à ne pas être
testée. Elle est juste là pour me permettre de visualiser les
résultats.
Le principe est très simple:</p>

<figure class='code'><figcaption><span>lib/naam/main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Main</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="n">source_lines</span> <span class="o">=</span> <span class="no">Reader</span><span class="o">.</span><span class="n">read</span> <span class="n">filename</span>
</span><span class='line'>    <span class="n">source_lines</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>      <span class="n">tkr</span> <span class="o">=</span> <span class="ss">Parser</span><span class="p">:</span><span class="ss">:Tokenizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>      <span class="k">while</span> <span class="n">tkr</span><span class="o">.</span><span class="n">has_more_token?</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">tkr</span><span class="o">.</span><span class="n">next_token</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant, on passe au truc intéressant, le tokenizer
proprement dit:</p>

<figure class='code'><figcaption><span>lib/naam/parser/tokenizer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::Parser</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Internal: Tokenize a string of naam code.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Tokenizer</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Initialize a new Tokenizer object, ready to</span>
</span><span class='line'>    <span class="c1"># tokenize a string of naam code.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># code - A String of naam code.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">code</span>
</span><span class='line'>      <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vi">@token</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="vi">@look_ahead</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="vi">@codeline</span> <span class="o">=</span> <span class="n">code</span>
</span><span class='line'>      <span class="n">forward_look_ahead</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Get the next token from the code.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns The String token.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next_token</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="n">produce_next_token</span>
</span><span class='line'>      <span class="n">skip_white</span>
</span><span class='line'>      <span class="vi">@token</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="n">token</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Tells if a token is available.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns Boolean.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_more_token?</span>
</span><span class='line'>      <span class="vi">@index</span> <span class="o">&lt;=</span> <span class="vi">@codeline</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Look to the next character in the code.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">forward_look_ahead</span>
</span><span class='line'>      <span class="vi">@look_ahead</span> <span class="o">=</span> <span class="vi">@codeline</span><span class="o">[</span><span class="vi">@index</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns the String next available token.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">produce_next_token</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@look_ahead</span> <span class="o">=~</span> <span class="sr">/[0-9]/</span>
</span><span class='line'>        <span class="n">get_integer</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@look_ahead</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span>
</span><span class='line'>        <span class="n">get_paro</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@look_ahead</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>        <span class="n">get_parc</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@look_ahead</span> <span class="o">==</span> <span class="s1">&#39;=&#39;</span>
</span><span class='line'>        <span class="n">get_eq</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="vi">@look_ahead</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">get_eol</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">get_word</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Skip all «white» characters until next non-white one.</span>
</span><span class='line'>    <span class="c1"># Currently only spaces are considered as white.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">skip_white</span>
</span><span class='line'>      <span class="n">forward_look_ahead</span> <span class="k">while</span> <span class="vi">@look_ahead</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns a String of what naam considered an integer.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_integer</span>
</span><span class='line'>      <span class="n">add_look_ahead</span> <span class="k">while</span> <span class="vi">@look_ahead</span> <span class="o">=~</span> <span class="sr">/[0-9]/</span>
</span><span class='line'>      <span class="vi">@token</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns String opened parenthesis.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_paro</span><span class="p">;</span> <span class="n">add_this_char</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns String closed parenthesis.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_parc</span><span class="p">;</span> <span class="n">add_this_char</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns String equal symbol &quot;=&quot;.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_eq</span><span class="p">;</span> <span class="n">add_this_char</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns String end of line &quot;\n&quot;.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_eol</span><span class="p">;</span> <span class="n">add_this_char</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add current character to the current token and return it.</span>
</span><span class='line'>    <span class="c1"># Usefull shorthand for single character&#39;s tokens.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns the String current token.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_this_char</span>
</span><span class='line'>      <span class="n">add_look_ahead</span>
</span><span class='line'>      <span class="vi">@token</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># If it&#39;s not anything else, it&#39;s what naam language call a word.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns String.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_word</span>
</span><span class='line'>      <span class="n">add_look_ahead</span> <span class="k">while</span> <span class="ow">not</span> <span class="vi">@look_ahead</span> <span class="o">=~</span> <span class="sr">/[\(\)=\n ]/</span>
</span><span class='line'>      <span class="vi">@token</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Add current character to current token, then look for the</span>
</span><span class='line'>    <span class="c1"># next char, ready for another cycle.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_look_ahead</span>
</span><span class='line'>      <span class="vi">@token</span> <span class="o">&lt;&lt;</span> <span class="vi">@look_ahead</span>
</span><span class='line'>      <span class="n">forward_look_ahead</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chaque méthode est suffisament documentée pour que vous puissiez
comprendre la logique de la bestiole. La prochaine fois on s&#8217;attaque
au <em>lexer</em>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parrot 5: un plan pour écrire un compilateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/11/parrot-5-un-plan-pour-ecrire-un-compilateur/"/>
    <updated>2013-08-11T10:47:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/11/parrot-5-un-plan-pour-ecrire-un-compilateur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir fini le tour d&#8217;horizon de l&#8217;assembleur PIR dans
<a href="http://lkdjiin.github.io/blog/2013/08/10/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-4/">la quatrième partie</a>
je digresse un peu sur ce qui nous attends dans les prochains épisodes.</p>

<!-- more -->


<h2>Un plan pour écrire un compilateur</h2>

<p>Maintenant qu&#8217;on sait écrire des programmes en PIR suffisament
évolués pour fournir un début de support au magnifique langage Naam,
il est plus que temps d&#8217;écrire le compilateur Naam vers PIR.
Pour ça, il y a plusieurs solutions.</p>

<p>La première est d&#8217;utiliser les outils fournis avec Parrot sous le nom
de PCT: Parrot Compiler Tools. PCT a vraiment l&#8217;air très bien et devrait
faire l&#8217;affaire pour certains. Malheureusement pour moi, les outils PCT
sont écrits en Perl, langage que je ne connais vraiment pas assez. J&#8217;ai
essayé mais y a pas eu moyen. Si vous connaissez bien Perl, je pense que
vous serez très heureux avec les PCT. Sinon, il faut se tourner
vers autre chose.</p>

<p>La seconde solution est plus old-school. On écrit un compilateur en C à l&#8217;aide
de Lex et Yacc,
<a href="http://flex.sourceforge.net/">Flex</a>
et <a href="http://www.gnu.org/software/bison/">Bison</a>, etc. Encore une fois, comme
pour PCT, ce sont de très bons outils. Mais j&#8217;ai déjà donné, ils
sont aussi ennuyeux qu&#8217;ils sont excellents. Pour mémoire,
j&#8217;écris un <em>toy language</em> pour le fun.</p>

<p>Ça me laisse une troisième solution: tout écrire <em>from scratch</em> en Ruby.
Ça c&#8217;est fun.</p>

<p>J&#8217;ai une certaine expérience dans le domaine. J&#8217;ai écrit des assembleurs,
des compilateurs, des interpréteurs. En C, en python, en Java, en Ruby.
Avec ou sans outils tiers. Certains projets ont aboutis et d&#8217;autres ont
échoués mais à chaque fois j&#8217;appris quelque chose. Tout ça pour vous dire
que je sais assez bien dans quoi je m&#8217;embarque. Naam est, et restera, un
langage très simple. Comme je sais où je vais, écrire un compilateur
Naam vers PIR en Ruby ne sera pas trop difficile.
Je n&#8217;écrirais surement pas un code performant. Au contraire, je
m&#8217;attacherais uniquement à produire un code facile à lire.
Il nous faudra un analyseur lexical (un <em>tokenizer</em> et un <em>lexer</em>), un
analyseur syntaxique (pour les fameuses <em>Syntax Error</em>). On aura peut-être
besoin de produire un AST (<em>Abstract Syntax Tree</em>) mais surement pas dès
le début. On aura aussi intêret à écrire la grammaire du langage. Il y
arrivera un moment où il faudra se pencher sur les messages d&#8217;erreurs
du compilateur. Après ça on avisera.</p>

<p>Un compilateur est après tout un programme comme un autre, donc je ne vois
pas de raisons de ne pas l&#8217;écrire par améliorations successives. L&#8217;objectif
initial sera donc simplement de compiler et faire tourner le programme suivant:</p>

<pre><code>sign(n)=
1  if n &gt; 0
-1 if n &lt; 0
0  else

print sign(-123)
</code></pre>

<p>La prochaine fois on commence par le commencement en écrivant le
<a href="http://en.wikipedia.org/wiki/Tokenization">tokenizer</a>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur la machine virtuelle Parrot - partie 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/10/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-4/"/>
    <updated>2013-08-10T11:21:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/10/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir vu un premier
<a href="http://lkdjiin.github.io/blog/2013/08/03/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-3/">programme très simple</a>
en PIR la dernière fois, on s&#8217;attaque aujourd&#8217;hui au calcul de la
factorielle. C&#8217;est pas beaucoup plus compliqué, mais
on va employer les registres de la VM Parrot.</p>

<!-- more -->


<h2>La procédure factorial</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.sub</span> <span class="no">factorial</span>
</span><span class='line'>  <span class="na">.param</span> <span class="no">int</span> <span class="no">n</span>
</span><span class='line'>  <span class="na">.local</span> <span class="no">int</span> <span class="no">result</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">if</span> <span class="no">n</span> <span class="err">==</span> <span class="mi">0</span> <span class="no">goto</span> <span class="no">ONE</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">$I0</span> <span class="err">=</span> <span class="no">n</span> <span class="p">-</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nf">$I1</span> <span class="err">=</span> <span class="no">factorial</span><span class="p">(</span><span class="no">$I0</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">result</span> <span class="err">=</span> <span class="no">n</span> <span class="p">*</span> <span class="no">$I1</span>
</span><span class='line'>  <span class="nf">goto</span> <span class="no">RETURN</span>
</span><span class='line'>
</span><span class='line'><span class="nl">ONE:</span>
</span><span class='line'>  <span class="nf">result</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nl">RETURN:</span>
</span><span class='line'>  <span class="na">.return</span><span class="p">(</span><span class="no">result</span><span class="p">)</span>
</span><span class='line'><span class="na">.end</span>
</span><span class='line'>
</span><span class='line'><span class="na">.sub</span> <span class="no">main</span> <span class="p">:</span><span class="no">main</span>
</span><span class='line'>  <span class="na">.local</span> <span class="no">int</span> <span class="no">out</span>
</span><span class='line'>  <span class="nf">out</span> <span class="err">=</span> <span class="no">factorial</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">say</span> <span class="no">out</span>
</span><span class='line'><span class="na">.end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui est nouveau, c&#8217;est qu&#8217;ici j&#8217;utilise les registres:</p>

<pre><code>$I0 = n - 1
$I1 = factorial($I0)
result = n * $I1
goto RETURN
</code></pre>

<p>En PIR, il n&#8217;est pas possible d&#8217;écrire directement:</p>

<pre><code>factorial(n - 1)
</code></pre>

<p>et encore moins:</p>

<pre><code>result = n * factorial(n - 1)
</code></pre>

<p>J&#8217;utilise donc les registres pour stocker les résultats temporaires.
Ils sont simples à utiliser et leur nombre est illimité.</p>

<p>Il faut noter qu&#8217;il n&#8217;y a pas d&#8217;obligation à utiliser les registres ici.
J&#8217;aurais aussi bien pu écrire le programme ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.sub</span> <span class="no">factorial</span>
</span><span class='line'>    <span class="na">.param</span> <span class="no">int</span> <span class="no">n</span>
</span><span class='line'>    <span class="na">.local</span> <span class="no">int</span> <span class="no">result</span><span class="p">,</span> <span class="no">temp1</span><span class="p">,</span> <span class="no">temp2</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">if</span> <span class="no">n</span> <span class="err">==</span> <span class="mi">0</span> <span class="no">goto</span> <span class="no">ONE</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">temp1</span> <span class="err">=</span> <span class="no">n</span> <span class="p">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nf">temp2</span> <span class="err">=</span> <span class="no">factorial</span><span class="p">(</span><span class="no">temp1</span><span class="p">)</span>
</span><span class='line'>    <span class="nf">result</span> <span class="err">=</span> <span class="no">n</span> <span class="p">*</span> <span class="no">temp2</span>
</span><span class='line'>    <span class="nf">goto</span> <span class="no">RETURN</span>
</span><span class='line'>
</span><span class='line'>    <span class="na">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais je voulais montrer l&#8217;utilisation des registres.</p>

<p>Voilà, même si PIR permet de faire d&#8217;autres choses, je pense que j&#8217;en sais
suffisament sur lui pour commencer à
<a href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/">implémenter Naam</a>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un mois d'articles quotidiens: le bilan]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/09/un-mois-darticles-quotidiens-le-bilan/"/>
    <updated>2013-08-09T09:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/09/un-mois-darticles-quotidiens-le-bilan</id>
    <content type="html"><![CDATA[<p>Ça fait déjà un mois que j&#8217;écris quotidiennement sur ce blog. L&#8217;heure est
au bilan provisoire.</p>

<!-- more -->


<h2>Plus simple qu&#8217;il n&#8217;y parait</h2>

<p>Je sais que ça ne fait qu&#8217;un mois et qu&#8217;il y en reste encore onze, mais
c&#8217;est vraiment plus facile que ce à quoi je m&#8217;attendais. Écrire pour ce
blog est devenue une routine de travail comme une autre.
J&#8217;appréhendais surtout de manquer d&#8217;idées mais il se trouve qu&#8217;un sujet en
entraine un autre qui en entraine un autre qui…</p>

<h2>Enrichissant</h2>

<p>Devoir écrire tous les jours m&#8217;a permis de faire certaines découvertes. Des
sujets comme le langage Elixir ou l&#8217;écriture de plugins Octopress était très
loin sur ma <em>todo list</em> personnelle. Sans ce blog, je n&#8217;aurais sûrement jamais
pris le temps de m&#8217;y mettre.<br/>
Grâce aux commentaires j&#8217;ai eu des échanges de qualité qui m&#8217;ont
poussés à réfléchir. Je n&#8217;en demandais pas tant.</p>

<h2>Quelques chiffres</h2>

<p>Du 8 juillet inclus au 7 aout inclus vous avez été 1029 à lire ce blog.
Pour les OS je suis surpris: Linux, Windows et Macintosh, dans cet ordre.
En gros 30% chacun. Le reste des OS étant du mobile, en gros 6% Android et
4% iOS. Question navigateur Chrome est largement devant avec 55%, suivi par
Firefox (33%) et Safari (6%). Je note avec surprise que Internet Explorer
est à 0,88%. Je m&#8217;attendais à un petit score, mais pas à ce point.
Il est encore un peu tôt pour faire un top/flop des articles, ce sera
pour une prochaine fois.</p>

<h2>Pour finir</h2>

<p>Je viens de passer un mois fort sympathique, j&#8217;attends les onze autres
avec impatience.
Et enfin, un grand merci aux lecteurs, d&#8217;abord pour le seul fait de lire ce blog,
et ensuite pour les encouragements que j&#8217;ai reçu ici et sur twitter. Merci.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro neuf]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf/"/>
    <updated>2013-08-08T08:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Apprenez à frapper en aveugle</h2>

<p>Ce conseil devrait plutôt s&#8217;appeler:</p>

<blockquote><p>Avant d&#8217;apprendre Vim, apprenez d&#8217;abord à frapper en aveugle.</p></blockquote>


<p>Mais si vous lisez cet article, il est certainement trop tard, vous avez
déjà commencé Vim.</p>

<!-- more -->


<p>Si vous regardez vos doigts pendant que vous tapez, votre tête suit le
mouvement, et passe constamment d&#8217;une sorte de position clavier à une
position écran. D&#8217;où fatigue musculaire, occulaire et perte de temps.</p>

<p>Apprendre à frapper en aveugle est un sacré défi, comme apprendre Vim.
Ça ne s&#8217;acquiert pas en 2 jours. Il faut du temps.</p>

<p>Dans quelques mois, quand vous serez
assez à l&#8217;aise avec vim, installez un logiciel d&#8217;apprentissage de la
dactylographie (il y en a plein de libre) et apprenez à écrire sans regarder
votre clavier. Vous aurez alors accès à toute la puissance de Vim.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir et les paramètres par défaut]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut/"/>
    <updated>2013-08-07T08:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour définir un paramètre par défaut dans une fonction de module, Elixir
fournit l&#8217;opérateur <code>//</code>:</p>

<figure class='code'><figcaption><span>test.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">M</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">foo</span><span class="p">(</span><span class="n">a</span> <span class="o">//</span> <span class="s2">&quot;a&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">M</span><span class="o">.</span><span class="n">foo</span><span class="p">()</span>
</span><span class='line'><span class="no">M</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<pre><code>$ elixir test.exs 
a
z
</code></pre>

<p>Beaucoup d&#8217;autres langages permettent la même chose, en général à l&#8217;aide
de l&#8217;opérateur d&#8217;affection <code>=</code>. Si Elixir utilise <code>//</code> à la place de <code>=</code>,
ça n&#8217;est pas par goût de l&#8217;étrange ou par snobisme. Avec Elixir l&#8217;opérateur
<code>=</code> fait plus que de l&#8217;affectation, <code>=</code> fait aussi du
<a href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/">pattern matching</a>.
Et d&#8217;après ce que j&#8217;ai pu voir, le <em>pattern matching</em> est interdit dans
la définition des paramètres.</p>

<p>On peut bien sûr mixer paramètre <em>normal</em> et paramètre par défaut:</p>

<figure class='code'><figcaption><span>test.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">M</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">foo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">//</span> <span class="s2">&quot;b&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">M</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">M</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;z&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ elixir test.exs 
a b
a z
</code></pre>

<p>Encore une fois c&#8217;est comme avec un tas d&#8217;autres langages. On place les
paramètres par défaut à la fin. Mais Elixir va plus loin en permettant
de placer les paramètres par défaut n&#8217;importe où:</p>

<figure class='code'><figcaption><span>test.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">M</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">foo</span><span class="p">(</span><span class="n">a</span> <span class="o">//</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">M</span><span class="o">.</span><span class="n">foo</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ elixir test.exs 
a z
</code></pre>

<p>C&#8217;est peut-être un classique de la programmation fonctionnelle, mais moi, c&#8217;est
la première fois que je vois ça. Je ne sais pas encore si c&#8217;est utile, mais
au moins c&#8217;est possible. Si vous connaissez d&#8217;autres langages qui permettent
ce truc, laissez moi un commentaire, je suis curieux.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment lire et écrire un fichier texte avec Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir/"/>
    <updated>2013-08-06T08:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Quand j&#8217;aborde un nouveau langage j&#8217;aime bien regarder l&#8217;API pour les
entrées/sorties. Je trouve que ça donne le ton.
Aujourd&#8217;hui on voit comment ouvrir, lire et écrire des fichiers texte.</p>

<!-- more -->


<h2>Lire un fichier</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">{</span><span class="n">result</span><span class="p">,</span> <span class="n">device</span><span class="p">}</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;file.ext&quot;</span><span class="p">,</span> <span class="p">[</span><span class="ss">:read</span><span class="p">,</span> <span class="ss">:utf8</span><span class="p">])</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="ss">:line</span><span class="p">)</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>result</code> contiendra <code>:ok</code> ou <code>:error</code>. On peut tester ce résultat après
coup ou bien se servir du
<a href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/">pattern matching</a> ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">device</span><span class="p">}</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;file.ext&quot;</span><span class="p">,</span> <span class="p">[</span><span class="ss">:read</span><span class="p">,</span> <span class="ss">:utf8</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lorsque la fin du fichier est atteinte, <code>IO.read</code> retourne <code>:eof</code>.
Si on veut lire un certain nombre de caractères au lieu d&#8217;une ligne
complète, on passe le nombre de caractères à lire à la fonction <code>IO.read</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">chars</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On notera qu&#8217;il faut penser à fermer le fichier après utilisation, ce que
je trouve toujours bizarre avec un langage moderne. J&#8217;attends vraiment que
le runtime fasse ça pour moi.</p>

<h2>Écrire un fichier</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">device</span><span class="p">}</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="p">[</span><span class="ss">:write</span><span class="p">,</span> <span class="ss">:utf8</span><span class="p">])</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="s2">&quot;foo\n&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="n">device</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pas grand chose à dire, c&#8217;est clair. La seule différence entre <code>IO.write</code>
et <code>IO.puts</code> est que cette dernière ajoute le caractère de fin de ligne.</p>

<h2>Les entrées/sorties console</h2>

<p>Pour lire sur la console on utilise <code>IO.gets</code>. Le <em>device</em> est <code>:stdio</code>
par défaut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='iex'><span class='line'><span class="go">iex(46)&gt; str = IO.gets(:stdio, &quot;Votre nom: &quot;)</span>
</span><span class='line'><span class="go">Votre nom: xavier</span>
</span><span class='line'><span class="go">&quot;xavier\n&quot;</span>
</span><span class='line'><span class="go">iex(47)&gt; str = IO.gets(&quot;Votre nom: &quot;)        </span>
</span><span class='line'><span class="go">Votre nom: foobar</span>
</span><span class='line'><span class="go">&quot;foobar\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour écrire sur la console on utilise <code>IO.puts</code>, mais ça vous le saviez déjà.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='iex'><span class='line'><span class="go">iex(48)&gt; IO.puts(:stdio, str)        </span>
</span><span class='line'><span class="go">foobar</span>
</span><span class='line'>
</span><span class='line'><span class="go">:ok</span>
</span><span class='line'><span class="go">iex(49)&gt; IO.puts(str)        </span>
</span><span class='line'><span class="go">foobar</span>
</span><span class='line'>
</span><span class='line'><span class="go">:ok</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pour finir</h2>

<p>Voilà, c&#8217;est suffisant pour commencer à bidouiller. Pour aller plus loin,
on pourra lire la documentation des modules IO et File, qui permettent de
faire bien d&#8217;autres choses…</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro huit]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/05/bien-debuter-avec-vim-conseil-numero-huit/"/>
    <updated>2013-08-05T08:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/05/bien-debuter-avec-vim-conseil-numero-huit</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>N&#8217;utilisez pas (encore) de plugins</h2>

<p><em>Ce conseil là, personne ne va le suivre…</em></p>

<p>Très vite, au bout de quelques heures, au mieux quelques jours, vous allez
vouloir installer des plugins. La raison principale est
que vous voudrez vous sentir à l&#8217;aise avec Vim.
Et pour cela vous chercherez a reproduire (voir simuler) le
comportement de votre ex éditeur/EDI.
C&#8217;est normal, c&#8217;est humain, mais à mon avis c&#8217;est une erreur.</p>

<!-- more -->


<p>Un plugin est fait pour pallier un manque dans une application, pour l&#8217;étendre.
Or en tant que débutant, on n&#8217;est pas à même de savoir ce que Vim peut ou ne
peut pas faire pour nous. C&#8217;est pourquoi vous devriez attendre au moins un
mois avant d&#8217;installer votre
premier plugin. Pendant ce temps là, si quelque chose vous manque, cherchez le
dans l&#8217;aide de vim ou avec google. La plupart du temps vous finirez par trouver
une façon de faire <em>à la vim</em>.</p>

<p><span class='pullquote-right' data-pullquote='Vim n&#8217;est pas un éditeur de
code.'>
Un simple exemple pour illustrer mon propos: commenter/décommenter quelques
lignes de code. C&#8217;est quelque chose qu&#8217;un développeur fait plusieurs fois
dans la journée. C&#8217;est une des premières fonctions qu&#8217;on apprend quand on
essaye un nouvel éditeur de code. Et tout apprenti Vimiste est très surpris,
voir même choqué, d&#8217;apprendre que Vim ne sais pas faire ça ! Le truc qu&#8217;il
faut se rentrer dans le crâne, c&#8217;est que Vim n&#8217;est pas un éditeur de
code.
C&#8217;est comme ça, il faut l&#8217;accepter. Vim est un éditeur point. Dès qu&#8217;il
comprend cela, l&#8217;apprenti Vimiste part en quête d&#8217;un plugin pour commenter
du code, le trouve facilement, l&#8217;installe et on en parle plus. En clair on
a rien appris sur Vim. Or en cherchant un peu on pourrait trouver ça pour
commenter un paragraphe (en étant placé n&#8217;importe où sur la 1ère ligne):
</span></p>

<pre><code>^&lt;C-v&gt;}I#&lt;Esc&gt;
</code></pre>

<p>Et ça pour décommenter:</p>

<pre><code>^&lt;C-v&gt;}d&lt;Esc&gt;
</code></pre>

<p>Je vous accorde que ça n&#8217;est pas aussi agréable que d&#8217;utiliser un plugin,
mais ça marche. Et ça peut être utile quand on doit utiliser un Vim de base.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liste des abréviations de langages pour Pygments]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/04/liste-des-abreviations-de-langages-pour-pygments/"/>
    <updated>2013-08-04T09:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/04/liste-des-abreviations-de-langages-pour-pygments</id>
    <content type="html"><![CDATA[<p>La bibliothèque <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a>
est un <em>wrapper</em> Ruby pour
<a href="http://pygments.org/">pygments</a>,
un <em>syntax highlighter</em> écrit en Python. J&#8217;ai cherché une liste des
abréviations supportées par l&#8217;application, sans la trouver. Je suis étonné
qu&#8217;une telle liste n&#8217;existe pas. J&#8217;ai peut-être mal cherché… Quoiqu&#8217;il en
soit voici cette liste, elle sera peut-être utile à quelqu&#8217;un d&#8217;autre:</p>

<!-- more -->


<pre><code>ABAP                      ["abap"]
ANTLR                     ["antlr"]
ANTLR With ActionScript Target ["antlr-as", "antlr-actionscript"]
ANTLR With C# Target      ["antlr-csharp", "antlr-c#"]
ANTLR With CPP Target     ["antlr-cpp"]
ANTLR With Java Target    ["antlr-java"]
ANTLR With ObjectiveC Target ["antlr-objc"]
ANTLR With Perl Target    ["antlr-perl"]
ANTLR With Python Target  ["antlr-python"]
ANTLR With Ruby Target    ["antlr-ruby", "antlr-rb"]
ActionScript              ["as", "actionscript"]
ActionScript 3            ["as3", "actionscript3"]
Ada                       ["ada", "ada95ada2005"]
ApacheConf                ["apacheconf", "aconf", "apache"]
AppleScript               ["applescript"]
AspectJ                   ["aspectj"]
Asymptote                 ["asy", "asymptote"]
Awk                       ["awk", "gawk", "mawk", "nawk"]
BBCode                    ["bbcode"]
BUGS                      ["bugs", "winbugs", "openbugs"]
Base Makefile             ["basemake"]
Bash                      ["bash", "sh", "ksh"]
Bash Session              ["console"]
Batchfile                 ["bat"]
Befunge                   ["befunge"]
BlitzMax                  ["blitzmax", "bmax"]
Boo                       ["boo"]
Brainfuck                 ["brainfuck", "bf"]
Bro                       ["bro"]
C                         ["c"]
C#                        ["csharp", "c#"]
C++                       ["cpp", "c++"]
CFEngine3                 ["cfengine3", "cf3"]
CMake                     ["cmake"]
CSS                       ["css"]
CSS+Django/Jinja          ["css+django", "css+jinja"]
CSS+Genshi Text           ["css+genshitext", "css+genshi"]
CSS+Lasso                 ["css+lasso"]
CSS+Mako                  ["css+mako"]
CSS+Myghty                ["css+myghty"]
CSS+PHP                   ["css+php"]
CSS+Ruby                  ["css+erb", "css+ruby"]
CSS+Smarty                ["css+smarty"]
CUDA                      ["cuda", "cu"]
Ceylon                    ["ceylon"]
Cheetah                   ["cheetah", "spitfire"]
Clojure                   ["clojure", "clj"]
CoffeeScript              ["coffee-script", "coffeescript"]
Coldfusion HTML           ["cfm"]
Common Lisp               ["common-lisp", "cl"]
Coq                       ["coq"]
Croc                      ["croc"]
Cython                    ["cython", "pyx"]
D                         ["d"]
DTD                       ["dtd"]
Darcs Patch               ["dpatch"]
Dart                      ["dart"]
Debian Control file       ["control"]
Debian Sourcelist         ["sourceslist", "sources.list"]
Delphi                    ["delphi", "pas", "pascal", "objectpascal"]
Diff                      ["diff", "udiff"]
Django/Jinja              ["django", "jinja"]
Duel                      ["duel", "Duel Engine", "Duel View", "JBST", "jbst", "JsonML+BST"]
Dylan                     ["dylan"]
ECL                       ["ecl"]
ERB                       ["erb"]
Elixir                    ["elixir", "ex", "exs"]
Elixir iex session        ["iex"]
Embedded Ragel            ["ragel-em"]
Erlang                    ["erlang"]
Erlang erl session        ["erl"]
Evoque                    ["evoque"]
FSharp                    ["fsharp"]
Factor                    ["factor"]
Fancy                     ["fancy", "fy"]
Fantom                    ["fan"]
Felix                     ["felix", "flx"]
Fortran                   ["fortran"]
GAS                       ["gas"]
GLSL                      ["glsl"]
Genshi                    ["genshi", "kid", "xml+genshi", "xml+kid"]
Genshi Text               ["genshitext"]
Gettext Catalog           ["pot", "po"]
Gherkin                   ["Cucumber", "cucumber", "Gherkin", "gherkin"]
Gnuplot                   ["gnuplot"]
Go                        ["go"]
GoodData-CL               ["gooddata-cl"]
Gosu                      ["gosu"]
Gosu Template             ["gst"]
Groff                     ["groff", "nroff", "man"]
Groovy                    ["groovy"]
HTML                      ["html"]
HTML+Cheetah              ["html+cheetah", "html+spitfire"]
HTML+Django/Jinja         ["html+django", "html+jinja"]
HTML+Evoque               ["html+evoque"]
HTML+Genshi               ["html+genshi", "html+kid"]
HTML+Lasso                ["html+lasso"]
HTML+Mako                 ["html+mako"]
HTML+Myghty               ["html+myghty"]
HTML+PHP                  ["html+php"]
HTML+Smarty               ["html+smarty"]
HTML+Velocity             ["html+velocity"]
HTTP                      ["http"]
Haml                      ["haml", "HAML"]
Haskell                   ["haskell", "hs"]
Hybris                    ["hybris", "hy"]
INI                       ["ini", "cfg"]
IRC logs                  ["irc"]
Io                        ["io"]
Ioke                      ["ioke", "ik"]
JAGS                      ["jags"]
JSON                      ["json"]
Jade                      ["jade", "JADE"]
Java                      ["java"]
Java Server Page          ["jsp"]
JavaScript                ["js", "javascript"]
JavaScript+Cheetah        ["js+cheetah", "javascript+cheetah", "js+spitfire", "javascript+spitfire"]
JavaScript+Django/Jinja   ["js+django", "javascript+django", "js+jinja", "javascript+jinja"]
JavaScript+Genshi Text    ["js+genshitext", "js+genshi", "javascript+genshitext", "javascript+genshi"]
JavaScript+Lasso          ["js+lasso", "javascript+lasso"]
JavaScript+Mako           ["js+mako", "javascript+mako"]
JavaScript+Myghty         ["js+myghty", "javascript+myghty"]
JavaScript+PHP            ["js+php", "javascript+php"]
JavaScript+Ruby           ["js+erb", "javascript+erb", "js+ruby", "javascript+ruby"]
JavaScript+Smarty         ["js+smarty", "javascript+smarty"]
Julia                     ["julia", "jl"]
Julia console             ["jlcon"]
Kconfig                   ["kconfig", "menuconfig", "linux-config", "kernel-config"]
Koka                      ["koka"]
Kotlin                    ["kotlin"]
LLVM                      ["llvm"]
Lasso                     ["lasso", "lassoscript"]
Lighttpd configuration file ["lighty", "lighttpd"]
Literate Haskell          ["lhs", "literate-haskell"]
LiveScript                ["live-script", "livescript"]
Logtalk                   ["logtalk"]
Lua                       ["lua"]
MAQL                      ["maql"]
MOOCode                   ["moocode"]
MXML                      ["mxml"]
Makefile                  ["make", "makefile", "mf", "bsdmake"]
Mako                      ["mako"]
Mason                     ["mason"]
Matlab                    ["matlab"]
Matlab session            ["matlabsession"]
MiniD                     ["minid"]
Modelica                  ["modelica"]
Modula-2                  ["modula2", "m2"]
MoinMoin/Trac Wiki markup ["trac-wiki", "moin"]
Monkey                    ["monkey"]
MoonScript                ["moon", "moonscript"]
Mscgen                    ["mscgen", "msc"]
MuPAD                     ["mupad"]
MySQL                     ["mysql"]
Myghty                    ["myghty"]
NASM                      ["nasm"]
Nemerle                   ["nemerle"]
NewLisp                   ["newlisp"]
Newspeak                  ["newspeak"]
Nginx configuration file  ["nginx"]
Nimrod                    ["nimrod", "nim"]
NumPy                     ["numpy"]
OCaml                     ["ocaml"]
Objective-C               ["objective-c", "objectivec", "obj-c", "objc"]
Objective-J               ["objective-j", "objectivej", "obj-j", "objj"]
Octave                    ["octave"]
Ooc                       ["ooc"]
Opa                       ["opa"]
OpenEdge ABL              ["openedge", "abl", "progress"]
PHP                       ["php", "php3", "php4", "php5"]
PL/pgSQL                  ["plpgsql"]
POVRay                    ["pov"]
Perl                      ["perl", "pl"]
PostScript                ["postscript"]
PostgreSQL SQL dialect    ["postgresql", "postgres"]
PostgreSQL console (psql) ["psql", "postgresql-console", "postgres-console"]
PowerShell                ["powershell", "posh", "ps1"]
Prolog                    ["prolog"]
Properties                ["properties"]
Protocol Buffer           ["protobuf"]
PyPy Log                  ["pypylog", "pypy"]
Python                    ["python", "py", "sage"]
Python 3                  ["python3", "py3"]
Python 3.0 Traceback      ["py3tb"]
Python Traceback          ["pytb"]
Python console session    ["pycon"]
RConsole                  ["rconsole", "rout"]
REBOL                     ["rebol"]
RHTML                     ["rhtml", "html+erb", "html+ruby"]
Racket                    ["racket", "rkt"]
Ragel                     ["ragel"]
Ragel in C Host           ["ragel-c"]
Ragel in CPP Host         ["ragel-cpp"]
Ragel in D Host           ["ragel-d"]
Ragel in Java Host        ["ragel-java"]
Ragel in Objective C Host ["ragel-objc"]
Ragel in Ruby Host        ["ragel-ruby", "ragel-rb"]
Raw token data            ["raw"]
Rd                        ["rd"]
Redcode                   ["redcode"]
RobotFramework            ["RobotFramework", "robotframework"]
Ruby                      ["rb", "ruby", "duby"]
Ruby irb session          ["rbcon", "irb"]
Rust                      ["rust"]
S                         ["splus", "s", "r"]
SCSS                      ["scss"]
SQL                       ["sql"]
Sass                      ["sass", "SASS"]
Scala                     ["scala"]
Scalate Server Page       ["ssp"]
Scaml                     ["scaml", "SCAML"]
Scheme                    ["scheme", "scm"]
Scilab                    ["scilab"]
Smali                     ["smali"]
Smalltalk                 ["smalltalk", "squeak"]
Smarty                    ["smarty"]
Snobol                    ["snobol"]
SourcePawn                ["sp"]
SquidConf                 ["squidconf", "squid.conf", "squid"]
Stan                      ["stan"]
Standard ML               ["sml"]
Tcl                       ["tcl"]
Tcsh                      ["tcsh", "csh"]
TeX                       ["tex", "latex"]
Tea                       ["tea"]
Text only                 ["text"]
Treetop                   ["treetop"]
UrbiScript                ["urbiscript"]
VB.net                    ["vb.net", "vbnet"]
VGL                       ["vgl"]
Vala                      ["vala", "vapi"]
Velocity                  ["velocity"]
VimL                      ["vim"]
XML                       ["xml"]
XML+Cheetah               ["xml+cheetah", "xml+spitfire"]
XML+Django/Jinja          ["xml+django", "xml+jinja"]
XML+Evoque                ["xml+evoque"]
XML+Lasso                 ["xml+lasso"]
XML+Mako                  ["xml+mako"]
XML+PHP                   ["xml+php"]
XML+Ruby                  ["xml+erb", "xml+ruby"]
XML+Smarty                ["xml+smarty"]
XML+Velocity              ["xml+velocity"]
XQuery                    ["xquery", "xqy", "xq", "xql", "xqm"]
XSLT                      ["xslt"]
Xtend                     ["xtend"]
YAML                      ["yaml"]
aspx-cs                   ["aspx-cs"]
aspx-vb                   ["aspx-vb"]
autohotkey                ["ahk"]
c-objdump                 ["c-objdump"]
cfstatement               ["cfs"]
cpp-objdump               ["cpp-objdump", "c++-objdumb", "cxx-objdump"]
d-objdump                 ["d-objdump"]
dg                        ["dg"]
eC                        ["ec"]
haXe                      ["hx", "haXe"]
objdump                   ["objdump"]
reStructuredText          ["rst", "rest", "restructuredtext"]
reg                       []
sqlite3con                ["sqlite3"]
systemverilog             ["sv"]
verilog                   ["v"]
vhdl                      ["vhdl"]
</code></pre>

<p>Et pour les curieux, voici comment l&#8217;obtenir:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pygments&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Pygments</span><span class="o">.</span><span class="n">lexers</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;%-25s &quot;</span> <span class="o">%</span> <span class="n">e</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">e</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="ss">:aliases</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur la machine virtuelle Parrot: partie 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/03/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-3/"/>
    <updated>2013-08-03T08:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/03/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir vu
<a href="http://lkdjiin.github.io/blog/2013/08/02/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-2/">l&#8217;installation de Parrot</a>,
il est temps d&#8217;écrire
notre premier programme en PIR. On va réaliser une version simpliste
d&#8217;une fonction qui renvoie le signe d&#8217;un nombre entier. On oublie
momentanément l&#8217;existence du zéro pour n&#8217;avoir que deux cas à traiter:
positif ou négatif.</p>

<pre><code>simple_sign(n) = 1 si n &gt; 0
simple_sign(n) = -1 sinon
</code></pre>

<!-- more -->


<h2>La procédure simple_sign</h2>

<p>Voici un programme PIR qui fait ça:</p>

<figure class='code'><figcaption><span>simple_sign.pir</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.sub</span> <span class="no">simple_sign</span>
</span><span class='line'>  <span class="na">.param</span> <span class="no">int</span> <span class="no">n</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">.local</span> <span class="no">int</span> <span class="no">result</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">if</span> <span class="no">n</span> <span class="err">&gt;</span> <span class="mi">0</span> <span class="no">goto</span> <span class="no">POSITIVE</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">result</span> <span class="err">=</span> <span class="p">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="nf">goto</span> <span class="no">RETURN</span>
</span><span class='line'>
</span><span class='line'><span class="nl">POSITIVE:</span>
</span><span class='line'>  <span class="nf">result</span> <span class="err">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="nl">RETURN:</span>
</span><span class='line'>  <span class="na">.return</span><span class="p">(</span><span class="no">result</span><span class="p">)</span>
</span><span class='line'><span class="na">.end</span>
</span><span class='line'>
</span><span class='line'><span class="na">.sub</span> <span class="no">main</span> <span class="p">:</span><span class="no">main</span>
</span><span class='line'>  <span class="na">.local</span> <span class="no">int</span> <span class="no">f</span>
</span><span class='line'>  <span class="nf">f</span> <span class="err">=</span> <span class="no">simple_sign</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">say</span> <span class="no">f</span>
</span><span class='line'><span class="na">.end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour le lancer:</p>

<pre><code>parrot simple_sign.pir
</code></pre>

<p>Comme c&#8217;est de l&#8217;assembleur, le plus simple est d&#8217;expliquer les lignes de
code une par une.</p>

<pre><code>.sub simple_sign
</code></pre>

<p>C&#8217;est la définition d&#8217;une procédure <code>simple_sign</code>.</p>

<pre><code>.param int n
</code></pre>

<p>On signale à l&#8217;assembleur que notre fonction <code>simple_sign</code> prend un
argument de type <code>int</code> et qu&#8217;on souhaite s&#8217;y réferer
par la suite à l&#8217;aide du nom <code>n</code>. Ça ressemble donc fortement à une
déclaration de variable.</p>

<pre><code>.local int result
</code></pre>

<p>Cette fois on déclare une variable locale nommée. Elle est de type <code>int</code> et
on pourra s&#8217;y réferer avec le nom <code>result</code>.</p>

<pre><code>if n &gt; 0 goto POSITIVE
</code></pre>

<p>Littéralement: Si la valeur de n est supérieur à zéro, sauter à l&#8217;adresse
réferencée par le label POSITIVE. Le saut conditionnel ou non est la seule
instruction de branchement dont on dispose avec PIR. Vous avez surement
appris que «goto c&#8217;est mal !». Oubliez le:</p>

<blockquote><p>En assembleur, goto est normal.</p></blockquote>


<p>Et c&#8217;est souvent la seule façon d&#8217;obtenir le résultat voulu.</p>

<pre><code>result = -1
</code></pre>

<p>Voilà comment affecter une valeur.</p>

<pre><code>goto RETURN
</code></pre>

<p>Voilà un saut inconditionnel vers l&#8217;adresse réferencée par le label
RETURN.</p>

<pre><code>POSITIVE:
  result = 1
</code></pre>

<p><code>POSITIVE:</code> définit une adresse. Chaque fois qu&#8217;on écrit <code>goto POSITIVE</code>, le
programme débranche à cette adresse (en fait à la ligne de code suivante).
Notez qu&#8217;on peut écrire les deux lignes précédentes en une seule :
<code>POSITIVE: result = 1</code>.</p>

<pre><code>RETURN:
  .return(result)
</code></pre>

<p>Définition du label RETURN puis renvoi du résultat avec la directive
<code>.return</code>. Les instructions qui commencent par un <code>.</code> sont des directives.
Ce qui veut dire qu&#8217;elles seront remplacées dans notre dos par plusieurs
instructions de plus bas niveau.</p>

<pre><code>.end
</code></pre>

<p>Fin de notre procédure <code>simple_sign</code>.</p>

<pre><code>.sub main :main
</code></pre>

<p>Nouvelle procédure, nommée <code>main</code>. Le <code>:main</code> dit à Parrot que c&#8217;est cette
procédure qu&#8217;il faut lancer à l&#8217;ouverture du programme. Si on ne le fait
pas, Parrot lance la première procédure qu&#8217;il rencontre.</p>

<pre><code>.local int f
f = simple_sign(4)
say f
.end
</code></pre>

<p>La fin du programme se comprend maintenant facilement.</p>

<p>Voilà, si vous avez déjà travaillé en assembleur, la syntaxe PIR ne
devrait pas vous poser de problèmes particuliers car c&#8217;est un
assembleur de plutôt haut niveau ; par exemple on n&#8217;a pas encore eu
besoin de manipuler directement les registres. Si au contraire c&#8217;est
votre première rencontre avec un assembleur, vous allez devoir apprendre
à décomposer vos actions/pensées. Par exemple vous pourriez être tenté
d&#8217;écrire la procédure <code>main</code> de cette façon:</p>

<pre><code>.sub main :main
  say simple_sign(4)
.end
</code></pre>

<p>Mais ça ne marcheras pas, il faut décomposer…</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur la machine virtuelle Parrot: partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/02/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-2/"/>
    <updated>2013-08-02T09:07:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/02/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p><em>Aujourd&#8217;hui je m&#8217;intéresse à</em>
<a href="http://www.parrot.org/">Parrot</a>.
<em>Après une brève description de cette
machine virtuelle, on l&#8217;installe et on écrit un premier programme.</em></p>

<!-- more -->


<h2>Présentation de Parrot</h2>

<p>La machine virtuelle Parrot offre un nombre illimité de registre,
qui sont de 4 types différents:</p>

<ul>
<li>Integer, pour les nombres entiers</li>
<li>Number, pour les nombres réels</li>
<li>String, pour les chaînes de caractères</li>
<li>PMC, pour, en gros, les objets (Polymorphic container)</li>
</ul>


<p>Les instructions peuvent être entrées sous 4 formes différentes, du plus
haut-niveau vers le plus bas:</p>

<ol>
<li>PIR, <em>Parrot Intermediate Representation</em>, qui ressemble à un assembleur
de haut-niveau.</li>
<li>PASM, <em>Parrot Assembly</em>, qui est un assembleur classique, sans fioritures.</li>
<li>PAST, <em>Parrot Abstract Syntax Tree</em>, qui accepte un
<a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> en entrée.</li>
<li>PBC, <em>Parrot Byte Code</em>, le code machine de Parrot.</li>
</ol>


<p>Est-ce-que j&#8217;ai vraiment besoin de dire que, si possible, je me limiterais
à PIR ?</p>

<p>Enfin, Parrot possède un
<a href="http://fr.wikipedia.org/wiki/Ramasse-miettes_%28informatique%29">Garbage Collector</a>.
On aura pas besoin de s&#8217;acharner
à libérer la mémoire, Parrot le fait pour nous.</p>

<h2>Installation de Parrot</h2>

<p>Avant de pouvoir jouer avec Parrot, il faut l&#8217;installer.
Le point de départ est sur
<a href="http://www.parrot.org/source.html">www.parrot.org/source.html</a>.
Sur ma machine Debian, j&#8217;ai d&#8217;abord installé la version de Parrot qui se
trouve dans les dépots. Le problème c&#8217;est que pas mal d&#8217;outils annexes
demandent à avoir un <em>working repository</em>, ils ne sont pas inclus dans les
paquets. De plus, les sources ont l&#8217;air de contenir pas mal d&#8217;exemples.
J&#8217;ai donc désinstallé le package pour Debian et rapatrié les sources depuis
Github : <a href="https://github.com/parrot/parrot">github.com/parrot/parrot</a>.
L&#8217;installation s&#8217;est déroulée sans soucis particuliers. Comme je trouve la
documentation un peu confuse sur ce point, voilà comment j&#8217;ai fait ; si ça
peut vous éviter de chercher…</p>

<pre><code>perl Configure.pl
make
make test
sudo make install
</code></pre>

<h2>Hello Parrot</h2>

<p>On s&#8217;attaque enfin à l&#8217;écriture du classique <em>hello world</em>:</p>

<figure class='code'><figcaption><span>hello.pir</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">.sub</span> <span class="nv">main</span>
</span><span class='line'>  <span class="nf">say</span> <span class="s">&quot;Hello world&quot;</span>
</span><span class='line'><span class="nf">.end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On le lance ainsi:</p>

<pre><code>parrot hello.pir
</code></pre>

<p>Maintenant que Parrot est installé et fonctionnel, on va pouvoir écrire quelques
petits programmes en PIR.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur la machine virtuelle Parrot: partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/"/>
    <updated>2013-08-01T07:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Cela fait quelques années que j&#8217;ai envie d&#8217;essayer la
<a href="https://fr.wikipedia.org/wiki/Machine_virtuelle">machine virtuelle</a>
<a href="http://www.parrot.org/">Parrot</a> et j&#8217;ai toujours reporté à plus tard.
Jusqu&#8217;à maintenant. Aujourd&#8217;hui, je commence à écrire un
<a href="http://en.wikipedia.org/wiki/Toy_language">toy language</a>
qui tournera sur Parrot.</p>

<p>Pour implémenter un langage sur Parrot, il faut d&#8217;abord … un langage.
Simple de préférence, avec peu de fonctionnalités, au moins pour
démarrer.
Je vais en inventer un pour l&#8217;occasion, ce qui sera bien plus drôle que
d&#8217;utiliser un sous-ensemble d&#8217;un langage déjà existant.</p>

<!-- more -->


<h2>Le langage naam</h2>

<p>Naam signifie No Assignment, Automatic Memoization.
Je rappelle qu&#8217;il s&#8217;agit d&#8217;un <em>toy language</em>, l&#8217;objectif étant
d&#8217;expérimenter, et non de produire le prochain succès planétaire.
Pour le moment, et peut-être pour toujours, le langage sera limité
à l&#8217;utilisation des nombres entiers. Pas de nombres à virgule, pas de
chaînes, pas d&#8217;objets… Je viens de passer quelques jours à envisager
une syntaxe. Mais la reflexion n&#8217;est pas terminée et elle pourrait
changer d&#8217;ici à l&#8217;implémentation de naam. Voici des exemples:</p>

<pre><code>sign(n)=
1  if n &gt; 0
-1 if n &lt; 0
0  else

print sign(3)
</code></pre>

<p>Les détails:</p>

<pre><code>sign(n)=
</code></pre>

<p>C&#8217;est la définition d&#8217;une fonction <code>sign</code>.</p>

<pre><code>1  if n &gt; 0
-1 if n &lt; 0
</code></pre>

<p>Si <code>n</code> est positif on renvoie 1. Si <code>n</code> est négatif on renvoie -1.</p>

<pre><code>0  else
</code></pre>

<p>Dans les autres cas (il reste le cas du zéro) on renvoie 0. Le mot <code>else</code>
marque aussi la fin de la fonction.</p>

<p>Voici maintenant ce que pourrait être la fonction factorielle:</p>

<pre><code>!(n)=
1            if 0
n * .(n - 1) if n &gt; 0
else

print !(7)
</code></pre>

<p>Et le détail:</p>

<pre><code>!(n)=
</code></pre>

<p>On définit la fonction <code>!</code>. Le nom d&#8217;une fonction n&#8217;a pas à être composé
de lettres. Des signes font aussi bien l&#8217;affaire.</p>

<pre><code>1            if 0
</code></pre>

<p>Quand l&#8217;argument vaut zéro, on renvoie 1.</p>

<pre><code>n * .(n - 1) if n &gt; 0
</code></pre>

<p>Dans les cas où <code>n</code> est positif, on renvoie <code>n</code> multiplié
par la factorielle de <code>n - 1</code>.
Le point (<code>.</code>) signifie «la fonction elle-même».</p>

<pre><code>else
</code></pre>

<p>Enfin, dans les autres cas (qui ici sont <code>n</code> est négatif) on renvoie du
vide, rien, nada. Comme une fonction est dans l&#8217;obligation de renvoyer
une valeur, cela provoquera une erreur (ce qui est voulu).</p>

<p>Un dernier exemple pour terminer, la fonction d&#8217;Ackermann. Je ne vais pas
la commenter, la seule différence avec ce que j&#8217;ai montré avant est
qu&#8217;il y a deux arguments :</p>

<pre><code>ackermann(m, n)=
n + 1                 if 0, n
.(m - 1, 1)           if m &gt; 0, 0
.(m - 1, .(m, n - 1)) else

print ackermann(2, 3)
</code></pre>

<p>On pourrait aussi écrire la même fonction de la manière suivante (je n&#8217;ai
pas encore décidé si naam supporterait les deux syntaxes ou non):</p>

<pre><code>ackermann(0, n)     = n + 1
ackermann(m &gt; 0, 0) = .(m - 1, 1)
ackermann(m, n)     = .(m - 1, .(m, n - 1))
</code></pre>

<p>Alors, qu&#8217;en pensez vous. Est-ce-que ça vous dit de voir naître un
<em>toy language</em> au jour le jour ? Que pensez vous de naam ?</p>

<p>La prochaine fois on installe Parrot et on joue un peu avec pour sentir le truc.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro sept]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/31/bien-debuter-avec-vim-conseil-numero-sept/"/>
    <updated>2013-07-31T10:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/31/bien-debuter-avec-vim-conseil-numero-sept</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Lisez et utilisez la documentation</h2>

<p>La documentation de Vim est énorme. Elle comporte plusieurs
dizaines de chapitres répartis sur deux manuels: le manuel utilisateur
et le manuel de référence. On y accède avec la touche F1.
La documentation est complète et accessible pour tous les niveaux.
Dans l&#8217;idéal, vous devriez la lire entièrement…</p>

<!-- more -->


<p>Alors je ne suis pas naïf et
je sais bien que vous ne le ferez pas. Moi même je ne l&#8217;ai évidemment pas fait.
Je dis juste ce que devrait être l&#8217;idéal.</p>

<p>Pour rester réaliste, dans un premier
temps, parcourez la documentation entièrement mais en diagonale. Vite fait.
Simplement pour savoir où trouver quoi.
Donnez vous un objectif simple, comme un chapitre par jour.
N&#8217;apprenez rien par coeur. Prenez plutôt des notes
quand vous tombez sur un truc qui vous plait.
Parcourir un seul chapitre en diagonale tout en jetant quelques notes
sur une feuille de papier vous prendra entre 5 et 10 minutes.</p>

<p>Dans un second temps, essayez d&#8217;étudier à fond au moins les deux premières
parties du manuel utilisateur:
<em>Getting Started</em> et <em>Editing Effectively</em>.
Cette fois ci, il n&#8217;est plus question de lire en diagonale, mais bien
d&#8217;étudier la bête.</p>

<p>Lire, apprendre, comprendre et digérer la documentation de Vim vous prendra
beaucoup de temps. Certainement
des mois. Au minimum. C&#8217;est une bonne raison pour vous y mettre dès
aujourd&#8217;hui.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
