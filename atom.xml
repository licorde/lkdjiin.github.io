<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-14T09:57:23+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro trois]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois/"/>
    <updated>2013-07-14T09:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois</id>
    <content type="html"><![CDATA[<h2>Ayez confiance dans le mode normal</h2>

<p>Ça ne vous aura pas échappé, Vim est un éditeur modal.  C&#8217;est à dire qu&#8217;il
possède plusieurs modes de fonctionnement, plusieurs manières de considérer les
choses.  Comme par exemple, le mode normal pour éditer du texte, ou bien le mode
commande pour lancer des fonctions, ou encore le mode insertion pour saisir du
nouveau texte, etc.  C&#8217;est une des grandes différences de Vim par rapport aux
éditeurs dits «classiques», qui restent la plupart du temps en insertion.</p>

<!-- more -->


<p>Il semblerait qu&#8217;une erreur courante chez les nouveaux utilisateurs de Vim soit
de rester en mode insertion, et de ne passer en mode normal que lorsque cela
s&#8217;avère absolument necessaire.  Si vous agissez de la sorte, vous passerez
totalement à côté de vim. Au contraire, vous devez rester le plus longtemps
possible en mode normal. Entrez dans un autre mode uniquement quand c&#8217;est
nécessaire et repassez en normal le plus tôt possible.</p>

<blockquote><p>La première chose que fait un Vimiste qui revient d&#8217;une pause café, c&#8217;est<br/>appuyer sur ESC pour être sûr d&#8217;être à la maison.</p></blockquote>


<p><span class='pullquote-right' data-pullquote='Si vous restez en mode insertion, vous ne serez jamais à l&#8217;aise avec
Vim,'>
Un débutant aura tendance à faire le contraire, à rester trop
longtemps en mode insertion, puisqu&#8217;il va s&#8217;y sentir à l&#8217;aise. Il va utiliser la
souris et les touches fléchées pour se déplacer dans et parmi ses documents :
c&#8217;est ainsi que fonctionnait son ancien éditeur. C&#8217;est une grosse perte
de temps. Si vous restez en mode insertion, vous ne serez jamais à l&#8217;aise avec
Vim, et vous finirez par retourner dans les bras de votre ancien éditeur.  Vim
vous permet de vous déplacer bien plus rapidement grâce au clavier.
Faites lui un peu confiance ! Rester le
plus possible en mode normal et y repasser dès que possible vous forcera à
utiliser la <em>vim way</em>. Au début, ça semble totalement anti-naturel, il
faut persévérer. Que cela prenne 3 jours ou 3 semaines, le mode normal finira
par vous sembler … normal.
</span></p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je veux mon blog Octopress en français]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais/"/>
    <updated>2013-07-13T07:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais</id>
    <content type="html"><![CDATA[<p>Octopress n&#8217;est pas prévu pour être internationnalisé et localisé. C&#8217;est
comme ça. Je ne pense pas que ça change avant un moment, si jamais ça
change. Suite à une
<a href="https://twitter.com/lkdjiin/status/355699071895343105">conversation sur twitter</a>
avec @octopress, on m&#8217;a
conseillé de regarder du coté de Jekyll. Je le ferais surement, mais plus
tard. Je ne connais pas du tout Jekyll et je veux mon blog Octopress en
français maintenant. (Ok, je fais un caprice)</p>

<!-- more -->


<p>Je vais vous montrer comment j&#8217;ai fait pour internationnalisé Octopress.
Si vous en avez envie vous aussi, vous pourrez suivre cette procédure
pour ne pas vous prendre la tête à chercher vous-même.</p>

<h2>Les titres</h2>

<p>Les titres des articles (aussi dans le volet à droite) sont capitalisés à
l&#8217;extrème. Chaque première lettre d&#8217;un mot est en majuscule.  Alors,
capitaliser chaque mot d&#8217;un titre, ça fait cool en anglais, mais en français
c&#8217;est juste horrible et illisible. Pour arranger ça, on change la méthode
<code>titlecase</code> dans <code>plugins/titlecase.rb</code>.</p>

<figure class='code'><figcaption><span>plugins/titlecase.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">titlecase</span>
</span><span class='line'>  <span class="n">capitalize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les dates</h2>

<p>Je veux les dates en français, bien sûr. Les changements sont à faire
dans <code>plugins/date.rb</code>, et je vais vraiment y aller avec mes gros sabots.
Tout d&#8217;abord il faut modifier la méthode <code>ordinalize</code> ainsi:</p>

<figure class='code'><figcaption><span>méthode ordinalize dans plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns an ordinal date eg 1 juillet 2007 -&gt; 1er juillet 2007</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ordinalize</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="n">date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">ordinal</span><span class="p">(</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%e&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">french_month</span><span class="p">(</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%-m&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on modifie la méthode <code>ordinal</code> de cette façon:</p>

<figure class='code'><figcaption><span>méthode ordinal dans plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns an ordinal number. 1 -&gt; 1er.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ordinal</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">number</span><span class="o">.</span><span class="n">to_i</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">&lt;span&gt;er&lt;/span&gt;&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et enfin il faut ajouter la méthode <code>french_month</code>. C&#8217;est très basique, mais ça
fonctionne:</p>

<figure class='code'><figcaption><span>méthode french_month dans plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns a string french month. 1 -&gt; janvier, 2 -&gt; février, etc.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">french_month</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">number</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">1</span><span class="p">;</span> <span class="s2">&quot;janvier&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">2</span><span class="p">;</span> <span class="s2">&quot;février&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">3</span><span class="p">;</span> <span class="s2">&quot;mars&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">4</span><span class="p">;</span> <span class="s2">&quot;avril&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">5</span><span class="p">;</span> <span class="s2">&quot;mai&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">6</span><span class="p">;</span> <span class="s2">&quot;juin&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">7</span><span class="p">;</span> <span class="s2">&quot;juillet&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">8</span><span class="p">;</span> <span class="s2">&quot;août&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">9</span><span class="p">;</span> <span class="s2">&quot;septembre&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">10</span><span class="p">;</span> <span class="s2">&quot;octobre&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">11</span><span class="p">;</span> <span class="s2">&quot;novembre&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">12</span><span class="p">;</span> <span class="s2">&quot;décembre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous êtes en Ruby 1.9.3, il ne faut pas oublier de mettre un encodage
au début du fichier, à cause des caractères accentués :</p>

<figure class='code'><figcaption><span>1ère ligne de plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les chaînes de caractères embarquées</h2>

<p>Rien de bien intéressant pour cette partie, il suffit de remplacer une
chaîne par une autre. Je vais donc me contenter de dresser la liste.</p>

<ul>
<li>&ldquo;Read on&rdquo; : <code>_config.yml</code></li>
<li>&ldquo;Recent Posts&rdquo; : <code>source/_includes/aside/recent_posts.html</code></li>
<li>&ldquo;Search&rdquo; : <code>source/_includes/navigation.html</code></li>
<li>&ldquo;Posted by&rdquo; : <code>source/_includes/post/author.html</code></li>
<li>&ldquo;posted in&rdquo; : <code>source/_includes/archive_post.html</code></li>
</ul>


<h3>Category:</h3>

<p>Pour remplacer «Category: » par «Catégorie : », c&#8217;est un peu différent.
Il faut <em>ajouter</em> la ligne suivante dans <code>_config.yml</code>:</p>

<figure class='code'><figcaption><span>1ère ligne de plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">category_title_prefix</span><span class="p">:</span> <span class="s2">&quot;Catégorie : &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Alors voilà, j&#8217;ai bien conscience que certaines modifications risquent ne plus
fonctionner après une mise à jour d&#8217;Octopress… Mais c&#8217;est tout ce que j&#8217;ai
trouver pour faire ça dans l&#8217;heure.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro deux]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux/"/>
    <updated>2013-07-12T09:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux</id>
    <content type="html"><![CDATA[<h2>Abandonnez la souris</h2>

<p>Moins utiliser la souris est une des principales motivations qui m&#8217;ont décidé à
passer sur Vim, il y a maintenant un an et demi. Histoire d&#8217;avoir moins de
crampe à la fin de la journée. Et le pari est réussi. En quelques mois, toutes
les douleurs que je ressentais systématiquement à l&#8217;épaule et au poignet en fin
de journée ont totalement disparues.</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='Au début vous serez totalement paumé,
c&#8217;est normal.'>
Vim transforme votre clavier en un joypad géant
d&#8217;une centaine de boutons, profitez en ! Chaque fois que vous passez du clavier
à la souris, et vice-versa, vous perdez du temps &ndash; c&#8217;est vrai que c&#8217;est minime
mais ça s&#8217;accumule &ndash; et surtout, vous interrompez le flot de
vos pensées. De plus, votre cerveau doit commuter entre deux modes
différents (le mode souris et le mode clavier sont deux modes de
fonctionnement bien disctinct pour le cerveau, le «switch» prends un certain
temps et l&#8217;accumulation fatigue).
Donc, n&#8217;utilisez pas la souris pour vous déplacer dans vos documents, le clavier
est bien plus rapide avec Vim. Au début vous serez totalement paumé,
c&#8217;est normal. Mais
ne perdez pas de vue que Vim est fait pour être piloté au clavier, donc gardez
vos mains sur votre clavier.
</span></p>

<p>Je suis même prêt à parier que dans quelques temps, vous chercherez
les moyens d&#8217;utiliser vos autres logiciels sans la souris …</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby et les eigenclass]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/11/ruby-et-les-eigenclass/"/>
    <updated>2013-07-11T10:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/11/ruby-et-les-eigenclass</id>
    <content type="html"><![CDATA[<p>Dans l&#8217;
<a href="http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe/">article d&#8217;hier</a>,
je cherchais un intérêt à <code>class &lt;&lt; self</code> dans la
définition d&#8217;une classe, et je n&#8217;en ai pas trouvé.
Aujourd&#8217;hui je vais appronfondir le sujet et parler des eigenclass(es) en Ruby.
Il se trouve que Ruby est un langage orienté objet, contrairement à…
(au hasard) Java…</p>

<!-- more -->


<p>Ok, c&#8217;est pour rire. Bien sûr que Java est un langage OO. Mais quand même,
par rapport à Ruby je dirais plutôt que Java est un langage orienté classe.
Avec Ruby, tout est objet, même les classes ! Je re-dis ça autrement
pour que ce soit
bien clair : en Ruby les classes sont des objets comme les autres.
Voyons comment ça fonctionne, au travers des eigenclass(es):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Engin</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">roule</span>
</span><span class='line'>    <span class="s2">&quot;Je roule&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">voiture</span> <span class="o">=</span> <span class="no">Engin</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">moto</span> <span class="o">=</span> <span class="no">Engin</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">voiture</span><span class="o">.</span><span class="n">roule</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Je roule&quot;</span>
</span><span class='line'><span class="n">moto</span><span class="o">.</span><span class="n">roule</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Je roule&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a créé une classe <code>Engin</code> et instancié deux objets à partir de cette
classe, <code>voiture</code> et <code>moto</code>. La classe a joué le rôle d&#8217;un moule, à partir
duquel les deux objets ont été fabriqués et leurs comportements sont
identiques. Maintenant, si on veut spécialiser le comportement de <code>moto</code>,
on pourrait utiliser l&#8217;héritage ou les mixins. Ce qui serait très bien si
on devait gérer des dizaines d&#8217;objets au comportement similaire. Mais si on
a un seul objet qui diffère, devoir écrire une nouvelle classe pour un seul
objet est un peu lourd. Grâce au eigenclass(es), Ruby permet de changer le
comportement d&#8217;un objet pendant l&#8217;execution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">moto</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">wheeling</span>
</span><span class='line'>    <span class="s2">&quot;Wahooo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ou bien avec la syntaxe suivante, qui fait la même chose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">moto</span><span class="o">.</span><span class="nf">wheeling</span>
</span><span class='line'>  <span class="s2">&quot;Wahooo&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On vient d&#8217;ajouter une méthode à l&#8217;objet <code>moto</code> de classe <code>Engin</code>, mais pas
à l&#8217;objet <code>voiture</code>, pourtant lui aussi de classe <code>Engin</code>. Pour vérifier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">moto</span><span class="o">.</span><span class="n">wheeling</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Wahooo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">voiture</span><span class="o">.</span><span class="n">wheeling</span>
</span><span class='line'><span class="c1"># =&gt; NoMethodError: undefined method `wheeling&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">voiture</span><span class="o">.</span><span class="n">class</span> <span class="o">==</span> <span class="n">moto</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comment Ruby gère ce système ? C&#8217;est surprenant de simplicité. Ruby interpose
une nouvelle classe, anonyme, entre l&#8217;objet et sa hiérarchie de classes. C&#8217;est
cette nouvelle classe, qu&#8217;on appelle eigenclass.
L&#8217;eigenclass ne comprend que les comportements ajoutés à «son» objet.  Dans
notre exemple, l&#8217;eigenclass de <code>moto</code> ne comporte que la méthode <code>wheeling</code>.
Le système de classe de Ruby est complexe, mais pour la partie qui nous
intéresse ici cela donne ça:</p>

<pre><code>moto &lt; eigenclass &lt; Engin &lt; Object
</code></pre>

<p>À la place de «eigenclass», on peut lire et entendre parfois «singleton» ou
«metaclass», c&#8217;est la même chose. D&#8217;ailleurs, pour obtenir la liste des
méthodes de la «ghost class» (encore un autre nom) on peut utiliser la
méthode <code>singleton_methods</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">moto</span><span class="o">.</span><span class="n">singleton_methods</span>
</span><span class='line'><span class="c1"># =&gt; [</span>
</span><span class='line'><span class="c1"># =&gt;   [0] wheeling() #&lt;Engin:0xa05585c&gt;</span>
</span><span class='line'><span class="c1"># =&gt; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai dit au début qu&#8217;une classe est un objet comme un autre. Donc ce qui
fonctionne pour <code>moto</code> doit aussi fonctionner pour <code>Engin</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">Engin</span><span class="o">.</span><span class="nf">definition</span>
</span><span class='line'>  <span class="s2">&quot;Un truc qui roule&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Engin</span><span class="o">.</span><span class="n">definition</span>
</span><span class='line'><span class="c1"># =&gt; &quot;un truc qui roule&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Engin</span><span class="o">.</span><span class="n">singleton_methods</span>
</span><span class='line'><span class="c1"># =&gt; [</span>
</span><span class='line'><span class="c1"># =&gt;     [0] definition() Engin</span>
</span><span class='line'><span class="c1"># =&gt; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout pareil ! <code>definition</code> a été ajouté à l&#8217;eigenclass de <code>Engin</code>.
Autrement dit, quand vous ajouter une méthode de classe à une classe, en fait
vous l&#8217;ajouter à son eigenclass.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quel est l'intérêt de cette syntaxe ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe/"/>
    <updated>2013-07-10T09:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe</id>
    <content type="html"><![CDATA[<p>En googlant sur <code>ruby design pattern factory</code> je suis tombé sur un
<a href="http://blog.rubybestpractices.com/posts/gregory/059-issue-25-creational-design-patterns.html">post intéressant</a>.
Non, je ne vais pas vous parler de design pattern dans cet article. L&#8217;exemple
qui m&#8217;a plus particulierment intrigué est le suivant:</p>

<figure class='code'><figcaption><span>Exemple original</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AdjacencyMatrix</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">undirected</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">directed</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>      <span class="kp">new</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">directed</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#...  </span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">undirected_matrix</span> <span class="o">=</span> <span class="no">AdjacencyMatrix</span><span class="o">.</span><span class="n">undirected</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="n">directed_matrix</span>   <span class="o">=</span> <span class="no">AdjacencyMatrix</span><span class="o">.</span><span class="n">directed</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pourquoi cet exemple m&#8217;a intrigué ? Pas parce qu&#8217;il parle de matrice, je vous
rassure. Je ne comprends pas grand chose aux matrices, et je n&#8217;ai jamais
entendu parler d&#8217;«adjacency matrix». Si cet exemple m&#8217;intrigue, c&#8217;est parce que
je ne comprends pas, <em>à priori</em>, l&#8217;intérêt du <code>class &lt;&lt; self</code>.  Il me semble
que je peux réécrire ça sans <code>class &lt;&lt; self</code> et que le résultat serait le même.</p>

<!-- more -->


<p>Alors allons y. Voilà le nouveau bout de code qui fait la même chose que
le précédent:</p>

<figure class='code'><figcaption><span>Seconde version</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AdjacencyMatrix</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">undirected</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">directed</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initializedata</span><span class="p">,</span> <span class="n">directed</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#...  </span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">undirected_matrix</span> <span class="o">=</span> <span class="no">AdjacencyMatrix</span><span class="o">.</span><span class="n">undirected</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="n">directed_matrix</span>   <span class="o">=</span> <span class="no">AdjacencyMatrix</span><span class="o">.</span><span class="n">directed</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><span class='pullquote-right' data-pullquote='un code plus simple est un code plus
maintenable,'>
L&#8217;API et le résultat sont identiques. Alors c&#8217;est pas nouveau, avec Ruby il y a
toujours deux (ou trois, ou plus) manières différentes de faire la même chose.
Mais là, je me demande plus particulièrment si il y a un <strong>intérêt</strong> à utiliser
la syntaxe du premier exemple. Et je ne vois pas.  Du coup il me vient une
seconde question : entre ces deux exemples, quel est le meilleur code ? Et part
<em>meilleur</em>, j&#8217;entends bien sûr <em>le plus lisible</em>.<br/>
Sans vous faire attendre plus
longtemps, je pense que le second exemple possède le code le plus lisible.
Pourquoi ? Parce qu&#8217;il est plus simple ? Non, parce que ça n&#8217;est pas forcement
très pertinent dans ce cas précis.
Même si je pense que 9 fois sur 10 un code plus simple est un code plus
maintenable, je dois reconnaitre que quelqu&#8217;un d&#8217;habitué à manipuler du code
Ruby comprendra aussi facilement et rapidement les deux syntaxes précédentes.
</span></p>

<p><span class='pullquote-right' data-pullquote='je voudrais lire du code aussi facilement et naturellement que je lis
un livre'>
En fait, si le second
exemple me parait plus lisible, c&#8217;est parce qu&#8217;il possède un niveau
d&#8217;indentation du code en moins. Plus on est proche de la marge gauche, et plus
le code se lit aisément. C&#8217;est pas toujours évident à voir
sur des exemples aussi courts, c&#8217;est vrai. Mais quand on lit du code, comme
celui de l&#8217;exemple 1, étalé sur une centaine de lignes ou plus, il est facile
de se perdre et/ou d&#8217;oublier si on a affaire à une méthode de classe ou à une
méthode d&#8217;objet.
Un code devrait pouvoir se lire comme une histoire. Pour pousser la logique,
je voudrais lire du code aussi facilement et naturellement que je lis
un livre. Et dans un
livre, les lignes débutent à la marge gauche. Voilà pourquoi je préfère le
code du second exemple.
</span></p>

<h2>Quel est l&#8217;intérêt de <code>class &lt;&lt; self</code> ?</h2>

<p>Quoi qu&#8217;il en soit, je n&#8217;ai toujours pas de réponse à ma première question:
«quel est l&#8217;intérêt de <code>class &lt;&lt; self</code>» dans cet exemple précis.
Il est possible que dans une ancienne
version de Ruby, il n&#8217;y avait pas moyen de faire autrement et qu&#8217;on ai gardé
l&#8217;habitude ? Peut-être qu&#8217;il n&#8217;y a aucune réponse ? Je vais donc aller faire un
tour du coté de la divinité StackOverflow pour tenter d&#8217;y voir plus clair. Je
vous tient au courant dans un futur article si je trouve quelque chose.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro un]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/09/bien-debuter-avec-vim-conseil-numero-un/"/>
    <updated>2013-07-09T09:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/09/bien-debuter-avec-vim-conseil-numero-un</id>
    <content type="html"><![CDATA[<h2>Soyez radical !</h2>

<p>De tous les conseils qu&#8217;on puisse donner pour bien débuter avec Vim, je pense
que celui-ci est clairement le plus important. Le number one des conseils,
quoi : <strong>Soyez radical</strong>. Autrement dit : n&#8217;utilisez plus que Vim et seulement
Vim. Exclusivement.</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='Vim peut paraitre très étrange quand on l&#8217;aborde pour la
première fois.'>
Donc, vous avez décidé de passer sur Vim.
Faites vous une fleur : faites le à fond.
Sans vouloir faire de grandes phrases (ou peut-être que si, après tout), vous
devez savoir ceci : changez d&#8217;éditeur pour Vim, c&#8217;est comme changer de vie.
C&#8217;est difficile, alors autant bien (re)démarrer et mettre toutes les chances
de son coté.
Oubliez les autres éditeurs, bannissez les, n&#8217;ayez aucune pitié, aucuns regrets.
Je ne dis pas que c&#8217;est simple. Au contraire, c&#8217;est surement assez
compliqué car Vim peut paraitre très étrange quand on l&#8217;aborde pour la
première fois.
</span></p>

<p><span class='pullquote-right' data-pullquote='il va falloir bien choisir le moment où vous allez franchir ce
fameux pas.'>
Et comme vous le savez peut-être, la courbe d&#8217;apprentissage de
Vim est longue, voir très longue. Il se passera des semaines avant
de retrouver le niveau de confort que vous connaissiez avec votre ancien
éditeur.
Donc il va falloir bien choisir le moment où vous allez franchir ce
fameux pas.
Si vous êtes en plein rush au boulot, il serait préférable d&#8217;attendre une
période plus calme… &ndash; Une idée comme ça, pourquoi ne pas négocier le
passage à Vim avec vos employeurs ? &ndash;
Si vous jouez le jeu et que vous ne lui
faites pas d&#8217;infidelités, vous réduirez le temps d&#8217;apprentissage.
Et croyez bien que, de toutes
façons, dans quelques temps vous ne voudrez plus entendre parler des autres
éditeurs.
</span></p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nouveau défi: un article par jour pendant un an]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/08/nouveau-defi-un-article-par-jour-pendant-un-an/"/>
    <updated>2013-07-08T17:09:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/08/nouveau-defi-un-article-par-jour-pendant-un-an</id>
    <content type="html"><![CDATA[<p>À partir d&#8217;aujourd&#8217;hui, et ce pendant une année, je vais écrire un article
par jour. J&#8217;écrirais sur le développement informatique en général, et
certainement plutôt sur les sujets qui me touchent particulièrement, à savoir :
<strong>Ruby, Rails, Vim</strong>, le TDD, etc.
Mais j&#8217;espère bien développer un tas d&#8217;autres sujets,
dont je n&#8217;ai encore pas la moindre idée et que peut-être, je découvrirais
en même temps que vous.</p>

<!-- more -->


<h2>Pourquoi faire un truc pareil ?</h2>

<p>D&#8217;abord parce que je trouve ça intéressant en soi. Ensuite parce que
j&#8217;ai plusieurs projets en démarrage dans ma vie professionnelle,
et je pense que le plus compliqué pour moi va être la constance. Tenir bon
coûte que coûte. Aller au bout même quand on commence à douter.<br/>
Et je crois qu&#8217;écrire un article par jour sur ce blog peut m&#8217;aider de
plusieurs manières :</p>

<ol>
<li>L&#8217;exercice va me demander de la constance, exactement la qualité dont j&#8217;ai
peur de manquer. C&#8217;est un peu de la méthode Coué, si j&#8217;arrive à le faire,
alors je dois pouvoir y arriver aussi dans mon projet professionnel.</li>
<li>Je devrais apprendre à écrire et penser plus rapidement. En effet, il n&#8217;est
pas question que j&#8217;y passe plusieurs heures chaque jour.</li>
<li>Trouver un sujet intéressant tout les jours seras peut-être (sûrement)
difficile. Je
vais donc devoir m&#8217;intéresser à des domaines que je ne maitrise pas, ce
qui seras bon pour ma culture informatique. Qui sait, je trouverais
peut-être de meilleurs moyens de résoudre les problèmes qu&#8217;avec les
outils que je connais déjà.</li>
</ol>


<p>Voilà, ça commence aujourd&#8217;hui. Je tente le coup.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
