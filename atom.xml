<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-09-04T11:31:14+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Générer un fichier Changelog avec Git]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/"/>
    <updated>2013-09-04T11:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><em>J&#8217;ai écrit un script pour Git qui permet de produire un fichier</em>
changelog
<em>en html ou en markdown à partir des commits.</em></p>

<!-- more -->


<p>Dans un
<a href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/">article précédent</a>
j&#8217;ai montré comment étendre Git avec un script pour créer ses propres
commandes. Aujourd&#8217;hui je vous présente mon script <code>git-changelog</code>.
Vous pouvez le trouver sur
<a href="https://github.com/lkdjiin/git-changelog">Github</a>.</p>

<p>Il s&#8217;agit d&#8217;un script Ruby qui ajoute une commande <code>changelog</code> à Git.
Il est utile pour automatiser (ou semi-automatiser) la production du
fichier changelog. Il peut produire des fichiers au format HTML ou au
format Markdown.</p>

<p>Pour l&#8217;installer, il faut mettre le fichier <code>git-changelog</code> quelque part
dans votre PATH, après l&#8217;avoir téléchargé.</p>

<h2>Utilisation</h2>

<p>Sortie sur la console:</p>

<pre><code>git changelog
</code></pre>

<p>Sortie dans un fichier:</p>

<pre><code>git changelog &gt; changelog.markdown
</code></pre>

<p>Le script accepte l&#8217;option <code>--since</code>. C&#8217;est la même option qu&#8217;utilise la
commande <code>git log</code>:</p>

<pre><code>git changelog --since=2013-07-01
git changelog --since=10.days
</code></pre>

<p>Sortie au format HTML:</p>

<pre><code>git changelog --html
</code></pre>

<p>Un exemple de combinaison:</p>

<pre><code>git changelog --html --since=2013-05-27 &gt; changelog.html
</code></pre>

<h2>Un exemple</h2>

<p>Voici ce que produit <code>git-changelog</code>:</p>

<pre><code>2013-07-18 Version 0.2.1  
==========================
* 2013-07-18 Fix bug for markdown format  
  Html entities are now escaped.
* 2013-07-18 Fix bug with markdown format  
  Commit body now start on a new line.
* 2013-07-18 Add auto-generated changelog file  

2013-07-18 Version 0.2.0  
==========================
* 2013-07-18 Add html format output  
  A new --html option outputs a &amp;lt;ul&amp;gt;.
* 2013-07-17 First commit  
  The script outputs in markdown and accept the option '--since'.
</code></pre>

<p>Et voilà ce que ça donne (avec le style de ce blog):</p>

<h1>2013-07-18 Version 0.2.1  </h1>

<ul>
<li>2013-07-18 Fix bug for markdown format<br/>
Html entities are now escaped.</li>
<li>2013-07-18 Fix bug with markdown format<br/>
Commit body now start on a new line.</li>
<li>2013-07-18 Add auto-generated changelog file</li>
</ul>


<h1>2013-07-18 Version 0.2.0  </h1>

<ul>
<li>2013-07-18 Add html format output<br/>
A new &mdash;html option outputs a &lt;ul&gt;.</li>
<li>2013-07-17 First commit<br/>
The script outputs in markdown and accept the option &lsquo;&mdash;since&rsquo;.</li>
</ul>


<h2>Rake task</h2>

<p>Voici un exemple de <em>rake task</em> pour une gem Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Generate the changelog&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:changelog</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git changelog &gt; Changelog.markdown&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et un exemple pour un projet Rails:</p>

<figure class='code'><figcaption><span>lib/tasks/changelog.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Generate the changelog in html&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:changelog</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git changelog --html &gt; app/views/pages/_changelog.html&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/'>Comment étendre Git avec ses propres scripts: la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/'>Comment étendre Git avec ses propres scripts</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/'>Bash: ajouter une ligne à la fin de plusieurs fichiers</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 5]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/"/>
    <updated>2013-09-03T08:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant qu&#8217;on sait créer une population de solutions, l&#8217;évaluer,
opérer une sélection des meilleures solutions et obtenir une nouvelle
génération par la reproduction, il reste à assembler toutes ces parties
et voir ce qu&#8217;il se passe…</p>

<!-- more -->


<p>Voici le code complet de notre algorithme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="mi">48</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">chromosome_to_gene</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">scan</span> <span class="sr">/.{4}/</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">gene</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0000&quot;</span> <span class="k">then</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0001&quot;</span> <span class="k">then</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0010&quot;</span> <span class="k">then</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0011&quot;</span> <span class="k">then</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0100&quot;</span> <span class="k">then</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0101&quot;</span> <span class="k">then</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0110&quot;</span> <span class="k">then</span> <span class="mi">6</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0111&quot;</span> <span class="k">then</span> <span class="mi">7</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1000&quot;</span> <span class="k">then</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1001&quot;</span> <span class="k">then</span> <span class="mi">9</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1010&quot;</span> <span class="k">then</span> <span class="s2">&quot;+&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1011&quot;</span> <span class="k">then</span> <span class="s2">&quot;-&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1100&quot;</span> <span class="k">then</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1101&quot;</span> <span class="k">then</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">selection</span>
</span><span class='line'>  <span class="vi">@selected</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">50</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">genes</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">gene</span><span class="o">|</span> <span class="n">formula</span> <span class="o">&lt;&lt;</span> <span class="n">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">formula</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@search_value</span> <span class="o">-</span> <span class="nb">eval</span><span class="p">(</span><span class="n">formula</span><span class="p">))</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>    <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">47</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child1</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">child2</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@selection</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">25</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span> <span class="o">=</span> <span class="vi">@selection</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child1</span><span class="p">,</span> <span class="n">child2</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">+=</span> <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="p">,</span> <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ce qui suit est nouveau:</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="mi">987</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'>
</span><span class='line'><span class="mi">50</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">generation</span><span class="o">|</span>
</span><span class='line'>  <span class="n">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>  <span class="n">best</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Generation: </span><span class="si">#{</span><span class="n">generation</span><span class="si">}</span><span class="s2"> Best: </span><span class="si">#{</span><span class="n">best</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="k">if</span> <span class="n">best</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">next_generation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seules les dernières lignes de code sont nouvelles. Elles sont assez
simple à comprendre je pense, même si vous ne connaissez pas le
langage Ruby. On commence par définir le nombre qu&#8217;on recherche puis
on crée la population d&#8217;origine au hasard avec <code>@population = make_population</code>.
Ensuite on itère sur 50 générations avec <code>50.times do |generation|</code>. C&#8217;est
notre première condition de sortie : quoiqu&#8217;il se passe, on arrête le
traitement au bout à la 50ème génération. Dans cette boucle on évalue
la génération en cours avec <code>score_population</code> et on la trie. Pour savoir
où on en est visuellement on extrait le meilleur score avec
<code>best = @population.first.first</code> et on affiche cette information à la ligne
suivante. Vient ensuite notre seconde et dernière condition de sortie avec
<code>exit if best == 0</code> ; autrement dit on stoppe le traitement à la première
solution trouvée. Pour finir, on produit la génération suivante avec
<code>next_generation</code>.</p>

<h2>Et ça donne quoi ?</h2>

<p>La plupart du temps ça donne quelque chose comme ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[~/genetic]⇒ ruby test.rb </span>
</span><span class='line'><span class="go">Generation: 0 Best: 507</span>
</span><span class='line'><span class="go">Generation: 1 Best: 138</span>
</span><span class='line'><span class="go">Generation: 2 Best: 485</span>
</span><span class='line'><span class="go">Generation: 3 Best: 347</span>
</span><span class='line'><span class="go">Generation: 4 Best: 65</span>
</span><span class='line'><span class="go">Generation: 5 Best: 208</span>
</span><span class='line'><span class="go">Generation: 6 Best: 222</span>
</span><span class='line'><span class="go">Generation: 7 Best: 15</span>
</span><span class='line'><span class="go">Generation: 8 Best: 15</span>
</span><span class='line'><span class="go">Generation: 9 Best: 2</span>
</span><span class='line'><span class="go">Generation: 10 Best: 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les générations successives convergent lentement vers la solution.
Si vous voulez voir la solution trouvée (c&#8217;est normal d&#8217;être curieux)
vous pouvez remplacez une ligne de code pour afficher la solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># exit if best == 0</span>
</span><span class='line'><span class="k">if</span> <span class="n">best</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="vi">@population</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Formula: </span><span class="si">#{</span><span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici quelques exemples de solutions:</p>

<pre><code>Formula: 912%429+933
Formula: 670+594-277
Formula: 893+91%96+3
Formula: 923--03--61
</code></pre>

<p>Alors, la plupart du temps, ça se passe bien. Mais parfois un phénomène
étrange se produit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[~/genetic]⇒ ruby test.rb </span>
</span><span class='line'><span class="go">Generation: 0 Best: 597</span>
</span><span class='line'><span class="go">Generation: 1 Best: 621</span>
</span><span class='line'><span class="go">Generation: 2 Best: 104</span>
</span><span class='line'><span class="go">...</span>
</span><span class='line'><span class="go">Generation: 25 Best: 1</span>
</span><span class='line'><span class="go">...</span>
</span><span class='line'><span class="go">Generation: 48 Best: 1</span>
</span><span class='line'><span class="go">Generation: 49 Best: 1</span>
</span><span class='line'><span class="go">[~/genetic]⇒ </span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;algorithme reste <em>bloqué</em> sur une valeur et on atteint la 50ème
génération sans avoir trouver de solution. What the fuck ? Et bien
l&#8217;algorithme a atteint ce qu&#8217;on appelle
<a href="http://fr.wikipedia.org/wiki/Extremum_local">l&#8217;extremum local</a>. Pour faire
court, ça signifie qu&#8217;il ne peut pas faire mieux
avec les gènes dont il disposait à l&#8217;origine. Je developperais cette
idée dans un futur article. En attendant, comment on règle ça ?
En s&#8217;inspirant encore une fois de phénomènes naturels : la mutation
et/ou la diversité génétique.
C&#8217;est le sujet du prochain article.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/'>Les algorithmes génétiques démystifiés 4</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/'>Les algorithmes génétiques démystifiés 3</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/'>Les algorithmes génétiques démystifiés 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 4]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/"/>
    <updated>2013-09-02T08:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après en avoir terminer avec la création de la population et la sélection,
on passe à la reproduction.</p>

<!-- more -->


<p>Pour imiter ce qu&#8217;il se passe dans la nature, de manière fort simple,
on va définir une fonction <code>crossover</code> (croisé, croisement) qui prend
en entrée deux chromosomes, les parents, et qui produit en sortie une liste
de deux autres chromosomes, les enfants. Le principe est de couper chaque
chromosomes parents en deux parties A et B, puis d&#8217;assembler la partie A
du parent 1 avec la partie B du parent 2 et vice-versa. Voici une illustration
du processus avec des chromosomes de 8 bits (symbolisés par des lettres):</p>

<pre><code>parent1  aaabbbbb
parent2  xxxyyyyy

enfant1  aaayyyyy
enfant2  xxxbbbbb
</code></pre>

<p>Voici donc la fonction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">point</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">47</span><span class="p">)</span>
</span><span class='line'>  <span class="n">child1</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="n">child2</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">parent2</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">point</span><span class="o">]</span> <span class="o">+</span> <span class="n">parent1</span><span class="o">.</span><span class="n">last</span><span class="o">[</span><span class="n">point</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tout d&#8217;abord on défini le point de croisement avec <code>point = rand(1..47)</code>.
Puis on assemble les deux chromosomes enfants et on les renvoient sous
la forme d&#8217;une liste. Ce mode de reproduction est le plus simple, mais
pas forcement le plus efficace (on en reparle un autre jour).</p>

<p>On a maintenant tout ce qu&#8217;il faut pour produire la génération suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">next_generation</span>
</span><span class='line'>  <span class="vi">@selection</span> <span class="o">=</span> <span class="n">selection</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">25</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span> <span class="o">=</span> <span class="vi">@selection</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child1</span><span class="p">,</span> <span class="n">child2</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span> <span class="o">=</span> <span class="n">crossover</span><span class="p">(</span><span class="n">parent1</span><span class="p">,</span> <span class="n">parent2</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@population</span> <span class="o">+=</span> <span class="o">[</span><span class="n">child1</span><span class="p">,</span> <span class="n">child2</span><span class="p">,</span> <span class="n">child3</span><span class="p">,</span> <span class="n">child4</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après avoir sélectionné les 50 meilleures solutions (voir
<a href="http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/">article précédent</a>) je crée une nouvelle population : Avec 50
individus on forme 25 couples qui vont chacun produire 4 enfants et
on retrouve une population de 100 solutions, sensée être globalement
meilleure que la génération précédente.</p>

<p>Même si c&#8217;est peu représentatif des phénomènes naturels, dans un algorithme
génétique les générations successives restent généralement stable en taille.
Ça évite aussi bien la croissance infinie (mémoire des ordinateurs limitée)
que le dépérissement de la population.</p>

<p>La prochaine fois on assemblera le tout pour voir notre algorithme
génétique à l&#8217;oeuvre.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/'>Les algorithmes génétiques démystifiés 5</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/'>Les algorithmes génétiques démystifiés 3</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/'>Les algorithmes génétiques démystifiés 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 13]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/"/>
    <updated>2013-09-01T21:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Après avoir utilisé un AST pour représenter le code source de Naam,
je parcours cet AST pour sortir le code assembleur PIR pour la machine
virtuelle Parrot.</p>

<!-- more -->


<p>Voici la méthode principale (et temporaire):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="o">.</span>
</span><span class='line'>  <span class="n">syntaxer</span> <span class="o">=</span> <span class="no">Syntaxer</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">ast</span> <span class="o">=</span> <span class="n">syntaxer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">units</span><span class="o">.</span><span class="n">dup</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">organizer</span> <span class="o">=</span> <span class="no">Organizer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
</span><span class='line'>  <span class="n">ast</span> <span class="o">=</span> <span class="n">organizer</span><span class="o">.</span><span class="n">reorganize</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">emitter</span> <span class="o">=</span> <span class="no">Emitter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pir_code</span> <span class="o">=</span> <span class="n">emitter</span><span class="o">.</span><span class="n">pir_code</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">pir_code</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe Syntaxer se charge de transformer la suite d&#8217;unités lexicales
en un arbre syntaxique abstrait (AST). La classe Organizer va en
quelque sorte réorganiser l&#8217;arbre, par exemple en regroupant les instructions
qui ne sont pas dans une fonction à l&#8217;intérieur d&#8217;une fonction principale
PIR.
Quant à la classe Emitter, elle est chargée de transformer l&#8217;AST en code PIR.</p>

<p>Voici un extrait de cette classe Emitter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Emitter</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@ast</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="vi">@label</span> <span class="o">=</span> <span class="s2">&quot;LABEL0000&quot;</span>
</span><span class='line'>      <span class="vi">@labels</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Get PIR code.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns PIR code as a String.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">pir_code</span>
</span><span class='line'>      <span class="n">compile</span><span class="p">(</span><span class="vi">@ast</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@code</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compile</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">node</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">MainAST</span> <span class="k">then</span> <span class="n">compile_main</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">FunctionHeaderAST</span> <span class="k">then</span> <span class="n">compile_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">IfClauseAST</span> <span class="k">then</span> <span class="n">compile_if_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">ElseClauseAST</span> <span class="k">then</span> <span class="n">compile_else_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="no">FunctionFooterAST</span> <span class="k">then</span> <span class="n">compile_footer</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="n">compile</span><span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compile_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>      <span class="n">arg</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">+=</span> <span class="s2">&quot;.sub </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">+=</span> <span class="s2">&quot;    .param int </span><span class="si">#{</span><span class="n">arg</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="vi">@code</span> <span class="o">+=</span> <span class="s2">&quot;    .local int result</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Get the next label.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># value - The String value attached to the label.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Examples</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   next_label</span>
</span><span class='line'>    <span class="c1">#   # =&gt; {name: &quot;LABEL0001&quot;, value: &quot;123&quot;}.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns a Hash.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next_label</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">label</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="vi">@label</span><span class="o">.</span><span class="n">next!</span><span class="o">.</span><span class="n">dup</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="n">value</span><span class="p">}</span>
</span><span class='line'>      <span class="vi">@labels</span> <span class="o">&lt;&lt;</span> <span class="n">label</span>
</span><span class='line'>      <span class="n">label</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine fois, le compilateur sera fonctionnel.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/'>Un langage sur Parrot &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/'>Un langage sur Parrot &ndash; partie 11: Arbre syntaxique abstrait</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/"/>
    <updated>2013-08-31T11:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le dernier épisode, j&#8217;utilisais un AST pour capturer la grammaire
de Naam, et le code n&#8217;était pas très propre. Cette fois je nettoie un peu
tout ça en mettant les règles de grammaire dans leur propres classes.</p>

<!-- more -->


<p>De ce fait, le syntaxer a beaucoup maigri puisqu&#8217;il se contente
maintenant de lancer la première règle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Public: Here we transform a list of lexical units in an AST.</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Syntaxer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@ast</span> <span class="o">=</span> <span class="no">AST</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;ast&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Compile lexical units from a Naam program in an AST.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># units - Array of LexicalUnits</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns the AST.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span> <span class="n">units</span>
</span><span class='line'>      <span class="no">ProgramRule</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">units</span><span class="p">,</span> <span class="vi">@ast</span><span class="p">)</span><span class="o">.</span><span class="n">apply!</span>
</span><span class='line'>      <span class="vi">@ast</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici la règle de base:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">BaseRule</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">units</span><span class="p">,</span> <span class="n">ast_node</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@units</span> <span class="o">=</span> <span class="n">units</span>
</span><span class='line'>      <span class="vi">@ast_node</span> <span class="o">=</span> <span class="n">ast_node</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">apply!</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">unit</span> <span class="o">=</span> <span class="vi">@units</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">&lt;&lt;</span> <span class="n">unit</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">type</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>        <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">accept_series</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">accept</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reste à écrire une classe par règle de grammaire. Voici par exemple la
règle pour la <code>else clause</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ElseClauseRule</span> <span class="o">&lt;</span> <span class="no">BaseRule</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">apply!</span>
</span><span class='line'>      <span class="n">accept</span><span class="p">(</span><span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>      <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;else&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>      <span class="n">else_node</span> <span class="o">=</span> <span class="no">ElseClauseAST</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">else_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="no">ReturnValueAST</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@series</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>      <span class="vi">@ast_node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">else_node</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La prochaine étape sera de sortir le code PIR à partir de l&#8217;AST.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/'>Un langage sur Parrot &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/'>Un langage sur Parrot &ndash; partie 11: Arbre syntaxique abstrait</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/"/>
    <updated>2013-08-30T09:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>On termine ce qu&#8217;on a commencé
<a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">hier</a>,
à savoir l&#8217;évaluation de la population et on s&#8217;occupe aussi
de la sélection, en vue de la reproduction.</p>

<!-- more -->


<p>Il est temps de noter la population entière:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">score_population</span>
</span><span class='line'>  <span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">individual</span><span class="o">|</span>
</span><span class='line'>    <span class="n">genes</span> <span class="o">=</span> <span class="n">chromosome_to_gene</span><span class="p">(</span><span class="n">individual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>    <span class="n">individual</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>score_population</code> itère sur chaque individu,
calcule son score et modifie
l&#8217;individu pour qu&#8217;il reflète ce score. On peut voir ce que donne
notre code jusqu&#8217;ici en ajoutant ces quelques lignes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@search_value</span> <span class="o">=</span> <span class="mi">987</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="n">make_population</span>
</span><span class='line'><span class="n">score_population</span>
</span><span class='line'><span class="vi">@population</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'><span class="vi">@population</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">individual</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">individual</span><span class="o">.</span><span class="n">inspect</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous ne connaissez pas trop Ruby, sachez que <code>sort</code> va trier
la population sur le premier élément de chaque individu, soit son score.
Et voici un résultat possible:</p>

<pre><code>[4, "001100111010111110010010100011111010111100110000"]
[198, "101000011111001000010011110100101010011110001000"]
[331, "011011101110010101101101011100000110001110000100"]
[524, "111011100101011010100010011010101110001110000001"]
[666, "001100101110000111011000100001010101011000000001"]
[735, "101000101111100001001110101101100010101000110000"]
[895, "100111110011101101000110110000110101110100101111"]
[932, "001100010100000111000101011111011000010111110100"]
...
[999999999999, "111100001100101011100000001011111110101110001100"]
[999999999999, "111100101001110111110101101101101101000111101010"]
</code></pre>

<p>Vous pouvez vous amuser à décrypter quelques chromosomes à la main si
ça vous amuse (ou bien si vous êtes sceptique).</p>

<p>On en a maintenant fini avec l&#8217;évaluation. Il faut savoir que cette partie est
toujours spécifique à un problème donné. C&#8217;est à dire que pour chaque
problème il faut trouver:</p>

<ul>
<li>comment représenter/crypter un gène, un chromosome</li>
<li>comment les décrypter</li>
<li>comment évaluer une solution</li>
<li>comment classer la population</li>
</ul>


<h2>La sélection</h2>

<p>Maintenant on peut passer à l&#8217;étape de selection. Ça va être très rapide.
Je vais m&#8217;inspirer de la selection artificielle, et non pas naturelle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">selection</span>
</span><span class='line'>  <span class="vi">@selected</span> <span class="o">=</span> <span class="vi">@population</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">50</span><span class="o">].</span><span class="n">shuffle</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple, non ? Je conserve les 50 premiers individus. Au passage, <code>shuffle</code> sert
à mélanger au hasard. Demain, nous ferons se reproduire ces 50 solutions qui
sont les meilleures de leur génération.</p>

<p><strong>Attention :</strong> si ce type de sélection a le mérite
d&#8217;être simple, il n&#8217;en est pas moins radical. C&#8217;est de l&#8217;élitisme, voir
limite de l&#8217;eugénisme
(heureusement ce n&#8217;est que de l&#8217;informatique). Il y a un tas
d&#8217;autres façons d&#8217;opérer une sélection, et j&#8217;en parlerais sûrement plus en
détails plus tard. D&#8217;ici là, cette méthode élitiste devrait convenir assez
bien pour notre petit problème (il est possible qu&#8217;elle nous cause
quelques soucis quand même… suspens…).</p>

<h2>Un mot sur le code</h2>

<p>J&#8217;utilise Ruby pour présenter les algorithmes génétiques car je trouve que
c&#8217;est un langage assez facile à comprendre même pour ceux qui ne le
maitrise pas. J&#8217;utilise aussi un style volontairement très simple et
procédural pour que chacun puisse l&#8217;adapter le plus facilement possible
à son propre paradigme/langage. Si vous voulez voir ce que donne le code
de l&#8217;article d&#8217;hier d&#8217;une manière orienté objet,
<a href="https://twitter.com/PagedeGeek">@Sam</a>
(de <a href="http://www.pagedegeek.com/">Page de Geek</a>)
a eu la gentillesse de s&#8217;y coller et a pondu
<a href="https://gist.github.com/PagedeGeek/6378269">ce code</a>
très bien écrit.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/'>Les algorithmes génétiques démystifiés 5</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/'>Les algorithmes génétiques démystifiés 4</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/'>Les algorithmes génétiques démystifiés 2</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/"/>
    <updated>2013-08-29T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans cette seconde partie, on commence à coder…</p>

<p>J&#8217;ai choisi un problème simple: trouver une expression qui vaut 987 en
mélangeant les chiffres de 0 à 9 et les symboles +, &ndash;, / et %, respectivement
pour addition, soustraction, division entière et reste de la division.
L&#8217;expression comportera 12 caractères/symboles maximum. Par exemple:</p>

<ul>
<li>&ldquo;987&rdquo;</li>
<li>&ldquo;900+87&rdquo;</li>
<li>&ldquo;2000/2-13&rdquo;</li>
</ul>


<p>sont différentes solutions possibles au problème posé.</p>

<!-- more -->


<p>Je n&#8217;utilise pas la multiplication pour éviter d&#8217;avoir des nombres trop
grands (<code>**</code> est l&#8217;opérateur de puissance en Ruby, comme dans certains
autres langages).</p>

<p>La première chose à faire est de définir comment on va coder les gènes.
Traditionnellement, ils sont représentés sous la forme d&#8217;une chaîne de bits.
Comme on a 14 symboles (10 chiffres et 4 opérateurs mathématiques) à
coder, 4 bits sont suffisants. Les 2 derniers encodages sont des gènes qui
ne font rien:</p>

<pre><code>0000 0
0001 1
0010 2
0011 3
0100 4
0101 5
0110 6
0111 7
1000 8
1001 9
1010 +
1011 -
1100 /
1101 %
1110 ne rien faire
1111 ne rien faire
</code></pre>

<p>L&#8217;expression recherchée devant faire au maximum 12 caractères de long, nos
chromosomes mesureront 48 bits (12 caractères multiplié par 4 bits).</p>

<p>Le problème est posé,
c&#8217;est parti pour le code. Il est en Ruby mais je vais faire en sorte
qu&#8217;il soit compréhensible par tous et facilement transposable dans
votre langage de prédilection.</p>

<p>On doit pouvoir créer un chromosome au hasard:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_chromosome</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="mi">48</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">value</span> <span class="o">+=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">value</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction renvoie une liste avec <code>nil</code>, qui sera plus tard utilisé
pour mémoriser l&#8217;évaluation du chromosome (son score) et une chaîne de
48 caractères au hasard parmi &ldquo;1&rdquo; et &ldquo;0&rdquo;.</p>

<p>On peut maintenant fabriquer une population complète:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_population</span>
</span><span class='line'>  <span class="n">population</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">population</span> <span class="o">&lt;&lt;</span> <span class="n">make_chromosome</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">population</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>make_population</code> renvoie une liste de 100 chromosomes.</p>

<p>On peut voir ce que ça donne avec <code>make_population.each {|x| puts x.inspect}</code>:</p>

<pre><code>[nil, "110111010010111000000001011001111000100010101111"]
[nil, "101100010001001000011000111011000001100010000000"]
...
[nil, "111110110011110111111110110000010100100100000100"]
[nil, "000010101001000010011001101010101110011100010010"]
</code></pre>

<p>Maintenant qu&#8217;on a créé une population de 100 solutions potentielles, il
faut pouvoir évaluer chaque solution. Pour cela, il faut d&#8217;abord être en
mesure de séparer une suite de 48 bits (le chromosome) en 12 parties de
4 bits (les gènes):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">chromosome_to_gene</span><span class="p">(</span><span class="n">chromosome</span><span class="p">)</span>
</span><span class='line'>  <span class="n">chromosome</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">scan</span> <span class="sr">/.{4}/</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fonction <code>chromosome_to_gene</code> prend en entrée un chromosome (créé avec
<code>make_chromosome</code>) et renvoie une liste des 12 gènes qui le compose.</p>

<p>Pour décrypter l&#8217;expression composée par les 12 gènes, il faut tout
d&#8217;abord décrypter un seul gène:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">gene</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0000&quot;</span> <span class="k">then</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0001&quot;</span> <span class="k">then</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0010&quot;</span> <span class="k">then</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0011&quot;</span> <span class="k">then</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0100&quot;</span> <span class="k">then</span> <span class="mi">4</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0101&quot;</span> <span class="k">then</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0110&quot;</span> <span class="k">then</span> <span class="mi">6</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;0111&quot;</span> <span class="k">then</span> <span class="mi">7</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1000&quot;</span> <span class="k">then</span> <span class="mi">8</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1001&quot;</span> <span class="k">then</span> <span class="mi">9</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1010&quot;</span> <span class="k">then</span> <span class="s2">&quot;+&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1011&quot;</span> <span class="k">then</span> <span class="s2">&quot;-&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1100&quot;</span> <span class="k">then</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1101&quot;</span> <span class="k">then</span> <span class="s2">&quot;%&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut maintenant decrypter la formule complète (l&#8217;expression):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">genes</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">gene</span><span class="o">|</span> <span class="n">formula</span> <span class="o">&lt;&lt;</span> <span class="n">gene_to_operand</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">formula</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>genes_to_formula</code> prend en entrée la liste des 12 gènes d&#8217;un chromosome
et renvoie l&#8217;expression sous la forme d&#8217;une chaîne de caractères.</p>

<p>L&#8217;évaluation proprement dite se passe ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">evaluation</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="n">formula</span> <span class="o">=</span> <span class="n">genes_to_formula</span><span class="p">(</span><span class="n">genes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@search_value</span> <span class="o">-</span> <span class="nb">eval</span><span class="p">(</span><span class="n">formula</span><span class="p">))</span><span class="o">.</span><span class="n">abs</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Exception</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="mi">999_999_999_999</span> <span class="k">unless</span> <span class="n">result</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction mérite quelques d&#8217;explications. L&#8217;expression (<code>formula</code>)
est évaluée avec <code>eval</code>. En ruby, <code>eval</code> evalue une chaîne de caractères
comme si c&#8217;était du code source (comme en Javascript, etc).
On ôte ce résultat de <code>@search_value</code>, qui
contient le nombre qu&#8217;on cherche (notre problème) et on garde la valeur
absolue. Ainsi zéro signifie une solution et plus on s&#8217;éloigne de zéro,
plus on est loin d&#8217;une solution. On pourra donc facilement classer nos
individus. Si <code>eval</code> provoque une exception (à cause d&#8217;une formule/expression
incompréhensible), on place une grande valeur
comme résultat puisqu&#8217;on est très loin de la solution. On peut voir
le nombre 999.999.999.999 comme étant l&#8217;infini. Enfin je regarde si
le résultat de <code>eval</code> est bien un nombre et dans le cas contraire, je
change le résultat pour refleter ce souci. Qu&#8217;est ce que ça peut être
d&#8217;autre qu&#8217;un nombre ? En ruby, une chaîne placée entre <code>/</code> est une
expression régulière. Voilà pour aujourd&#8217;hui.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/'>Les algorithmes génétiques démystifiés 5</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/'>Les algorithmes génétiques démystifiés 4</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/'>Les algorithmes génétiques démystifiés 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/28/les-algorithmes-genetiques-demystifies/"/>
    <updated>2013-08-28T09:49:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/28/les-algorithmes-genetiques-demystifies</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p><strong>démystifié</strong>:</p>

<blockquote><p>Enlever le caractère mystérieux.</p></blockquote>


<p>Un algorithme génétique c&#8217;est quoi ? Comment ça marche ? À quoi ça sert ?
Si vous vous posez une de ces questions, cette
nouvelle série d&#8217;articles peut vous
intéresser.</p>

<!-- more -->


<h2>Une définition simple</h2>

<p>Tout d&#8217;abord, un algorithme génétique est un <em>algorithme</em>. Autrement dit
c&#8217;est une suite d&#8217;instructions, ou encore une recette, pour résoudre un
problème. C&#8217;est peut-être bidon pour certains d&#8217;entre vous, mais ça va mieux
en le disant.</p>

<p>Ensuite, pourquoi génétique ? Et bien parce que pour résoudre un problème,
cette catégorie d&#8217;algorithmes s&#8217;inspire de la biologie, de la génétique,
et notamment du mécanisme de la séléction naturelle et/ou artificielle.</p>

<h2>La démarche</h2>

<p>Pour faire court:</p>

<ol>
<li>On crée une population au hasard. Chaque individu représente une solution
possible au problème posé.</li>
<li>On évalue chaque individu (solution) de la population. En clair, on leur
donne une note.</li>
<li>On selectionne certains individus parmi les plus adaptés.</li>
<li>Les individus (solutions) sélectionnés se reproduisent pour donner
naissance à la nouvelle génération, qui est globalement plus adaptée.</li>
<li>On recommence au point 2 jusqu&#8217;à ce qu&#8217;on trouve la solution du
problème.</li>
</ol>


<h2>Les domaines d&#8217;application</h2>

<p>Tous, ou presque. Trouver le meilleur profil pour une hélice de bateau ou
une aile d&#8217;avion, apprendre à marcher à un robot, adapter le comportement
d&#8217;un personnage dans un jeu vidéo, maximiser l&#8217;exploitation du volume
d&#8217;un hangar, etc. Comme chaque nouvelle génération produit globalement
une meilleure solution, les algorithmes génétiques peuvent être très
intéressants lorsqu&#8217;on veut obtenir une <em>bonne</em> solution rapidement (et
pas forcement la <em>meilleure</em> solution).</p>

<p>Dans mes prochains articles, je parlerais plus en détails de ces
algorithmes et je montrerais notamment comment les coder.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/'>Les algorithmes génétiques démystifiés 5</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/'>Les algorithmes génétiques démystifiés 4</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/'>Les algorithmes génétiques démystifiés 3</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: Recherche de texte]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte/"/>
    <updated>2013-08-27T10:14:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Aujourd&#8217;hui je montre comment rechercher une chaîne de caractères dans un
fichier avec Vim: les commandes, les options et un petit truc en plus…</p>

<!-- more -->


<h2>Les commandes utiles</h2>

<p>Pour rechercher un texte dans le fichier, on utilise la commande <code>/</code> suivie
du texte à rechercher et de la touche entrée. Ainsi:</p>

<pre><code>/texte
</code></pre>

<p>va chercher toutes les occurences de «texte» dans le fichier.</p>

<p>Pour se déplacer parmi les occurences trouvées, on utilise <code>n</code> et <code>N</code>. <code>n</code>
va à l&#8217;occurence suivante tandis que <code>N</code> va à l&#8217;occurence précédente.</p>

<p>Attention, la commande de recherche <code>/</code> ne tient pas compte des <em>mots</em>.
Je m&#8217;explique: <code>/xxx</code> va trouver les 4 expressions suivantes.</p>

<ol>
<li>xxx</li>
<li>aaaxxx</li>
<li>xxxbbb</li>
<li>aaaxxxbbb</li>
</ol>


<p>Parfois c&#8217;est ce que l&#8217;on veut, parfois non. Pour modifier ce comportement
on utilise <code>\&lt;</code> et <code>\&gt;</code>, respectivement pour signifier le début et la fin
d&#8217;un mot. Ainsi <code>\&lt;xxx\&gt;</code> ne trouvera que l&#8217;expression n° 1. <code>\&lt;xxx</code> trouvera
la n° 1 et la n° 3. Quand à <code>/xxx\&gt;</code>, elle trouvera la n° 1 et la n° 2.</p>

<h2>Les options</h2>

<p>Voici quelques options à utiliser dans votre fichier .vimrc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">incsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>La recherche sera mise en évidence au fur et à mesure de la frappe clavier,
et non pas seulement après la touche entrée. <code>incsearch</code> signifie
<em>incremental search</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">ignorecase</span> <span class="nb">smartcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ces deux options marchent souvent de pair. <code>ignorecase</code> permet d&#8217;ignorer la
différence minuscule/majuscule, ainsi <code>/texte</code> trouvera «texte», «TEXTE» et
«Texte». <code>smartcase</code> repassera en mode différenciation des
minuscules/majuscules si vous saisissez une majuscule, ainsi <code>/Texte</code> trouvera
«Texte» mais pas «TEXTE» ni «texte».</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">hlsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette option sert à mettre en évidence la recherche, autrement dit à la
surligner.</p>

<h2>Supprimer la mise en évidence du texte après une recherche</h2>

<p>Une fois que vous avez fait ce que vous aviez à faire avec votre recherche,
celle-ci reste surlignée, ce qui devient vite très agaçant (pour rester poli).
Pour effacer le surlignage, on utilise la commande <code>nohlsearch</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span><span class="k">nohlsearch</span>
</span></code></pre></td></tr></table></div></figure>


<p>On aura évidemment intérêt à mapper cette commande, par exemple sur
<code>&lt;Leader&gt;h</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">h</span> :<span class="k">nohlsearch</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personnellement, je n&#8217;ai pas de mappage pour cette commande: je ne m&#8217;en
sert tout simplement pas. Pour supprimer la mise en évidence de la
dernière recherche je tape juste <code>/xx</code>. Vous pouvez utiliser <code>/yy</code> ou <code>/ww</code>
ou tout ce qui tombe bien sous vos doigts. Le principe est de rechercher
une chaîne qui n&#8217;existe pas, ce qui a pour effet d&#8217;effacer la dernière
mise en évidence.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/'>Bien débuter avec Vim: la touche Escape</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf/'>Bien débuter avec Vim: conseil numéro neuf</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/05/bien-debuter-avec-vim-conseil-numero-huit/'>Bien débuter avec Vim: conseil numéro huit</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 11: Arbre syntaxique abstrait]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/"/>
    <updated>2013-08-26T08:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Dans le dernier épisode, je me suis rendu compte que j&#8217;aurais intéret
à utiliser un arbre syntaxique abstrait pour mon petit langage. En
voici une première implémentation.</p>

<!-- more -->


<p>Un arbre syntaxique abstrait (<em>Abstract Syntax Tree</em> en anglais, ou AST)
est avant tout une manière de structurer des données:</p>

<pre><code>    A
   / \
  B   C
 / \   \
D   E   F
   /
  G
</code></pre>

<p>On part d&#8217;un noeud racine (ici <code>A</code>) et on ajoute des branches qui mènent à
d&#8217;autres noeuds. On peut distinguer les noeuds terminaux (<code>D</code>, <code>F</code> et <code>G</code>) des
noeuds non-terminaux.
Les noeuds terminaux, aussi appelés feuilles, contiennent une valeur. Les noeuds
non-terminaux contiennent d&#8217;autres noeuds.
C&#8217;est une manière pratique de représenter un code source,
l&#8217;AST étant (assez) facilement manipulable. Il est dit abstrait dans le sens
où il ne contient pas chaque éléments du langage source. Par exemple, les
parenthèses, les virgules, ou encore les débuts et fins de blocs sont
souvent absents de l&#8217;AST. Si vous voulez en savoir plus sur les AST:
<a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">http://en.wikipedia.org/wiki/Abstract_syntax_tree</a>.</p>

<p>Le code qui suit est sur <a href="https://github.com/lkdjiin/naam">Github</a>,
à la version 0.0.5.</p>

<p>L&#8217;objectif est de créer l&#8217;AST et de le visualiser ainsi:</p>

<pre><code>program
  function definition
    header
      name ::= sign
      argument ::= n
    if clause
      return value ::= 1
      test
        left value ::= n
        operator value ::= &gt;
        right value ::= 0
    if clause
      return value ::= -1
      test
        left value ::= n
        operator value ::= &lt;
        right value ::= 0
    else clause
      return value ::= 0
  print statement ::= sign(4)
</code></pre>

<p>Voici la classe de base de l&#8217;AST:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::AST</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Node</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="nb">name</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>      <span class="vi">@children</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:children</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_child</span> <span class="n">child</span><span class="p">;</span> <span class="vi">@children</span> <span class="o">&lt;&lt;</span> <span class="n">child</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">leaf?</span><span class="p">;</span> <span class="vi">@children</span><span class="o">.</span><span class="n">empty?</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">indent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">indent</span> <span class="o">+</span> <span class="vi">@name</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot; ::= </span><span class="si">#{</span><span class="vi">@value</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">leaf?</span>
</span><span class='line'>      <span class="nb">puts</span>
</span><span class='line'>      <span class="vi">@children</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">child</span><span class="o">|</span> <span class="n">child</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">indent</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elle permet entre autres d&#8217;ajouter un noeud enfant avec <code>add_child</code> et de
déterminer si un noeud est une feuille avec <code>leaf?</code>. La méthode <code>display</code>,
appliquée sur le noeud racine permettra d&#8217;afficher l&#8217;arbre complet.</p>

<p>Un noeud non-terminal ressemblera à ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::AST</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Program</span> <span class="o">&lt;</span> <span class="no">Node</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="s2">&quot;program&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour un noeud terminal (une feuille), on ajoutera simplement une valeur:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::AST</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Argument</span> <span class="o">&lt;</span> <span class="no">Node</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="s2">&quot;argument&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comment appliquer tout ça ? Directement dans le <em>syntaxer</em>. En voici
quelques extraits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam::Parser</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Syntaxer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>      <span class="vi">@ast</span> <span class="o">=</span> <span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">Program</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">function_def</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">FunctionDef</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="vi">@ast</span><span class="o">.</span><span class="n">add_child</span> <span class="n">node</span>
</span><span class='line'>      <span class="n">function_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="n">if_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="k">while</span> <span class="n">if_clause?</span>
</span><span class='line'>      <span class="n">else_clause</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">function_header</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:paro</span><span class="p">,</span> <span class="ss">:word</span><span class="p">,</span> <span class="ss">:parc</span><span class="p">,</span> <span class="ss">:affect</span><span class="p">,</span> <span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>      <span class="n">f_header</span> <span class="o">=</span> <span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">FunctionHeader</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">f_header</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@series</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>      <span class="n">f_header</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="ss">Naam</span><span class="p">:</span><span class="ss">:AST</span><span class="o">::</span><span class="no">Arg</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@series</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">f_header</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;AST va me permettre de faire un truc plus propre (même si cette classe
<code>Syntaxer</code> demande toujours un gros <em>refactoring</em>) et de manipuler plus
aisement le code source.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/'>Un langage sur Parrot &ndash; partie 13</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/'>Un langage sur Parrot &ndash; partie 12</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mon générateur d'ombres CSS]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/25/mon-generateur-dombres-css/"/>
    <updated>2013-08-25T20:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/25/mon-generateur-dombres-css</id>
    <content type="html"><![CDATA[<p>Il y a quelques années, j&#8217;ai écrit un générateur d&#8217;ombres portées pour CSS.</p>

<p><img src="http://lkdjiin.github.io/images/css3-drop-shadow-generator.jpg"></p>

<!-- more -->


<p>Le site se trouve ici:
<a href="http://css3-drop-shadows.herokuapp.com/app">css3-drop-shadows</a>
et le code source est sur
<a href="https://github.com/lkdjiin/css3_shadow">Github</a>.
La majorité du code est en CoffeeScript, j&#8217;avais d&#8217;ailleurs écrit ça pour
apprendre ce langage. Les changements sont visualisables en temps réel et
l&#8217;application produit du code CSS et Sass.</p>

<p>J&#8217;espère que ça vous sera utile.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/19/vos-captures-decrans-dans-un-environnement-realiste/'>Vos captures d&#8217;écrans dans un environnement réaliste</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques ressources libres pour Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir/"/>
    <updated>2013-08-24T11:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>J&#8217;ai passé quelques semaines à tester/jouer avec le langage Elixir. Voici
une liste des ressources qui m&#8217;ont été très utiles.</p>

<!-- more -->


<h2>Le site officiel</h2>

<p>Tout commence ici: <a href="http://elixir-lang.org/">http://elixir-lang.org/</a>.
Plus spécifiquement, vous y trouverez une liste de
<a href="http://elixir-lang.org/getting_started/1.html">tutoriels</a>
bien foutus, quoique trop succints à mon goût.</p>

<h2>La documentation</h2>

<p>N&#8217;hésitez jamais à consulter la
<a href="http://elixir-lang.org/docs/stable/">documentation d&#8217;Elixir</a>. Elle est
claire et assez complète pour un jeune projet.</p>

<h2>Études for Elixir</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000001642">Études for Elixir</a>
est un bouquin par O&#8217;Reilly en open-source. Il s&#8217;agit d&#8217;une série d&#8217;exercices
à réaliser, on apprend beaucoup. Si vous êtes coincés, les solutions se
trouvent
<a href="https://github.com/oreillymedia/etudes-for-elixir">ici</a>.</p>

<h2>La mailing list</h2>

<p>Si vous êtes perdus, la <a href="https://groups.google.com/forum/#!forum/elixir-lang-talk">mailing list</a>
d&#8217;Elixir est votre amie. L&#8217;auteur du langage, et d&#8217;autres passionnés/engagés,
vous répondent rapidement et poliment. Les réponses sont toujours pertinentes.
C&#8217;est vraiment une très bonne mailing list.</p>

<h2>Plugin vim</h2>

<p>Si vous utilisez Vim, ce qu&#8217;il vous faut pour la syntaxe, l&#8217;indentation, etc,
se trouve <a href="https://github.com/elixir-lang/vim-elixir">ici</a>.</p>

<p>Si vous utilisez le plugin Vim Snipmate, voici en bonus un fichier de
snippets pour Elixir que j&#8217;ai commencé. Il y en a peu, mais je pense que
c&#8217;est un bon départ, à vous ensuite de créer les votres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>snippet case
</span><span class='line'>  case ${<span class="m">1</span>:var} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>:condition1} <span class="p">-&gt;</span> ${<span class="m">3</span>:action1}
</span><span class='line'>      _ <span class="p">-&gt;</span> ${<span class="m">4</span>:other}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet cond
</span><span class='line'>  cond <span class="k">do</span>
</span><span class='line'>      ${<span class="m">1</span>:condition1} <span class="p">-&gt;</span> ${<span class="m">2</span>:action1}
</span><span class='line'>      true <span class="p">-&gt;</span> ${<span class="m">3</span>:other}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet <span class="k">d</span>
</span><span class='line'>  <span class="nb">def</span> ${<span class="m">1</span>:<span class="k">function</span>} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet dm
</span><span class='line'>  defmodule ${<span class="m">1</span>:ModuleName} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet dp
</span><span class='line'>  defp ${<span class="m">1</span>:<span class="k">function</span>} <span class="k">do</span>
</span><span class='line'>      ${<span class="m">2</span>}
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>snippet map
</span><span class='line'>  Enum.map<span class="p">(</span>${<span class="m">1</span>:<span class="nb">list</span>}<span class="p">,</span> fn <span class="k">e</span> <span class="p">-&gt;</span> ${<span class="m">2</span>:action} <span class="k">end</span><span class="p">)</span>
</span><span class='line'>snippet puts
</span><span class='line'>  IO.puts ${<span class="m">1</span>}
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion provisoire sur Elixir</h2>

<p>Apprendre les bases d&#8217;Elixir a été plaisant, mais je vais m&#8217;arrêter là,
du moins jusqu&#8217;à la sortie de la version 1.0.
Le gros avantage d&#8217;Elixir est d&#8217;utiliser la totalité de vos processeurs
gratuitement. Il n&#8217;y a rien à faire, rien à dire, rien à configurer. Ça
marche et c&#8217;est tout. J&#8217;ai moins aimé la syntaxe qui te fait croire que
tu es en terrain conquis si tu connais Ruby. Ça n&#8217;est pas le cas, les
deux langages sont vraiment différents. Le couplage avec Erlang ne
m&#8217;a pas convaincu. À un moment ou un autre (du moins quand j&#8217;écris ces
lignes) si on veut écrire quelque chose de conséquent, il faut apprendre
un minimum d&#8217;Erlang. Ça changera peut-être avec le temps.</p>

<p>Quoiqu&#8217;il en soit, la fréquence de nos processeurs n&#8217;augmentant plus, un
langage élégant qui sait <em>réellement</em> utiliser le multi-coeur simplement
et avec efficacité est sans conteste un langage sur lequel il faut
garder un oeil…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut/'>Elixir et les paramètres par défaut</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir/'>Comment lire et écrire un fichier texte avec Elixir</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/'>Pattern matching avec Elixir: une première approche</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash: ajouter une ligne à la fin de plusieurs fichiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/"/>
    <updated>2013-08-23T11:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans l&#8217;article d&#8217;hier, je décrivais mon deuxième plugin pour Octopress.
Pour le mettre en place sur ce blog, je vais devoir ajouter une ligne de
texte à l&#8217;ensemble des articles. Il y en a presque une cinquantaine
maintenant, il est donc hors de question de le faire à la main.
Bash va me faire ça en quelques secondes.</p>

<!-- more -->


<p>J&#8217;ouvre une console dans le dossier où sont placés mes articles, et j&#8217;entre
ce qui suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[~/.../source/_posts]⇒ for file in *.markdown; do</span>
</span><span class='line'><span class="gp">&gt;</span> <span class="nb">echo</span> <span class="s1">&#39;ligne à ajouter&#39;</span> &gt;&gt; <span class="s2">&quot;$file&quot;</span>
</span><span class='line'><span class="gp">&gt;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada ! C&#8217;est fini. Si vous n&#8217;êtes pas familier de Bash, voici une petite
description de ce qui s&#8217;est passé:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>file in *.markdown; <span class="k">do</span>
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>for - do - done</code> est une structure d&#8217;itération de Bash, en gros l&#8217;équivalent
d&#8217;une boucle <code>for</code> en C, Java, etc. On l&#8217;utilise généralement pour itérer
sur les arguments de la ligne de commande, ou bien, comme ici, sur les
fichiers du répertoire. Elle peut s&#8217;écrire aussi sur 3 lignes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>x in *
</span><span class='line'><span class="k">do</span>
</span><span class='line'>ma_commande
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et même sur une seule ligne: <code>for x in *; do ma_commande ; done</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;ligne à ajouter&#39;</span> &gt;&gt; <span class="s2">&quot;$file&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La commande <code>echo</code> affiche normalement une chaîne de caractère sur
la console. Ici cette chaîne est redirigée avec <code>&gt;&gt;</code> dans le fichier
représenté par <code>"$file"</code>.</p>

<p><code>&gt;&gt;</code> permet d&#8217;ajouter en fin de fichier. et le <code>$</code> permet d&#8217;extraire le contenu
d&#8217;une variable.</p>

<h2>Pour conclure</h2>

<p>La syntaxe de Bash m&#8217;a toujours défrisé, mais quand il s&#8217;agit de traiter des
fichiers texte, c&#8217;est vraiment un outil puissant. Comme je suis curieux,
j&#8217;aimerais bien savoir ce que <em>toi</em>, lecteur, tu aurais utilisé pour
cette tâche. Bash, Perl, Sed, Awk, Ruby, autre chose ?</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/'>Comment étendre Git avec ses propres scripts: la suite</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/'>Comment étendre Git avec ses propres scripts</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un plugin Octopress pour les articles connexes]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes/"/>
    <updated>2013-08-22T15:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Je cherchais un plugin Octopress pour embarquer une section d&#8217;articles
connexes (<em>related posts</em>) dans certains articles et, curieusement, je
n&#8217;en ai pas trouvé. C&#8217;est donc l&#8217;occasion d&#8217;écrire mon second plugin pour
Octopress.</p>

<!-- more -->


<p>Pour voir ce que fait ce plugin, il vous suffit de regarder la section
«Articles connexes» à la fin de cet article. Le code est sur Github:
<a href="https://github.com/lkdjiin/octopress-connexe">octopress-connexe</a>.</p>

<p>Je vais commenter quelques unes des méthodes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_categories</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="n">context</span><span class="o">.</span><span class="n">environments</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s2">&quot;page&quot;</span><span class="o">][</span><span class="s2">&quot;categories&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">my_url</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="n">context</span><span class="o">.</span><span class="n">environments</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s2">&quot;page&quot;</span><span class="o">][</span><span class="s2">&quot;url&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai séché un certain temps là-dessus. Pour connaitre les informations
relative à l&#8217;article courant, on se sert de
<code>context.environments.first["page"]</code>.</p>

<p>Et voici comment je fais la sélection des articles connexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">build_posts</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="n">remove_unrelated_posts</span>
</span><span class='line'>  <span class="n">remove_current_post</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sort_posts</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">remove_unrelated_posts</span>
</span><span class='line'>  <span class="vi">@posts</span> <span class="o">=</span> <span class="vi">@posts</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="vi">@categories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">remove_current_post</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@posts</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span><span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">url</span> <span class="o">==</span> <span class="n">my_url</span><span class="p">(</span><span class="n">context</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sort_posts</span>
</span><span class='line'>  <span class="vi">@posts</span> <span class="o">=</span> <span class="vi">@posts</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>    <span class="n">weight</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@categories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>      <span class="n">weight</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">category</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="o">[</span><span class="n">weight</span><span class="p">,</span> <span class="n">post</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vi">@posts</span> <span class="o">=</span> <span class="vi">@posts</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans un premier temps, j&#8217;écarte les articles qui n&#8217;ont pas au moins
une catégorie commune avec l&#8217;article courant. C&#8217;est le rôle de la méthode
<code>remove_unrelated_posts</code>. Puis après avoir écarter de la liste l&#8217;article
courant, il ne reste plus qu&#8217;à trier avec la méthode <code>sort_posts</code>. Dans cette
méthode, j&#8217;attribue un poid à chaque article en fonction du nombre de
catégories communes. C&#8217;est ce poid qui sert de référence pour le tri.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/07/30/comment-ecrire-un-plugin-octopress-partie-2/'>Comment écrire un plugin Octopress &ndash; partie 2</a></li><li><a href='http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/'>Comment écrire un plugin Octopress</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code propre: Non aux abréviations]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/21/code-propre-non-aux-abreviations/"/>
    <updated>2013-08-21T14:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/21/code-propre-non-aux-abreviations</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour l&#8217;écriture du
<a href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/">langage Naam</a>,
je cherchais une implémentation toute
prête de l&#8217;algorithme
<a href="http://en.wikipedia.org/wiki/Shunting_yard_algorithm">Shunting Yard</a>
en Ruby. Je suis tombé sur
<a href="http://www.hokstad.com/operator-precedence-parser">cet article</a>
qui a retenu mon attention car l&#8217;auteur propose en plus
la sortie dans un arbre syntaxique. Ce qui est exactement ce que je voulais.
Par contre le code est une horreur à lire. Ça m&#8217;a donné l&#8217;idée d&#8217;une série
d&#8217;articles sur le refactoring (et ce que je pense être un code propre),
à partir d&#8217;exemples réels.</p>

<!-- more -->


<h2>Une abréviation ne veut pas forcement dire ce que vous pensez</h2>

<p>Du moins 99 fois sur 100 une abréviation est ambigue. Voyez le code suivant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Oper</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:pri</span><span class="p">,</span><span class="ss">:sym</span><span class="p">,</span><span class="ss">:type</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Une seule ligne de code et trois abréviations (même quatre en comptant le
<code>Struct</code>, mais là dessus je n&#8217;ai pas la main). Que peut bien vouloir dire
<code>Oper</code> ? Operator, Operand, Operation ? Et que veut dire <code>pri</code> ? Primary,
priority, private ? Et pour <code>sym</code>, est-ce symbol ou symlink ou autre chose ?</p>

<p>Comparez avec la version suivante:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Operator</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:priority</span><span class="p">,</span> <span class="ss">:symbol</span><span class="p">,</span> <span class="ss">:type</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Laquelle vous semble la plus lisible ?  De prime abord on peut penser qu&#8217;il est
simple de déduire la signification d&#8217;un nom grâce au contexte. Mais je suis
persuadé du contraire.</p>

<p>D&#8217;abord, penser au contexte demande au lecteur de fournir un effort
intellectuel. Et cette énergie serait mieux utilisée à résoudre un
problème, à étendre le code, plutôt qu&#8217;à le décrypter.
Un code est souvent assez complexe par lui-même, pourquoi
demander un effort supplémentaire inutile au lecteur ?</p>

<p>Ensuite ça n&#8217;est pas seulement une question de contexte, mais aussi
de personne. Pour untel, oper est clairement l&#8217;abréviation d&#8217;operand, alors
que pour tel autre c&#8217;est clairement l&#8217;abréviation d&#8217;operator. Tout dépend
du vécu de la personne en question. Pourquoi mettre de l&#8217;ambiguité dans
nos codes ?</p>

<p>Voici un autre exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">o</span> <span class="o">=</span> <span class="vi">@ostack</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="k">if</span> <span class="n">o</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="ss">:lp</span>
</span><span class='line'>  <span class="vi">@ostack</span> <span class="o">&lt;&lt;</span> <span class="n">o</span> <span class="k">if</span> <span class="n">pri</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vi">@out</span><span class="o">.</span><span class="n">oper</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Qu&#8217;est-ce que <code>o</code>, <code>lp</code>, <code>ostack</code> ? Imaginez le temps que prendra
la compréhension d&#8217;une trentaine de lignes comme celles-ci. Et maintenant
comparez avec ce qui suit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">operator</span> <span class="o">=</span> <span class="vi">@operators</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="k">if</span> <span class="n">operator</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="ss">:left_parenthesis</span>
</span><span class='line'>  <span class="vi">@operators</span> <span class="o">&lt;&lt;</span> <span class="n">operator</span> <span class="k">if</span> <span class="n">priority</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vi">@output</span><span class="o">.</span><span class="n">operator</span><span class="p">(</span><span class="n">operator</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est plus verbeux, mais même si vous ne connaissez pas Ruby, une simple
lecture suffit pour comprendre ce que fait le code. Remarquez que j&#8217;ai
seulement supprimé les abréviations, il y aurait d&#8217;autres choses à dire
sur le refactoring de ce code mais ce sera pour un autre article.</p>

<p>J&#8217;espère avoir convaincu les sceptiques.
Pour finir je dois faire mon meaculpa: je me rends compte que j&#8217;utilise
bien trop d&#8217;abréviations dans mon code. À partir d&#8217;aujourd&#8217;hui, j&#8217;arrête ;)</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/'>Générer un fichier Changelog avec Git</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/'>Les algorithmes génétiques démystifiés 5</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/'>Les algorithmes génétiques démystifiés 4</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 10: émettre le code assembleur]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/20/implementer-un-langage-sur-parrot-partie-10-emettre-le-code-assembleur/"/>
    <updated>2013-08-20T10:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/20/implementer-un-langage-sur-parrot-partie-10-emettre-le-code-assembleur</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Maintenant qu&#8217;on a
<a href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/">vérifié la syntaxe</a>
de notre petit programme, on peut sortir le code assembleur PIR:</p>

<figure class='code'><figcaption><span>lib/naam/main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">comp</span> <span class="o">=</span> <span class="no">Compiler</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">comp</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">units</span><span class="o">.</span><span class="n">dup</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Voici le module Emitter:</p>

<figure class='code'><figcaption><span>lib/naam/emitter.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Emitter</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Output the main procedure.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># series - An Array of String.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Examples</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   Emitter.main([&quot;foo(4)&quot;, &quot;bar(-1)&quot;]</span>
</span><span class='line'>    <span class="c1">#   # =&gt; .sub main :main</span>
</span><span class='line'>    <span class="c1">#   # =&gt;     .local int f</span>
</span><span class='line'>    <span class="c1">#   # =&gt;     f = foo(4)</span>
</span><span class='line'>    <span class="c1">#   # =&gt;     say f</span>
</span><span class='line'>    <span class="c1">#   # =&gt;     f = bar(-1)</span>
</span><span class='line'>    <span class="c1">#   # =&gt;     say f</span>
</span><span class='line'>    <span class="c1">#   # =&gt; .end</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">main</span><span class="p">(</span><span class="n">series</span><span class="p">)</span>
</span><span class='line'>      <span class="k">unless</span> <span class="n">series</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="nb">puts</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;.sub main :main&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;    .local int f&quot;</span>
</span><span class='line'>        <span class="n">series</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;    f = </span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;    say f&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;.end&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Dispatch different kind of emit message.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># type   - A Symbol in :function_header, :function_footer,</span>
</span><span class='line'>    <span class="c1">#          :if_clause, :else_clause and :label.</span>
</span><span class='line'>    <span class="c1"># series - An Array of LexicalUnit.</span>
</span><span class='line'>    <span class="c1"># label  - Hash like { label: &quot;NAME&quot;, value: &quot;123&quot; }. Could be nil.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">emit</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">series</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">type</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:function_header</span> <span class="k">then</span> <span class="n">function_header</span><span class="p">(</span><span class="n">series</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:function_footer</span> <span class="k">then</span> <span class="n">function_footer</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:if_clause</span> <span class="k">then</span> <span class="n">if_clause</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:else_clause</span> <span class="k">then</span> <span class="n">else_clause</span><span class="p">(</span><span class="n">series</span><span class="p">)</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:label</span> <span class="k">then</span> <span class="n">label</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">raise</span> <span class="no">Error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">function_header</span><span class="p">(</span><span class="n">series</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;.sub &quot;</span> <span class="o">+</span> <span class="n">series</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    .param int &quot;</span> <span class="o">+</span> <span class="n">series</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">value</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    .local int result&quot;</span>
</span><span class='line'>      <span class="nb">puts</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">function_footer</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;RETURN:&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    .return(result)&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;.end&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">if_clause</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    if </span><span class="si">#{</span><span class="n">series</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">value</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">series</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="n">value</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">series</span><span class="o">[</span><span class="mi">4</span><span class="o">].</span><span class="n">value</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">+</span>
</span><span class='line'>           <span class="s2">&quot;goto </span><span class="si">#{</span><span class="n">label</span><span class="o">[</span><span class="ss">:label</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">else_clause</span><span class="p">(</span><span class="n">series</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    result = </span><span class="si">#{</span><span class="n">series</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    goto RETURN&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">label</span><span class="p">(</span><span class="n">series</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">label</span><span class="o">[</span><span class="ss">:label</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    result = </span><span class="si">#{</span><span class="n">label</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;    goto RETURN&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voilà quelques morceaux choisis dans la class Compiler pour montrer
son utilisation:</p>

<figure class='code'><figcaption><span>lib/naam/compiler.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Naam</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Public: Here we transform a list of lexical units in a PIR source</span>
</span><span class='line'>  <span class="c1"># code. At least this is the goal.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># The logic of this class try follow the grammar of Naam (see the file</span>
</span><span class='line'>  <span class="c1"># grammar.md).</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Compiler</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vi">@current_label</span> <span class="o">=</span> <span class="s2">&quot;LABEL0000&quot;</span>
</span><span class='line'>      <span class="vi">@labels</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vi">@main</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Public: Compile lexical units from a Naam program in a PIR</span>
</span><span class='line'>    <span class="c1"># program.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># units - Array of LexicalUnits</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compile</span> <span class="n">units</span>
</span><span class='line'>      <span class="vi">@units</span> <span class="o">=</span> <span class="n">units</span>
</span><span class='line'>      <span class="n">program</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># This is the entry rule.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">program</span>
</span><span class='line'>      <span class="k">while</span> <span class="vi">@units</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>        <span class="vi">@series</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>        <span class="k">case</span> <span class="vi">@units</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'>        <span class="k">when</span> <span class="ss">:eol</span> <span class="k">then</span> <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">instruction</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="vi">@labels</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">lbl</span><span class="o">|</span> <span class="n">emit</span><span class="p">(</span><span class="ss">:label</span><span class="p">,</span> <span class="n">lbl</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">emit</span><span class="p">(</span><span class="ss">:function_footer</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Emitter</span><span class="o">.</span><span class="n">main</span><span class="p">(</span><span class="vi">@main</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">function_def</span>
</span><span class='line'>      <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:paro</span><span class="p">,</span> <span class="ss">:word</span><span class="p">,</span> <span class="ss">:parc</span><span class="p">,</span> <span class="ss">:affect</span><span class="p">,</span> <span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>      <span class="n">emit</span><span class="p">(</span><span class="ss">:function_header</span><span class="p">)</span>
</span><span class='line'>      <span class="n">if_clause</span> <span class="k">while</span> <span class="n">if_clause?</span>
</span><span class='line'>      <span class="n">else_clause</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Send a message to Emitter module.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># type  - A Symbol (see Emitter).</span>
</span><span class='line'>    <span class="c1"># label - A Hash composed of:</span>
</span><span class='line'>    <span class="c1">#         :label - The label name as a String.</span>
</span><span class='line'>    <span class="c1">#         :value - The String value that will be returned by</span>
</span><span class='line'>    <span class="c1">#                  PIR instructions for this label.</span>
</span><span class='line'>    <span class="c1">#         By default, label is nil and unused.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns nothing.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">emit</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Emitter</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="vi">@series</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@series</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Get a label.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># value - String value associated to the label.</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Examples</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#   next_label(&quot;123&quot;)</span>
</span><span class='line'>    <span class="c1">#   # =&gt; { label: &quot;LABEL0000&quot;, value: &quot;123&quot; }</span>
</span><span class='line'>    <span class="c1">#   next_label(&quot;-9&quot;)</span>
</span><span class='line'>    <span class="c1">#   # =&gt; { label: &quot;LABEL0001&quot;, value: &quot;-9&quot; }</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># Returns the Hash label.</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next_label</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">temp</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">label</span><span class="p">:</span> <span class="vi">@current_label</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="n">value</span> <span class="p">}</span>
</span><span class='line'>      <span class="vi">@labels</span> <span class="o">&lt;&lt;</span> <span class="n">temp</span>
</span><span class='line'>      <span class="vi">@current_label</span> <span class="o">=</span> <span class="vi">@current_label</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="n">temp</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maintenant que je le montre, je me rends compte que ce code n&#8217;est pas
terrible. Bien que le fichier source à compiler soit extremement simple,
je suis déjà obligé de faire un tas de contorsions, notamment pour sortir
la procédure main. Je pensais que c&#8217;était une bonne idée de méler
vérification de la syntaxe et production du code assembleur pour montrer
les relations entre ces deux phases, mais visiblement ça n&#8217;aide pas
à la clarté du code. La meilleure solution pour m&#8217;en sortir est, je pense,
de me servir d&#8217;un AST (Arbre syntaxique abstrait). La prochaine fois je
parlerais donc de l&#8217;AST.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/'>Implémenter un langage sur Parrot &ndash; partie 9: la syntaxe</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/'>Un langage sur Parrot &ndash; partie 13</a></li></ul></section></p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/'>Implémenter un langage sur Parrot &ndash; partie 9: la syntaxe</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/'>Un langage sur Parrot &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vos captures d'écrans dans un environnement réaliste]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/19/vos-captures-decrans-dans-un-environnement-realiste/"/>
    <updated>2013-08-19T14:16:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/19/vos-captures-decrans-dans-un-environnement-realiste</id>
    <content type="html"><![CDATA[<p>Comme moi vous n&#8217;avez pas l&#8217;âme d&#8217;un graphiste, mais vous avez parfois
besoin de présenter un site ou une application de manière élégante ?
Je suis tombé hier sur un site qui fait ça en 30 secondes:</p>

<p><img src="http://lkdjiin.github.io/images/breezi.png"></p>

<!-- more -->


<p>Le site s&#8217;appelle <em>PlaceIt by Breezi</em> et se trouve à l&#8217;adresse suivante:
<a href="http://placeit.breezi.com/">http://placeit.breezi.com/</a>. Le principe est
ultra simple: Vous choisissez un appareil (téléphone, tablette, portable,
écran) et vous y glissez/déposez votre capture d&#8217;écran. Quelques secondes
plus tard vous pouvez télécharger l&#8217;image. Les différents appareils sont
disponibles dans plusieurs environnements: bureau, extérieur, neutre, etc.</p>

<p>Je sens que cette application va me servir régulièrement et j&#8217;avais envie
de la partager avec vous. Si vous en connaissez d&#8217;autres dans le même genre,
je suis preneur.</p>

<p>À demain.
<section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/25/mon-generateur-dombres-css/'>Mon générateur d&#8217;ombres CSS</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 9: la syntaxe]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/"/>
    <updated>2013-08-18T08:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe</id>
    <content type="html"><![CDATA[<p>Après avoir écrit un
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">tokenizer</a>,
avoir produit les <a href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/">unités lexicales</a>
et avoir défini
<a href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/">une grammaire</a>
pour le langage Naam, je passe maintenant à la vérification de la syntaxe.</p>

<!-- more -->


<p>La vérification de la syntaxe se passe dans la classe <code>Compiler</code>. <em>&ndash; C&#8217;est pas
le meilleur choix de nom et ça changera par la suite &ndash;</em>. Basiquement, cette
classe ne fait que suivre la logique de la grammaire.</p>

<figure class='code'><figcaption><span>lib/naam/compiler.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Compiler</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># units - Array of LexicalUnits</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compile</span> <span class="n">units</span>
</span><span class='line'>    <span class="vi">@units</span> <span class="o">=</span> <span class="n">units</span>
</span><span class='line'>    <span class="n">program</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">program</span>
</span><span class='line'>    <span class="k">while</span> <span class="vi">@units</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">case</span> <span class="vi">@units</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:eol</span> <span class="k">then</span> <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">instruction</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instruction</span>
</span><span class='line'>    <span class="k">case</span> <span class="vi">@units</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:keyword</span> <span class="k">then</span> <span class="n">print_statement</span>
</span><span class='line'>    <span class="k">when</span> <span class="ss">:word</span> <span class="k">then</span> <span class="n">function_def</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">Error</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_statement</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;print&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:paro</span><span class="p">,</span> <span class="ss">:int</span><span class="p">,</span> <span class="ss">:parc</span><span class="p">,</span> <span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">function_def</span>
</span><span class='line'>    <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:paro</span><span class="p">,</span> <span class="ss">:word</span><span class="p">,</span> <span class="ss">:parc</span><span class="p">,</span> <span class="ss">:affect</span><span class="p">,</span> <span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>    <span class="n">if_clause</span> <span class="k">while</span> <span class="n">if_clause?</span>
</span><span class='line'>    <span class="n">else_clause</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">if_clause</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;if&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">test</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">else_clause</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:keyword</span><span class="p">,</span> <span class="s1">&#39;else&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accept</span><span class="p">(</span><span class="ss">:eol</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>    <span class="n">accept_series</span><span class="p">(</span><span class="ss">:word</span><span class="p">,</span> <span class="ss">:op</span><span class="p">,</span> <span class="ss">:int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">unit</span> <span class="o">=</span> <span class="vi">@units</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">type</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept_series</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="n">accept</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">if_clause?</span>
</span><span class='line'>    <span class="vi">@units</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">type</span> <span class="o">==</span> <span class="ss">:keyword</span> <span class="o">&amp;&amp;</span> <span class="vi">@units</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">value</span> <span class="o">==</span> <span class="s1">&#39;if&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quelques commentaires sur ce code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">instruction</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Error</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plusieurs fois j&#8217;utilise la classe <code>Error</code>, qui n&#8217;existe pas. C&#8217;est parce que
je ne veux pas encore réfléchir à la gestion des erreurs. Les seuls cas qui
m&#8217;intéressent pour l&#8217;instant sont ceux où ça fonctionne.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">accept</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">unit</span> <span class="o">=</span> <span class="vi">@units</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="n">type</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">Error</span> <span class="k">unless</span> <span class="n">unit</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est la méthode <code>accept</code>, toute simple, qui effectue la vérification
de la syntaxe en comparant l&#8217;unité lexicale attendue avec celle réellement
disponible. On constate que les unités lexicales (représentées par <code>@units</code>)
sont détruites au fur et à mesure de leur consommation.</p>

<p>La prochaine, il sera enfin temps d&#8217;émettre le code PIR.</p>

<p>À demain.
<section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/20/implementer-un-langage-sur-parrot-partie-10-emettre-le-code-assembleur/'>Implémenter un langage sur Parrot &ndash; partie 10: émettre le code assembleur</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/01/un-langage-sur-parrot-partie-13/'>Un langage sur Parrot &ndash; partie 13</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 8: la grammaire]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/"/>
    <updated>2013-08-17T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Écrire un langage sans en spécificier la grammaire c&#8217;est un peu comme se
tirer une balle dans le pied. Même quand le langage est aussi simple et
petit que
Naam (voir l&#8217;<a href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/">article originel</a>),
c&#8217;est un gain de temps pour la suite.</p>

<!-- more -->


<p>Pour spécificier la grammaire d&#8217;un langage informatique, on utilise
généralement la
<a href="http://fr.wikipedia.org/wiki/Forme_de_Backus-Naur">BNF</a>,
(Backus Naur Form) ou l&#8217;une de ses extensions. Il n&#8217;est pas rare qu&#8217;un auteur
utilise une version personnalisée de la BNF, et c&#8217;est ce que je vais faire
pour Naam.</p>

<p>Voici les quelques règles de la méta-syntaxe:</p>

<pre><code>{foo}         zero or more foo
foo | bar     foo or bar
foo           a non-terminal foo
'foo'         keyword foo
[foo]         zero or one foo
---           free speech
</code></pre>

<p>Et voici la grammaire de Naam:</p>

<pre><code>program           ::= {instruction | eol}

instruction       ::= function_def | print_statement

print_statement   ::= 'print' word ( int ) eol

function_def      ::= word ( word ) = eol {if_clause} else_clause

if_clause         ::= int 'if' test eol

test              ::= word op int

else_clause       ::= int 'else' eol

op                ::= &lt; | &gt;

eol               ::= --- End of line
int               ::= --- Integer
word              ::= --- Anything else
</code></pre>

<p>Cette grammaire est vraiment toute petite, mais suffisante pour spécifier
le programme suivant, qui est ce que j&#8217;ai choisi pour commencer à écrire
le compilateur Naam:</p>

<pre><code>sign(n)=
1 if n &gt; 0
-1 if n &lt; 0
0 else
</code></pre>

<p>Alors pourquoi écrire une grammaire ? Pourquoi ne pas commencer à coder
directement le compilateur ? Parce qu&#8217;il faut bien avouer qu&#8217;écrire une
telle grammaire n&#8217;a rien d&#8217;amusant. Tout d&#8217;abord une grammaire, même petite,
possède toujours un certain niveau de complexité qu&#8217;il est difficile de
faire tenir entièrement dans sa tête. En l&#8217;écrivant on met à jour certains
problèmes qui sinon resteraient cachés longtemps. Autre intéret d&#8217;écrire la
grammaire: chaque règle va devenir un morceau de code ; écrire la grammaire
c&#8217;est un peu comme avoir déjà écrit une partie du compilateur.
Dans un prochain article je suivrais cette grammaire pour effectuer la
vérification de la syntaxe.</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/'>Implémenter un langage sur Parrot &ndash; partie 7: le lexer</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/'>Parrot 6: Écrire le tokenizer</a></li><li><a href='http://lkdjiin.github.io/blog/2013/08/11/parrot-5-un-plan-pour-ecrire-un-compilateur/'>Parrot 5: un plan pour écrire un compilateur</a></li></ul></section></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Une définition de la programmation fonctionnelle avec Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir/"/>
    <updated>2013-08-16T09:17:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/16/une-definition-de-la-programmation-fonctionnelle-avec-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<h2>Ou ma tentative désespérée de comprendre la non mutabilité</h2>

<p>Cet article est un article égoiste ! Depuis que je joue un peu avec Elixir, je
m&#8217;aperçois que j&#8217;ai des soucis à comprendre <em>vraiment</em> la programmation
fonctionnelle.
J&#8217;ai entre autres, des difficultés à me faire au coté immuable, non-mutable,
de la chose (<em>immutable</em> en anglais). Je tente donc aujourd&#8217;hui de
mettre au clair mes idées sur la question. Ce qui suit peut ressembler
à un dialogue de fou, vous êtes prévenus.</p>

<!-- more -->


<p>Revoici le module Somme, que j&#8217;ai utilisé dans un <a href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/">précédent article</a>.</p>

<figure class='code'><figcaption><span>somme.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je vais l&#8217;écrire dans un bon vieux langage procédural, et analyser ce qu&#8217;il
s&#8217;y passe.</p>

<figure class='code'><figcaption><span>somme.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">somme</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">somme</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%i</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On compile et on lance:</p>

<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
15
</code></pre>

<p>Ici pas de récursivité mais une simple itération. Une boucle qui change la
variable <code>somme</code> à chaque passage. Je crois qu&#8217;on devrait d&#8217;abord définir
ce qu&#8217;est une variable. Une variable, c&#8217;est un concept. Une variable définit
à la fois un contenant, un contenu et un type, tout cela accessible par un
nom. Notre variable a ici pour nom <code>somme</code>. Son type est <code>int</code>. Son contenu,
ou encore sa valeur est initialement 0 et change à chaque itération. Son
contenant est un emplacement en mémoire, qui lui ne change pas. «<em>Et tu sais ça
comment que ça change pas ?</em>» Bon, puisque j&#8217;ai besoin d&#8217;une preuve,
j&#8217;ajoute un traceur qui affiche l&#8217;emplacement mémoire de <code>somme</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">somme</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">somme</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%i</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">somme</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ gcc somme.c -std=c99
$ ./a.out 
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
-1081032008
15
</code></pre>

<p>Voilà, on le sait maintenant: la <em>valeur</em> de <code>somme</code> change, mais son
<em>emplacement</em> (son contenant) reste identique.</p>

<p>Si je tente maintenant de mimer ce comportement avec Elixir, je serais tenté
d&#8217;écrire:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">somme</span> <span class="o">=</span> <span class="m">0</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">5</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">n</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">somme</span> <span class="o">=</span> <span class="n">somme</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ elixir somme.exs 
/home/xavier/somme.exs:3: variable somme is unused
0
</code></pre>

<p>Comme Elixir est sympa, il tente de me prévenir que quelque chose ne
tourne pas rond. On peut penser à un problème de <em>scope</em>, se dire que le
<code>somme</code> à l&#8217;intérieur de la fonction anonyme n&#8217;est pas le même que le
<code>somme</code> à l&#8217;extérieur de cette fonction. Mais c&#8217;est pas ça. Ou
plus exactement ce n&#8217;est pas <em>seulement</em> ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">somme</span> <span class="o">=</span> <span class="m">100</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">5</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">n</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">somme</span> <span class="o">=</span> <span class="n">somme</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ elixir somme.exs 
105
104
103
102
101
100
</code></pre>

<p>La valeur du <code>somme</code> de l&#8217;intérieur est initialisée à chaque
itération par la valeur du <code>somme</code> de l&#8217;extérieur.
Donc le <code>somme</code> extérieur est connu dans la fonction anonyme.
Ce comportement me
fais m&#8217;arracher les cheveux, je sens que je passe complètement à coté
d&#8217;un truc essentiel. Je sais qu&#8217;on n&#8217;écrirait pas cette fonction de
cette manière, mais je veux comprendre <em>pourquoi</em> ce comportement
quand je fais ça. En fait donner le même nom à ces deux variables est
une illusion.
Pour Elixir le contenu de <code>somme</code> est immuable, il ne peut pas changer.
Il serait donc plus juste d&#8217;écrire ça:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">somme</span> <span class="o">=</span> <span class="m">0</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">5</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">n</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">temp</span> <span class="o">=</span> <span class="n">somme</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">somme</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui, évidemment, ne mène à rien. Je commence peut-être à comprendre.
Si je reprend le programme du départ:</p>

<figure class='code'><figcaption><span>somme.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>On voit bien que les variables ne changent (ne mutent) jamais. Ce sont à
chaque fois de <em>nouvelle création</em> qui sont passées dans les paramètres.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lors d&#8217;un passage précis dans cette fonction, on se fiche royalement de savoir
quel était l&#8217;état de <code>n</code> et de <code>acc</code> lors des passages précédents. Ce qui
n&#8217;est pas le cas dans l&#8217;exemple en C:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">5</span> <span class="p">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">somme</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>À chaque passage dans la boucle, il faut connaître l&#8217;état de <code>somme</code> dans
l&#8217;itération précédente.</p>

<p>On m&#8217;avait pourtant bien dit que la programmation fonctionnelle s&#8217;occupait
des <em>transformations</em> et pas des <em>états</em>. Mais je ne voyais pas du tout
ce que ça pouvait bien signifier. C&#8217;est maintenant un peu plus clair,
même s&#8217;il me reste encore du chemin à parcourir pour bien saisir tout
ce qu&#8217;implique la programmation fonctionnelle…</p>

<p>À demain.</p>

<p><section><h1>Articles connexes</h1><ul><li><a href='http://lkdjiin.github.io/blog/2013/07/25/le-probleme-des-100-portes-en-elixir/'>Le problème des 100 portes en Elixir</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/03/les-algorithmes-genetiques-demystifies-5/'>Les algorithmes génétiques démystifiés 5</a></li><li><a href='http://lkdjiin.github.io/blog/2013/09/02/les-algorithmes-genetiques-demystifies-4/'>Les algorithmes génétiques démystifiés 4</a></li></ul></section></p>
]]></content>
  </entry>
  
</feed>
