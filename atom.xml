<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-31T10:16:17+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro sept]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/31/bien-debuter-avec-vim-conseil-numero-sept/"/>
    <updated>2013-07-31T10:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/31/bien-debuter-avec-vim-conseil-numero-sept</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Lisez et utilisez la documentation</h2>

<p>La documentation de Vim est énorme. Elle comporte plusieurs
dizaines de chapitres répartis sur deux manuels: le manuel utilisateur
et le manuel de référence. On y accède avec la touche F1.
La documentation est complète et accéssible pour tous les niveaux.
Dans l&#8217;idéal, vous devriez la lire entièrement…</p>

<!-- more -->


<p>Alors je ne suis pas naïf et
je sais bien que vous ne le ferez pas. Moi même je ne l&#8217;ai évidemment pas fait.
Je dis juste ce que devrait être l&#8217;idéal.</p>

<p>Pour rester réaliste, dans un premier
temps, parcourez la documentation entièrement mais en diagonale. Vite fait.
Simplement pour savoir où trouver quoi.
Donnez vous un objectif simple, comme un chapitre par jour.
N&#8217;apprenez rien par coeur. Prenez plutôt des notes
quand vous tombez sur un truc qui vous plait.
Parcourir un seul chapitre en diagonale tout en jetant quelques notes
sur une feuille de papier vous prendra entre 5 et 10 minutes.</p>

<p>Dans un second temps, essayez d&#8217;étudier à fond au moins les deux premières
parties du manuel utilisateur:
<em>Getting Started</em> et <em>Editing Effectively</em>.
Cette fois ci, il n&#8217;est plus question de lire en diagonale, mais bien
d&#8217;étudier la bête.</p>

<p>Lire, apprendre, comprendre et digérer la documentation de Vim vous prendra
beaucoup de temps. Certainement
des mois. Au minimum. C&#8217;est une bonne raison pour vous y mettre dès
aujourd&#8217;hui.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un plugin Octopress - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/30/comment-ecrire-un-plugin-octopress-partie-2/"/>
    <updated>2013-07-30T08:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/30/comment-ecrire-un-plugin-octopress-partie-2</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/">la première partie</a>,
je m&#8217;étais arrêté sur le code suivant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LevelTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tagname</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;Niveau : </span><span class="si">#{</span><span class="vi">@level</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;level&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:LevelTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aujourd&#8217;hui je montre comment permettre à l&#8217;utilisateur de personnaliser
le contenu du code Html produit.</p>

<!-- more -->


<p>Tout d&#8217;abord, voici le code du plugin terminé. Je vous rappelle que vous
pouvez trouver <a href="https://github.com/lkdjiin/octopress-level-tag">ce plugin sur Github</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LevelTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tagname</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="n">config</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span>
</span><span class='line'>      <span class="n">label</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;Level: &quot;</span>
</span><span class='line'>      <span class="n">level</span> <span class="o">=</span> <span class="k">case</span> <span class="vi">@level</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;1&quot;</span> <span class="k">then</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level_1&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;easy&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;2&quot;</span> <span class="k">then</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level_2&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;medium&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;3&quot;</span> <span class="k">then</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level_3&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;hard&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;unknown&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">classes</span> <span class="o">=</span> <span class="s2">&quot;class=&#39;level-tag level-tag-</span><span class="si">#{</span><span class="vi">@level</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class='line'>      <span class="s2">&quot;&lt;div </span><span class="si">#{</span><span class="n">classes</span><span class="si">}</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">label</span><span class="si">}</span><span class="s2">&lt;span&gt;</span><span class="si">#{</span><span class="n">level</span><span class="si">}</span><span class="s2">&lt;/span&gt;&lt;/div&gt;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;level&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:LevelTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;appel du plugin dans les articles sera maintenant réalisé comme ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">level</span> <span class="mi">1</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par rapport à la première version, la méthode <code>render</code> a bien enflée. &ndash;
<em>Je trouve qu&#8217;il y a trop de code dedans, mais ce sera peut-être le sujet
d&#8217;un prochain article sur le refactoring.</em> &ndash; C&#8217;est cette méthode qui fait
tout le travail, voici les explications:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="n">config</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span>
</span><span class='line'>  <span class="n">label</span> <span class="o">=</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;Level: &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est l&#8217;objet <code>context</code> qui va permettre de récupérer les informations
nécéssaires dans le fichier de configuration <code>_config.yml</code>. Voici par
exemple ce que j&#8217;ai ajouté dans mon <code>_config.yml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># LevelTag plugin</span>
</span><span class='line'><span class="l-Scalar-Plain">level_tag_level</span><span class="p-Indicator">:</span> <span class="s">&quot;Niveau</span><span class="nv"> </span><span class="s">:</span><span class="nv"> </span><span class="s">&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">level_tag_level_1</span><span class="p-Indicator">:</span> <span class="s">&quot;facile&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">level_tag_level_2</span><span class="p-Indicator">:</span> <span class="s">&quot;intermédiaire&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">level_tag_level_3</span><span class="p-Indicator">:</span> <span class="s">&quot;avancé&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La ligne suivante:</p>

<pre><code>label = config['level_tag_level'] || "Level: "
</code></pre>

<p>initialise la
variable <code>label</code> avec le contenu de <code>level_tag_level</code>, trouvé dans le
<code>_config.yml</code>. La partie du code <code>|| "Level: "</code> est là pour s&#8217;assurer que
si <code>level_tag_level</code> n&#8217;existe pas dans le fichier de configuration, <code>label</code>
sera bien initialisé avec une valeur par défaut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">level</span> <span class="o">=</span> <span class="k">case</span> <span class="vi">@level</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;1&quot;</span> <span class="k">then</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level_1&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;easy&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;2&quot;</span> <span class="k">then</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level_2&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;medium&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;3&quot;</span> <span class="k">then</span> <span class="n">config</span><span class="o">[</span><span class="s1">&#39;level_tag_level_3&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;hard&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s2">&quot;unknown&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est la même logique que précédement. La variable <code>level</code> sera initialisée
avec du contenu trouvé dans <code>_config.yml</code> ou bien, avec une valeur par
défaut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">classes</span> <span class="o">=</span> <span class="s2">&quot;class=&#39;level-tag level-tag-</span><span class="si">#{</span><span class="vi">@level</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class='line'>  <span class="s2">&quot;&lt;div </span><span class="si">#{</span><span class="n">classes</span><span class="si">}</span><span class="s2">&gt;</span><span class="si">#{</span><span class="n">label</span><span class="si">}</span><span class="s2">&lt;span&gt;</span><span class="si">#{</span><span class="n">level</span><span class="si">}</span><span class="s2">&lt;/span&gt;&lt;/div&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, comme dans <a href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/">la première partie</a>,
on retrouve en fin de méthode la production du code Html.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro six]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/29/bien-debuter-avec-vim-conseil-numero-six/"/>
    <updated>2013-07-29T08:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/29/bien-debuter-avec-vim-conseil-numero-six</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Ne mettez pas n&#8217;importe quoi dans votre .vimrc</h2>

<p>Le fichier <code>.vimrc</code> est LE fichier de configuration de Vim. C&#8217;est dans ce fichier
que vous personnaliserez votre Vim. C&#8217;est donc un fichier très important et on
peut être tenté d&#8217;utiliser celui de quelqu&#8217;un d&#8217;autre. Ne le faites surtout pas
!</p>

<!-- more -->


<p>Vim est un éditeur hautement configurable, paramétrable et personnalisable.
Je peux utiliser le Netbeans ou le Notepad++ de mon collègue mais
j&#8217;aurai du mal à utiliser son Vim, tellement il est différent du mien. C&#8217;est ce
qui fait la force de Vim, il fini par vous ressembler… À la fin du tutoriel
intégré, vous aurez un fichier <code>.vimrc</code> très suffisant pour commencer. Et vous
devriez suivre une règle simple :</p>

<blockquote><p>Ajoutez une ligne à votre .vimrc uniquement si vous comprenez cette ligne.</p></blockquote>


<p>Il y a bien sûr des exceptions. Par exemple, si votre clavier est loin
de la disposition <em>azerty</em> ou <em>qwerty</em> (comme moi qui suis en <em>bépo</em>) vous
serez bien
obligé de remapper un certain nombre de touches dès le début. Je vous conseille
aussi fortement de désactiver les touches fléchées. En effet leur usage est
tellement ancré dans nos têtes que vous les utiliserez sans vous en rendre
compte, ce qui ne pourrait que vous ralentir dans votre progression.
Pour cela, ajoutez les lignes suivantes dans votre <code>.vimrc</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Les touches fléchées sont désactivées.</span>
</span><span class='line'><span class="c">&quot; Utile pour apprendre vim.</span>
</span><span class='line'><span class="c">&quot;</span>
</span><span class='line'><span class="c">&quot; En mode normal, vous pourrez les utiliser plus tard</span>
</span><span class='line'><span class="c">&quot; pour faire quelque chose d&#39;utile.</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">up</span><span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span>down<span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">left</span><span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">right</span><span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span><span class='line'><span class="c">&quot; En mode insertion, vous pourrez enlever la</span>
</span><span class='line'><span class="c">&quot; désactivation dans quelques semaines.</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span><span class="k">up</span><span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span>down<span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span><span class="k">left</span><span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span><span class='line'><span class="nb">inoremap</span> <span class="p">&lt;</span><span class="k">right</span><span class="p">&gt;</span> <span class="p">&lt;</span>nop<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>N&#8217;hésitez pas à consulter l&#8217;aide de vim pour bien comprendre ce que font ces
lignes de code <em>avant</em> de les ajouter dans votre <code>.vimrc</code> ;)</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern matching avec Elixir: une première approche]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/"/>
    <updated>2013-07-28T13:32:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Une tâche réccurente quand on utilise la récursivité pour résoudre un problème
est de séparer une liste en deux parties. La première partie étant le premier
élément de la liste et la seconde partie étant ce qui reste. Pour faire cela,
on peut utiliser le <em>pattern matching</em>, qu&#8217;on peut traduire par filtrage à
l&#8217;aide de motifs.</p>

<!-- more -->


<p>Voyons la syntaxe pour séparer une liste en deux:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">[</span><span class="n">head</span> <span class="o">|</span> <span class="n">tail</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Après ça, <code>head</code> (la tête) vaut 1 et <code>tail</code> (la queue) vaut [2, 3].
Maintenant les cas exceptionnels: Si on passe une liste d&#8217;un seul élément,
<code>tail</code> sera une liste vide ([]). Si on passe une liste vide, et bien c&#8217;est
une erreur. Voici une capture d&#8217;écran qui montre le résultat:</p>

<p><img src="http://lkdjiin.github.io/images/2013-07-28-1.jpg" width="890" height="577" title="pattern matching avec Elixir" ></p>

<p>Pour illustrer le <em>pattern matching</em> je vais écrire un module avec une fonction
<code>minimum</code> qui doit trouver le plus petit élément dans une liste de nombres
entiers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Stats</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">minimum</span><span class="p">([</span><span class="n">head</span><span class="o">|</span><span class="n">tail</span><span class="p">])</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">minimum</span> <span class="n">tail</span><span class="p">,</span> <span class="n">head</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">minimum</span><span class="p">([],</span> <span class="n">candidate</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">candidate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">minimum</span><span class="p">([</span><span class="n">head</span><span class="o">|</span><span class="n">tail</span><span class="p">],</span> <span class="n">candidate</span><span class="p">)</span> <span class="ow">when</span> <span class="n">head</span> <span class="o">&lt;</span> <span class="n">candidate</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">minimum</span> <span class="n">tail</span><span class="p">,</span> <span class="n">head</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">minimum</span><span class="p">([</span><span class="n">_</span><span class="o">|</span><span class="n">tail</span><span class="p">],</span> <span class="n">candidate</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">minimum</span> <span class="n">tail</span><span class="p">,</span> <span class="n">candidate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut l&#8217;utiliser comme ceci:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Stats</span><span class="o">.</span><span class="n">minimum</span><span class="p">([</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="o">-</span><span class="m">9</span><span class="p">,</span> <span class="m">3</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voici une explication des différentes fonctions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="k">def</span> <span class="n">minimum</span><span class="p">([</span><span class="n">head</span><span class="o">|</span><span class="n">tail</span><span class="p">])</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">minimum</span> <span class="n">tail</span><span class="p">,</span> <span class="n">head</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <em>pattern matching</em> s&#8217;applique directement dans les arguments de la
fonction. Pour cette première passe, on considère que <code>head</code> est à priori
la plus petite valeur de la série.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="k">defp</span> <span class="n">minimum</span><span class="p">([],</span> <span class="n">candidate</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">candidate</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Là, c&#8217;est la clause de sortie de la fonction <code>minimum</code>. Si la liste est
vide, c&#8217;est qu&#8217;on à trouvé la valeur minimum (<code>candidate</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="k">defp</span> <span class="n">minimum</span><span class="p">([</span><span class="n">head</span><span class="o">|</span><span class="n">tail</span><span class="p">],</span> <span class="n">candidate</span><span class="p">)</span> <span class="ow">when</span> <span class="n">head</span> <span class="o">&lt;</span> <span class="n">candidate</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">minimum</span> <span class="n">tail</span><span class="p">,</span> <span class="n">head</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quand la liste est encore remplie, on compare la valeur de tête à notre
valeur candidate. Je rappelle que <code>candidate</code> est à ce moment la plus petite
valeur trouvée jusqu&#8217;ici. Si la valeur de <code>head</code> est plus petite que
la valeur de <code>candidate</code>, la première remplace la dernière.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="k">defp</span> <span class="n">minimum</span><span class="p">([</span><span class="n">_</span><span class="o">|</span><span class="n">tail</span><span class="p">],</span> <span class="n">candidate</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">minimum</span> <span class="n">tail</span><span class="p">,</span> <span class="n">candidate</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans les autres cas, la valeur de tête n&#8217;a pas d&#8217;intérêt, ce que souligne
le caractère <code>_</code> dans <code>[_|tail]</code>. On remplace une variable par <code>_</code>
lorsque cette variable est inutilisée.</p>

<p>Nouveau venu en programmation fonctionnelle, je pense que je n&#8217;entrevois là
que la surface du <em>pattern matching</em>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un plugin Octopress]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/"/>
    <updated>2013-07-27T12:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour mon blog Octopress, je voulais un repère visuel qui marque le niveau de
difficulté des articles. Un truc comme «Niveau : débutant» ou bien «Niveau :
confirmé» avec un peu de couleur. Rien de bien compliqué en fait. Si passer par
l&#8217;écriture d&#8217;un plugin pour obtenir ce genre d&#8217;effet n&#8217;est pas absolument
neccéssaire, ça rendra l&#8217;écriture des articles plus agréable et plus
rapide. Et puis je vais apprendre quelque chose de nouveau : comment écrire
un plugin pour Octopress ?</p>

<!-- more -->


<p>Tout d&#8217;abord, le site d&#8217;Octopress ne propose pas de documentation sur
l&#8217;écriture de plugins. Par contre, le wiki fournit
<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">une longue liste de plugins</a>
 dont les sources sont les bienvenues. Jekyll, le programme sur lequel est
construit Octopress, est assez spartiate en ce qui concerne
<a href="http://jekyllrb.com/docs/plugins/">l&#8217;écriture de plugin pour Jekyll</a>. Malgré
tout, ce lien peut s&#8217;avérer utile. J&#8217;ai trouvé que la meilleure source
d&#8217;information pour commencer est le contenu du dossier <code>plugin</code> de votre
blog Octopress.</p>

<p>Si vous voulez tout de suite jetez un coup d&#8217;oeil sur le
<a href="https://github.com/lkdjiin/octopress-level-tag/releases">code source du plugin</a>
terminé, vous pouvez le trouver sur Github, à la version 0.1.0.</p>

<p>Démarront avec le plugin le plus simple auquel je puisse penser. Créer un
fichier <code>plugins/level_tag.rb</code> et placez y le contenu suivant:</p>

<figure class='code'><figcaption><span>plugins/level_tag.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LevelTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;Niveau : facile&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;level&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:LevelTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ensuite, dans un post, appelez le plugin de cette façon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">level</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis lancez Octopress:</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>Pointez votre navigateur sur <code>localhost:4000</code> et voilà. Un beau label
«Niveau : facile» apparait dans votre post. Voyons maintenant comment ça
marche.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LevelTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span></code></pre></td></tr></table></div></figure>


<p>Un plugin pour Octopress est avant tout un plugin pour Jekyll.
Et Jekyll se sert du
<a href="http://rubydoc.info/gems/liquid">moteur de template Liquid</a>. Notre classe
<code>LevelTag</code> va donc hériter de <code>Liquid::Tag</code>, et être placée dans le
module Jekyll. La classe <code>Liquid::Tag</code> nous offre tout ce qu&#8217;il faut
pour générer du html, récupérer des arguments, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;Niveau : facile&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La seule méthode de <code>Liquid::Tag</code> qu&#8217;il faut absolument implémenter est
<code>render</code>. C&#8217;est elle qui va produire le code html qui sera placé dans
notre article, à la place de l&#8217;appel du plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;level&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:LevelTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, il faut enregistrer notre plugin auprès de <code>Liquid::Template</code>.
Le premier argument passé à <code>register_tag</code> est le nom sous lequel nous
voulons appeler le plugin dans nos articles. Le second argument est la
classe de notre plugin.</p>

<p>Pour aller plus loin, il va falloir passer des arguments depuis l&#8217;appel du
plugin jusqu&#8217;à notre classe <code>LevelTag</code>. On change donc l&#8217;appel ainsi:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">level</span> <span class="n">facile</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et on transforme le plugin de cette façon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">LevelTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tagname</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;Niveau : </span><span class="si">#{</span><span class="vi">@level</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;level&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:LevelTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voyons les changements en détails.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tagname</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@level</span> <span class="o">=</span> <span class="n">level</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La variable <code>level</code> va contenir l&#8217;argument passé lors de l&#8217;appel du
plugin (<code>facile</code>), donc <code>level == 'facile'</code>. On sauvegarde
cette valeur dans un membre pour pouvoir la réutiliser plus tard.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;Niveau : </span><span class="si">#{</span><span class="vi">@level</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grâce à <code>@level</code> on a les moyens de faire sortir à <code>render</code> l&#8217;argument
passé lors de l&#8217;appel du plugin.</p>

<p>Comme certains voudront «Niveau : facile» et d&#8217;autres voudront
«Niveau : débutant», il va nous falloir un moyen de personnaliser tout ça.
C&#8217;est ce qu&#8217;on découvrira dans un prochain numéro.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro cinq]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/26/bien-debuter-avec-vim-conseil-numero-cinq/"/>
    <updated>2013-07-26T07:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/26/bien-debuter-avec-vim-conseil-numero-cinq</id>
    <content type="html"><![CDATA[<h2>Suivez le tutoriel intégré en prenant des notes</h2>

<p>La première chose à faire, quand vous décidez de passer sur vim,
c&#8217;est de suivre le tutoriel intégré de A à Z.
Ne vous contentez pas seulement de le lire, faites tout les exercices à fond.
Le tutoriel est progressif et très bien écrit.</p>

<!-- more -->


<p>Pour le lancer:</p>

<pre><code>vimtutor
</code></pre>

<p>En français:</p>

<pre><code>vimtutor fr
</code></pre>

<p>Vous voulez une version graphique (<a href="http://lkdjiin.github.io/blog/2013/07/19/bien-debuter-avec-vim-conseil-numero-quatre/">et vous auriez raison</a>):</p>

<pre><code>gvimtutor
</code></pre>

<p>Quelqu&#8217;un a écrit dans le tutoriel que celui-ci vous prendra 30 minutes. Soit
cette personne est un génie, soit nombre de leçons ont été ajoutées depuis.
Personnellement, j&#8217;ai souvenir d&#8217;y avoir passé une matinée complête, en faisant
consiencieusement chaque exercice et en prenant des notes à chaque étapes.</p>

<p>Je vous conseille vraiment de prendre des notes. J&#8217;ai trouvé que ça m&#8217;aidait
à apprendre plus rapidement de nouvelles commandes. Aujourd&#8217;hui encore, quand
j&#8217;installe un nouveau plugin, je note toutes les commandes que je trouve utiles
sur une feuille de papier. Cette feuille reste sur mon bureau le temps
qu&#8217;il faut pour que j&#8217;utilise ces commandes sans y penser.</p>

<p>Une fois le tutoriel fini, vous possédez les bases de vim … et une montagne
de notes qui vous seront utiles dans les semaines qui vont suivre.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le problème des 100 portes en Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/25/le-probleme-des-100-portes-en-elixir/"/>
    <updated>2013-07-25T07:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/25/le-probleme-des-100-portes-en-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p>Je continue mon périple parmi le <a href="http://rosettacode.org/wiki/">rosetta code</a>
en m&#8217;attaquant au problème des «100 doors».</p>

<blockquote><p>Problem: You have 100 doors in a row that are all initially closed. You make 100 passes by the doors. The first time through, you visit every door and toggle the door (if the door is closed, you open it; if it is open, you close it). The second time you only visit every 2nd door (door #2, #4, #6, &#8230;). The third time, every 3rd door (door #3, #6, #9, &#8230;), etc, until you only visit the 100th door.</p><p>Question: What state are the doors in after the last pass? Which are open, which are closed?</p><footer><strong>Rosetta Code</strong> <cite><a href='http://rosettacode.org/wiki/100_doors'>100 doors</a></cite></footer></blockquote>




<!-- more -->


<p>Je me dis que je vais d&#8217;abord le faire dans un langage que je connais bien
pour voir de quoi il retourne, et si il n&#8217;y a pas de pièges cachés. En
quelques lignes de Ruby, le tour est joué:</p>

<figure class='code'><figcaption><span>100 doors en Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">doors</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">interval</span><span class="o">|</span>
</span><span class='line'>  <span class="n">doors</span><span class="o">.</span><span class="n">map!</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">elem</span><span class="p">,</span> <span class="n">idx</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">interval</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">!</span><span class="n">elem</span> <span class="p">:</span> <span class="n">elem</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Écrire le numéro des portes ouvertes.</span>
</span><span class='line'><span class="n">doors</span><span class="o">.</span><span class="n">each_with_index</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="k">if</span> <span class="n">e</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voyant cela j&#8217;ai pensé que ça allait être assez simple à implémenter en
Elixir. Pas du tout. J&#8217;ai galéré longtemps avant de trouver la solution qui
va suivre. Mon plus gros problème avec Elixir est que les variables sont
non-mutables. Une fois définie, une variable ne change pas. Il faut donc
faire appel constament à la récursivité. Je ne nie pas les avantages d&#8217;un
tel système (pas d&#8217;effets de bords) mais ce n&#8217;est pas évident de s&#8217;y faire quand
on vient comme moi du monde procédural ou objet. Trêve de baratin, voici
ma solution avec Elixir:</p>

<figure class='code'><figcaption><span>100 doors en Elixir</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Doors</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="k">  def</span> <span class="n">soluce</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">doors</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span> <span class="m">1</span><span class="o">..</span><span class="m">100</span><span class="p">,</span> <span class="k">fn</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="no">false</span> <span class="k">end</span>
</span><span class='line'>    <span class="n">run</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">run</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span> <span class="n">interval</span><span class="p">)</span> <span class="ow">when</span> <span class="n">interval</span> <span class="o">&gt;</span> <span class="m">100</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">doors</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">run</span> <span class="n">doors</span><span class="p">,</span> <span class="n">interval</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">run</span><span class="p">(</span><span class="n">switch_doors</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span><span class="n">interval</span><span class="p">),</span> <span class="n">interval</span> <span class="o">+</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">switch_doors</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span> <span class="n">interval</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">stream</span> <span class="o">=</span> <span class="no">Stream</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="n">doors</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Enum</span><span class="o">.</span><span class="n">map</span> <span class="n">list</span><span class="p">,</span> <span class="k">fn</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">door</span> <span class="o">=</span> <span class="n">elem</span> <span class="n">e</span><span class="p">,</span> <span class="m">0</span>
</span><span class='line'>      <span class="n">index</span> <span class="o">=</span> <span class="n">elem</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span>
</span><span class='line'>      <span class="n">switch_door</span> <span class="n">rem</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">interval</span><span class="p">),</span> <span class="n">door</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">switch_door</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">door</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="ow">not</span> <span class="n">door</span>
</span><span class='line'>  <span class="k">defp</span> <span class="n">switch_door</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">door</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">door</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">soluce</span> <span class="o">=</span> <span class="no">Doors</span><span class="o">.</span><span class="n">soluce</span>
</span><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="no">Stream</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="n">soluce</span><span class="p">)),</span> <span class="k">fn</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">elem</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span> <span class="o">==</span> <span class="no">true</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">elem</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Plutôt long comparé à la version Ruby, hein ? Quoiqu&#8217;il en soit, j&#8217;en suis
fier, j&#8217;ai mis du temps à la pondre, cette version. Je pense que quelqu&#8217;un
connaissant bien Elixir doit pouvoir nettement améliorer mon code. Je
vais le poster sur la mailing-list et demander ce qu&#8217;il en
pense. Si j&#8217;ai des retours (ce dont je ne doute pas) je mettrais la
version améliorée dans un prochain article. En attendant je vais
commenter un peu mon code pour l&#8217;expliquer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">soluce</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">doors</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span> <span class="m">1</span><span class="o">..</span><span class="m">100</span><span class="p">,</span> <span class="k">fn</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="no">false</span> <span class="k">end</span>
</span><span class='line'>  <span class="n">run</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>soluce</code> est la seule fonction publique du module. Elle initialise une liste
de 100 éléments avec la valeur <code>false</code>. Puis elle commence le travail avec
<code>run(doors, 1)</code>, <code>1</code> étant le premier intervalle de la série, c&#8217;est à dire
qu&#8217;on passe par toutes les portes. Une fois la solution découverte, elle est
renvoyée explicitement. Si vous connaissez Ruby, vous savez à quoi je fais
référence, sinon, sachez qu&#8217;en Elixir toutes les fonctions renvoie une valeur,
et qu&#8217;on a pas besoin de l&#8217;indiquer. C&#8217;est implicite, la dernière évaluation
est renvoyée. Notez aussi l&#8217;usage de <code>_</code> qui indique qu&#8217;on se fiche du contenu
de la variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defp</span> <span class="n">run</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span> <span class="n">interval</span><span class="p">)</span> <span class="ow">when</span> <span class="n">interval</span> <span class="o">&gt;</span> <span class="m">100</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">doors</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">defp</span> <span class="n">run</span> <span class="n">doors</span><span class="p">,</span> <span class="n">interval</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">run</span><span class="p">(</span><span class="n">switch_doors</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span><span class="n">interval</span><span class="p">),</span> <span class="n">interval</span> <span class="o">+</span> <span class="m">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>La première version de <code>run</code> comporte un <em>guard</em>. Elle n&#8217;est utilisée que
lorsque <code>interval</code> est supérieur à 100. C&#8217;est notre clause de sortie de la
fonction récursive.</p>

<p>La seconde version de <code>run</code> est utilisée dans tout les autres cas. Elle se
contente de s&#8217;appeller elle-même (récursivité) avec une liste des portes
mise à jour et un intervalle incrémenté.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defp</span> <span class="n">switch_doors</span><span class="p">(</span><span class="n">doors</span><span class="p">,</span> <span class="n">interval</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">stream</span> <span class="o">=</span> <span class="no">Stream</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="n">doors</span><span class="p">)</span>
</span><span class='line'>  <span class="n">list</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Enum</span><span class="o">.</span><span class="n">map</span> <span class="n">list</span><span class="p">,</span> <span class="k">fn</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">door</span> <span class="o">=</span> <span class="n">elem</span> <span class="n">e</span><span class="p">,</span> <span class="m">0</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="n">elem</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span>
</span><span class='line'>    <span class="n">switch_door</span> <span class="n">rem</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">interval</span><span class="p">),</span> <span class="n">door</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>switch_doors</code> est responsable de fabriquer une nouvelle liste de portes.
C&#8217;est la fonction qui m&#8217;a tenu en échec pendant des heures, jusqu&#8217;à ce que
je découvre le module <code>Stream</code>. Voyons <code>switch_doors</code> en détails:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">stream</span> <span class="o">=</span> <span class="no">Stream</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="n">doors</span><span class="p">)</span>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je crée une nouvelle liste qui va embarquer les valeurs de <code>doors</code>
en les associant aux indexs. <code>list</code> va ressembler à ça:</p>

<pre><code>[{false, 0}, {false, 1}, {false, 2}, ... {false, 99}]
</code></pre>

<p>Qui en Elixir peut aussi être représenté ainsi:</p>

<pre><code>[false: 0, false: 1 ...
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">map</span> <span class="n">list</span><span class="p">,</span> <span class="k">fn</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">door</span> <span class="o">=</span> <span class="n">elem</span> <span class="n">e</span><span class="p">,</span> <span class="m">0</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="n">elem</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span>
</span><span class='line'>  <span class="n">switch_door</span> <span class="n">rem</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">interval</span><span class="p">),</span> <span class="n">door</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Enum.map</code> fabrique et renvoie une nouvelle version de la liste des portes.
Chaque élément de <code>list</code> (chaque <code>{false, 0}</code>) passe à travers une fonction
anonyme qui renvoie false ou true, selon le résultat de index modulo interval.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defp</span> <span class="n">switch_door</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">door</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="ow">not</span> <span class="n">door</span>
</span><span class='line'><span class="k">defp</span> <span class="n">switch_door</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">door</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">door</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si le modulo égal zéro, on inverse l&#8217;état de la porte. Sinon la porte doit
rester dans le même état.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="no">Stream</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="n">soluce</span><span class="p">)),</span> <span class="k">fn</span> <span class="n">e</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">elem</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span> <span class="o">==</span> <span class="no">true</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="n">elem</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;écris les numéros des portes ouvertes. Avec mes explications qui précèdent,
j&#8217;espère que vous pourrez comprendre comment ça marche.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers - suite et fin]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/"/>
    <updated>2013-07-24T07:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><a href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/">Hier</a>,
je me suis arrêté sur cette version:</p>

<figure class='code'><figcaption><span>somme.exs version 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">somme</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span>
</span><span class='line'>    <span class="n">suivant</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="m">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">suivant</span> <span class="o">==</span> <span class="m">0</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="n">somme</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">run</span><span class="p">(</span><span class="n">suivant</span><span class="p">,</span> <span class="n">somme</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aujourd&#8217;hui je vais raffiner ce programme petit à petit pour montrer
quelques possibilités intéressantes du langage Elixir.</p>

<!-- more -->


<p>Pour commencer, je vais reécrire le if/else sur une seule ligne:</p>

<figure class='code'><figcaption><span>somme.exs version 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">somme</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span>
</span><span class='line'>    <span class="n">suivant</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="m">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">suivant</span> <span class="o">==</span> <span class="m">0</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="n">somme</span><span class="p">,</span> <span class="k">else</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">suivant</span><span class="p">,</span> <span class="n">somme</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça ne change rien à la logique du programme. Je voulais seulement vous montrer
une alternative. Il semblerait qu&#8217;Elixir n&#8217;aime pas trop les if, moi non plus
ça tombe bien. Dans la version suivante, qui pourra vous paraitre très étrange
de prime abord, je me débarasse de ce if/else qui pollue mon joli code:</p>

<figure class='code'><figcaption><span>somme.exs version 3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="ow">when</span> <span class="n">n</span> <span class="o">==</span> <span class="m">0</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">acc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ça peut surprendre, hein ? La condition qui était précédement dans le <code>if</code> se
retrouve dans la définition de la fonction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="ow">when</span> <span class="n">n</span> <span class="o">==</span> <span class="m">0</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est ce qu&#8217;Elixir appelle un <em>guard</em>. Cette version de la fonction <code>run</code> sera
exécutée uniquement quand n vaut zéro. Dans les autres cas, c&#8217;est la seconde
version, généraliste, <code>run(n, acc) do</code> qui sera exécutée. Je ne sais pas si ce
truc existe dans d&#8217;autres langages, en tout cas je trouve ce comportement tout
simplement génial. Mais Elixir ne s&#8217;arrête pas là. Voici une nouvelle version:</p>

<figure class='code'><figcaption><span>somme.exs version 4</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">acc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fois le <em>guard</em> est passé directement dans un argument de la fonction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>def run(0, …</code> ne sera exécutée que quand le premier argument sera égal à zéro.
Et si on écrit les fonctions sur une seule ligne, on obtient un résultat très
compact:</p>

<figure class='code'><figcaption><span>somme.exs version 5</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il reste encore une chose à prendre en compte: l&#8217;API. Devoir passer deux
arguments à la méthode <code>run</code> n&#8217;est pas très intuitif. Comme la valeur initiale
de l&#8217;accumulateur est toujours zéro, on s&#8217;arrange pour la cacher à
l&#8217;utilisateur:</p>

<figure class='code'><figcaption><span>somme.exs version 6</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run_body</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defp</span> <span class="n">run_body</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">acc</span>
</span><span class='line'>  <span class="k">defp</span> <span class="n">run_body</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">run_body</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>run</code> est maintenant une fonction <em>bootstrap</em> qui sert à amorcer le vrai
travail. Mes deux anciennes fonctions <code>run</code> sont renommées <code>run_body</code> et
passe dans l&#8217;espace privé du module grâce à <code>defp</code>.
Pour finir, il faut noter qu&#8217;Elixir connait bien évidemment une
fonction <code>reduce</code>, et que le programme pourrait donc s&#8217;écrire comme ça:</p>

<figure class='code'><figcaption><span>somme.exs version 7</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="m">1</span><span class="o">..</span><span class="n">n</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="k">fn</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">acc</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mais avouez que ça aurait été moins drôle si j&#8217;avais commencé directement
par là.</p>

<p>Voilà, c&#8217;était un petit exemple de fonction récursive qui m&#8217;a permit de vous
montrer certaines particularités d&#8217;Elixir.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/"/>
    <updated>2013-07-23T07:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour illustrer la programmation récursive avec Elixir et montrer quelques
aspects sympathiques du langage, j&#8217;ai choisi un classique et très simple
problème mathématique: calculer la somme des n premiers entiers.
Par exemple:</p>

<pre><code>Somme des n premiers entiers si n vaut 5

5 + 4 + 3 + 2 + 1 = 15
</code></pre>

<p>Super simple. C&#8217;est comme la factorielle mais avec des additions. Pas de quoi
choper des boutons, même si on déteste les maths. C&#8217;est un bon problème pour
illustrer les fonctions récursives. En programmation procédurale on ferait
quelque chose dans ce genre là:</p>

<pre><code>somme = 0
for(i = n; i &gt; 0; i--) {
  somme += n
}
</code></pre>

<p>Ma première tentative avec Elixir donne le programme suivant:</p>

<!-- more -->




<figure class='code'><figcaption><span>somme.exs version 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">somme</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span>
</span><span class='line'>    <span class="n">suivant</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="m">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">suivant</span> <span class="o">==</span> <span class="m">0</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="n">somme</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">run</span><span class="p">(</span><span class="n">suivant</span><span class="p">,</span> <span class="n">somme</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">Somme</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous le lancez comme ça:</p>

<pre><code>$ elixir somme.exs 
15
</code></pre>

<p><strong>Sachez dès maintenant que ce bout de code n&#8217;est pas dans l&#8217;esprit
Elixir.</strong>  J&#8217;ai cherché à décomposer toutes les étapes, pas à faire quelque chose
de beau, ou d&#8217;optimisé, ou de compact. Alors, que fais ce programme ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est la définition d&#8217;une méthode <code>run</code>. Le paramètre <code>acc</code> est le diminutif de
accumulator. Avoir un accumulateur est un truc très utilisé dans ce type de
fonction. On enregistre le résultat provisioire dans cet accumulateur, qui
est propagé tout au long de la pile d&#8217;appels.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">somme</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">acc</span>
</span><span class='line'><span class="n">suivant</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ici je calcule deux résultats temporaires. Dans <code>somme</code> je place la somme du
nombre n actuel et de l&#8217;accumulateur. Quant à <code>suivant</code>, il contient la
prochaine valeur du nombre n.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">if</span> <span class="n">suivant</span> <span class="o">==</span> <span class="m">0</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">somme</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">run</span><span class="p">(</span><span class="n">suivant</span><span class="p">,</span> <span class="n">somme</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans une fonction récursive il faut évidemment un appel à cette même fonction.
Mais surtout il faut une
condition de sortie. Sans ce garde-fou, c&#8217;est la boucle infinie à tout les
coups. Ici la condition de sortie est <code>suivant == 0</code>. Quand le prochain nombre
à traiter atteint zéro, c&#8217;est le signe que la fonction a terminé son travail donc
je renvois le résultat actuel, qui est la somme de tous les nombres traités
jusqu&#8217;ici. Dans l&#8217;autre cas, c&#8217;est l&#8217;appel récursif: <code>run(suivant, somme)</code>.</p>

<p>Si vous avez du mal à comprendre la logique de ce programme, vous pouvez
ajouter un traçage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Somme</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">acc</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;n: </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2"> --- acc: </span><span class="si">#{</span><span class="n">acc</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce qui donnera le résultat suivant:</p>

<pre><code>$ elixir somme.exs 
n: 5 --- acc: 0
n: 4 --- acc: 5
n: 3 --- acc: 9
n: 2 --- acc: 12
n: 1 --- acc: 14
15
</code></pre>

<p>La prochaine fois je transformerais ce programme afin qu&#8217;il soit dans
l&#8217;esprit Elixir.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mon premier programme Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/22/mon-premier-programme-elixir/"/>
    <updated>2013-07-22T07:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/22/mon-premier-programme-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Pour apprendre Elixir, j&#8217;ai décidé de faire quelques tâches tirées du
<a href="http://rosettacode.org/wiki/Category:Programming_Tasks">rosetta code</a>.
Pour mon tout premier programme, je commence avec un classique: 99 bottles of beer.</p>

<!-- more -->


<p>Vous connaissez la chanson ? Le but du jeu est d&#8217;obtenir ça:</p>

<pre><code>99 bottles of beer on the wall
99 bottles of beer
Take one down, pass it around
98 bottle of beer on the wall

...

1 bottle of beer on the wall
1 bottle of beer
Take one down, pass it around
0 bottles of beer on the wall
</code></pre>

<p>C&#8217;est parti. &ndash; <em>N&#8217;oubliez pas que c&#8217;est mon premier programme Elixir, le code
sera forcement maladroit.</em> &ndash; D&#8217;abord une version sans tenir compte du pluriel de &ldquo;bottle&rdquo;.</p>

<figure class='code'><figcaption><span>99_bottle_of_beer_v1.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">99</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">idx</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">idx</span><span class="si">}</span><span class="s2"> bottles of beer on the wall&quot;</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">idx</span><span class="si">}</span><span class="s2"> bottles of beer&quot;</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Take one down, pass it around&quot;</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">idx</span> <span class="o">-</span> <span class="m">1</span><span class="si">}</span><span class="s2"> bottles of beer on the wall&quot;</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On lance le programme comme ça:</p>

<pre><code>elixir 99_bottle_of_beer_v1.exs
</code></pre>

<p>Il y a pas mal de ressemblance avec Ruby. Notamment, l&#8217;interpolation
des chaînes de caractères est identique:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">idx</span><span class="si">}</span><span class="s2"> bottles of beer on the wall&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La fameuse méthode <code>puts</code> de Ruby est utilisée pour sortir du texte.
Le fait que <code>puts</code> soit appelée d&#8217;un module <code>IO</code> me rappelle un peu
Java.
Voyons maintenant l&#8217;itération:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">99</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">idx</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tiens, on a déjà un truc qui ressemble à un pattern: <code>Module.méthode</code>. On
a vu <code>IO.puts</code>, on a maintenant <code>Enum.each</code>. On va donc itérer sur un <em>range</em>
<code>99..1</code>, et appliquer une fonction à chaque élément de ce <em>range</em>. La
fonction, anonyme, avec un argument, débute par <code>fn idx -&gt;</code> ; <code>idx</code> prenant
à chaque itération la valeur de l&#8217;élément courant du <em>range</em>.</p>

<p>Je m&#8217;intéresse maintenant à une version qui tient compte du pluriel.</p>

<figure class='code'><figcaption><span>99_bottle_of_beer_v2.exs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Bottles</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">run</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="no">Enum</span><span class="o">.</span><span class="n">each</span> <span class="m">99</span><span class="o">..</span><span class="m">1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">idx</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">idx</span><span class="si">}</span><span class="s2"> bottle</span><span class="si">#{</span><span class="n">plural</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="si">}</span><span class="s2"> of beer on the wall&quot;</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">idx</span><span class="si">}</span><span class="s2"> bottle</span><span class="si">#{</span><span class="n">plural</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="si">}</span><span class="s2"> of beer&quot;</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Take one down, pass it around&quot;</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">idx</span> <span class="o">-</span> <span class="m">1</span><span class="si">}</span><span class="s2"> bottle</span><span class="si">#{</span><span class="n">plural</span><span class="p">(</span><span class="n">idx</span><span class="o">-</span><span class="m">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> of beer on the wall&quot;</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">plural</span> <span class="n">num</span> <span class="k">do</span>
</span><span class='line'><span class="k">    if</span> <span class="n">num</span> <span class="o">==</span> <span class="m">1</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;s&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bottles</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>J&#8217;ai du enfermer mes fonctions dans un module, avec <code>defmodule</code>, puisqu&#8217;il
n&#8217;est pas permis d&#8217;utiliser <code>def</code> en dehors d&#8217;un module. L&#8217;intérieur de
la fonction <code>run</code> ne diffère pas vraiment de la version précédente.
La fonction <code>plural</code> est intéressante à commenter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">def</span> <span class="n">plural</span> <span class="n">num</span> <span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="n">num</span> <span class="o">==</span> <span class="m">1</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s2">&quot;s&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme avec Ruby, les arguments n&#8217;ont pas besoin d&#8217;être enfermés entre
parenthèses, mais on peut le faire. Pas besoin non plus d&#8217;un mot-clé
<code>return</code>, une fonction renvoie toujours une valeur, même de manière
implicite. Pour définir une fonction on utilise:
<code>def name args do</code>. Le <code>if</code> prends aussi un <code>do</code> à la fin. Elixir semble
en fait être assez cohérent et homogène:</p>

<pre><code>defmodule ... do ... end
def       ... do ... end
if        ... do ... end
</code></pre>

<p>Enfin, l&#8217;appel de la fonction <code>run</code> est sans surprise: <code>Bottles.run</code>. Je note
que je ne sais pas encore à quoi j&#8217;ai affaire avec les modules. Est-ce-qu&#8217;un
module est juste un espace de nommage ? Est-ce-qu&#8217;un module est plus qu&#8217;un
espace de nommage ?</p>

<p>Voilà pour une première approche d&#8217;Elixir, un langage qui ressemble
beaucoup à Ruby, et en même temps pas vraiment ;)</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installer le langage Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir/"/>
    <updated>2013-07-21T08:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ça fait quelques jours que j&#8217;essaie de faire des petits programmes avec
Elixir. J&#8217;entends parler de ce nouveau langage depuis plusieurs mois déjà, et
je n&#8217;avais pas encore eu le temps de m&#8217;amuser un peu avec. C&#8217;est chose
faite. Elixir est un langage dynamique, fonctionnel, concurrent, immuable
et on dit qu&#8217;il ressemble beaucoup à Ruby. C&#8217;est l&#8217;occasion pour moi de
débuter une série d&#8217;articles consacrés à Elixir. Ça commence aujourd&#8217;hui
avec l&#8217;installation.</p>

<!-- more -->


<p><em>Je vais décrire l&#8217;installation pour Debian, mais ça ne semble pas être
bien différent sur d&#8217;autres OS.</em></p>

<h2>Installer d&#8217;abord Erlang</h2>

<p>Elixir est bati au-dessus du langage Erlang, il faut donc tout d&#8217;abord
installer le compilateur Erlang avant d&#8217;installer Elixir à proprement parler.
La version R16B minimum est requise.
La marche à suivre est indiqué sur la page
<a href="https://www.erlang-solutions.com/downloads/download-erlang-otp">download-erlang-otp</a>.
Pour résumer, on ajoute la ligne suivante au fichier <code>/etc/apt/sources.list</code>:</p>

<pre><code>deb http://binaries.erlang-solutions.com/debian squeeze contrib
</code></pre>

<p>Puis on installe la clé:</p>

<pre><code>wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc \ 
| sudo apt-key add -
</code></pre>

<p>Après y-a-pu-ka:</p>

<pre><code>apt-get update
apt-get install esl-erlang
</code></pre>

<p>On s&#8217;assure que l&#8217;installation est bien réalisée:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xavier:~<span class="nv">$ </span>erl
</span><span class='line'>Erlang R16B01 <span class="o">(</span>erts-5.10.2<span class="o">)</span> <span class="o">[</span><span class="nb">source</span>-bdf5300<span class="o">]</span> <span class="o">[</span>smp:2:2<span class="o">]</span> <span class="o">[</span>async-threads:10<span class="o">]</span> <span class="o">[</span>hipe<span class="o">]</span> <span class="o">[</span>kernel-poll:false<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Eshell V5.10.2  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'>1&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Installer Elixir</h2>

<p>Voilà Erlang est installé, c&#8217;est maintenant au tour d&#8217;Elixir proprement dit.
Pas de chance, il n&#8217;y a pas de package pour Debian, je dois donc installer
à partir des <a href="https://github.com/elixir-lang/elixir/tags">sources</a>. C&#8217;est
aussi simple que de décompresser l&#8217;archive et de taper <code>make</code>. À ce moment
là j&#8217;ai quand même un petit doute: pas de dépendances, de lib à installer ?
Mais je comprends vite que c&#8217;est Erlang qui est en train de compiler Elixir.
Donc non, tout va bien et ça marche du premier coup. Un petit truc quand
même, Elixir étant installé en local, il faut modifier la variable <code>PATH</code>
du shell pour pas galérer:</p>

<figure class='code'><figcaption><span>.bashrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/home/xavier/local/bin/elixir-0.9.3/bin/
</span></code></pre></td></tr></table></div></figure>


<p>Reste à voir si ça fonctionne vraiment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xavier:~<span class="nv">$ </span>iex
</span><span class='line'>Erlang R16B01 <span class="o">(</span>erts-5.10.2<span class="o">)</span> <span class="o">[</span><span class="nb">source</span>-bdf5300<span class="o">]</span> <span class="o">[</span>smp:2:2<span class="o">]</span> <span class="o">[</span>async-threads:10<span class="o">]</span> <span class="o">[</span>hipe<span class="o">]</span> <span class="o">[</span>kernel-poll:false<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Interactive Elixir <span class="o">(</span>0.9.3<span class="o">)</span> - press Ctrl+C to <span class="nb">exit</span> <span class="o">(</span><span class="nb">type </span>h<span class="o">()</span> ENTER <span class="k">for </span><span class="nb">help</span><span class="o">)</span>
</span><span class='line'>iex<span class="o">(</span>1<span class="o">)</span>&gt; 1+1
</span><span class='line'>2
</span><span class='line'>iex<span class="o">(</span>2<span class="o">)</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Cool ! L&#8217;installation s&#8217;est déroulée à merveille, tout marche du premier
coup. C&#8217;est bon signe ou pas ?</p>

<h2>Mise à jour d&#8217;Elixir</h2>

<p>Il sort pratiquement une nouvelle version d&#8217;Elixir par mois ; je sens
que les mises à jour vont faire partie de ma vie d&#8217;elixiriste (oui je
l&#8217;ai inventé celui-là, comment vous diriez ? Elixirien ?)
En fait, en
écrivant cet article, je m&#8217;aperçois que la version 0.10.0 est sortie.
C&#8217;est donc ma première mise à jour. Après le téléchargement,
la décompression et le <code>make</code>, il suffit d&#8217;accommoder le <code>PATH</code>:</p>

<figure class='code'><figcaption><span>.bashrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/home/xavier/local/bin/elixir-0.10.0/bin/
</span></code></pre></td></tr></table></div></figure>


<p>Et la nouvelle version est prête à l&#8217;emploi. Si Elixir est aussi sympa que son
installation, ça promet. Affaire à suivre.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern IE pour Linux: foutage de gueule]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/20/modern-ie-pour-linux-foutage-de-gueule/"/>
    <updated>2013-07-20T08:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/20/modern-ie-pour-linux-foutage-de-gueule</id>
    <content type="html"><![CDATA[<p><strong>Question:</strong> «Que doit faire régulièrement un développeur du web ?»</p>

<p><strong>Réponse:</strong> «Tester le rendu de son site sur plusieurs navigateurs.»</p>

<p>Internet Explorer fait partie du lot. Qu&#8217;on le veuille ou non, il faut
tester nos sites dans IE, même quand on travaille sur Linux.
Au début de l&#8217;année, Microsoft a lancé
<a href="http://www.modern.ie/fr">Modern.IE</a>. L&#8217;ancien site tout moche où on
téléchargait les VMs qui ne fonctionnaient que sur Windows à fait place
à un site moderne, new look, qui te
promet (dixit le dit site):</p>

<blockquote><p>Facilitez vos tests pour Internet Explorer</p></blockquote>




<!-- more -->


<p>On te dis qu&#8217;on va bien s&#8217;occuper de toi. J&#8217;ai eu envie d&#8217;y croire alors
j&#8217;ai essayé. Ce qui m&#8217;intéresse ce sont les outils de virtualisation, alors
rendez vous sur la page <a href="http://www.modern.ie/fr/virtualization-tools.">http://www.modern.ie/fr/virtualization-tools.</a> Voici
ce qu&#8217;on peut y lire:</p>

<blockquote><p>Testez votre site. Dans tout navigateur sur un Mac ou un ordinateur Windows.</p></blockquote>


<p>Ça aurait du me mettre la puce à l&#8217;oreille mais je continue quand même.
Deux clics plus tard, j&#8217;obtiens la liste des VMs pour Linux/VirtualBox.
Premier constat: la taille des VMs, toujours aussi gargantuesque,
5 ou 6 gigas pour certaines.
Bon, c&#8217;est pas ça qui va m&#8217;arrêter, mais faut quand même savoir que leur
serveur ne supporte pas le resume…</p>

<p>Quelques heures plus tard, mission accomplie, IE 9 est téléchargé. Je
lance le script d&#8217;install qui tente de décompresser la bête.
Mais non. Comment ça, non ? Ben non, fichier corrompu (!?). J&#8217;ai un peu la nausée à l&#8217;idée de devoir
re-télécharger 5 Go. J&#8217;essaye de les décompresser avec
deux trois programmes classiques que j&#8217;ai sous la main. Rien à faire.
Corrompu…</p>

<p>Retour sur le site Modern.IE pour trouver ça: «Need more help downloading and installing the VMs?
<a href="http://blog.reybango.com/2013/02/04/making-internet-explorer-testing-easier-with-new-ie-vms/">Try Rey Bango’s blog</a>.»</p>

<p>Ok je fais ça. Qu&#8217;est-ce-que j&#8217;y apprends:</p>

<blockquote><p>A number of people have mentioned that they’ve had trouble unzipping the<br/>images and that they may be corrupt. They’re not corrupt. There’s an issue in<br/>both OSX & Linux where using the OS’s default zip tool is failing to open the<br/>.zip file properly. We’re aware of this and are looking into it. The interim<br/>solution is to use a 3rd party unzip tool like “The Unarchiver” in the Apple<br/>app store or Peazip for Linux. These will correctly unzip the .zip files and<br/>give you working images.</p></blockquote>


<p>Traduction rapide (et sûrement un peu maladroite) pour les non-anglophones, accrochez vous, ça vaut son
pesant de cacahuètes:</p>

<blockquote><p>Plusieurs personnes ont rapporté avoir des problèmes à décompresser les images<br/>et que celles-ci pouvaient être corrompues. Elles ne sont pas corrompues. Il y<br/>a un problème dans OSX et Linux, qui empêche d&#8217;ouvrir proprement les fichiers<br/>zip avec les outils par défaut de l&#8217;OS. On est au courant de ça et on regarde<br/>ce qu&#8217;on peut faire. La solution provisoire est d&#8217;utiliser un outil de<br/>décompression tiers, comme &#8220;The Unarchiver&#8221; dans l&#8217;app store ou bien Peazip<br/>pour Linux. Ces outils décompresseront correctement les zip et produiront des<br/>images qui fonctionnent.</p></blockquote>


<p>Sans rire !? C&#8217;est tout ce que Microsoft a à dire la-dessus ? «C&#8217;est pas
nous, m&#8217;sieur, c&#8217;est encore la faute à OSX et Linux tout ça.»
Vous m&#8217;imaginez dire ça au boulot:</p>

<p>  <strong>Client:</strong> Il y a un problème avec le site, il fonctionne correctement dans
IE mais des utilisateurs nous ont rapporté qu&#8217;il s&#8217;affichait mal avec
Chrome et Firefox.</p>

<p>  <strong>Moi:</strong> Non, il ne s&#8217;affiche pas mal, il y a juste un problème avec Firefox et Chrome
qui empêche mon site de s&#8217;afficher correctement. En attendant que je corrige
ça, vos utilisateurs peuvent toujours regarder le site avec IE.</p>

<p>Le post date de février, c&#8217;est toujours pas corrigé. La suite de l&#8217;histoire
maintenant: Je n&#8217;ai jamais entendu
parler de ce <em>Peazip</em>, je cherche un peu et fini par l&#8217;installer. Après 10
minutes d&#8217;essais infructeux, pendant lesquelles j&#8217;ai du essuyer à peu près
40 bugs (sans rire), je le désinstalle et j&#8217;abandonne.
J&#8217;ai perdu
mon temps mais c&#8217;est de ma faute, qu&#8217;est ce qui m&#8217;a pris de croire
que Microsoft s&#8217;interessait aux utilisateurs de Linux ?</p>

<p>Pour ceux et celles qui se demande quelle est la solution, c&#8217;est la même que depuis
des années: <a href="https://github.com/xdissent/ievms">ievms</a> le script qui fonctionne.</p>

<p>À demain.</p>

<p><em>P.S. Ça fait des mois que je pense à écrire cet article. Ça fait du bien
quand ça sort.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro quatre]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/19/bien-debuter-avec-vim-conseil-numero-quatre/"/>
    <updated>2013-07-19T07:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/19/bien-debuter-avec-vim-conseil-numero-quatre</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Utilisez une version graphique</h2>

<p>Utilisez une version graphique de vim, comme gVim sous Linux et Windows, ou
MacVim sous MacOS, plutôt que la version pour terminal.  À ceci 3 raisons:</p>

<!-- more -->


<p>Tout d&#8217;abord, une version graphique de Vim vous permettra d&#8217;utiliser votre
police de caractère et votre jeu de couleur préféré sans problème. Dans un
terminal, c&#8217;est pas gagné.</p>

<p>Ensuite, une version graphique vous donnera accès à une classique barre
de menu. C&#8217;est tout bête, mais au début ça rassure.</p>

<p>Enfin, la barre d&#8217;outils fournit trois icônes très utiles pour les
débutants: copier, couper, coller. Pendant la phase d&#8217;apprentissage,
vous serez très heureux d&#8217;avoir ces icônes sous la main pour
échanger du texte depuis Vim vers une autre application et vice-versa. C&#8217;est
donc une exception à mon conseil numéro 2:
<a href="http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux/">Abandonnez la souris</a>.
Bien sûr, Vim possède des commandes au
clavier pour faire ça, mais son système de clipboard/buffer très puissant est
complexe et s&#8217;avère franchement déroutant pour le novice.
En temps que débutant vous aurez
bien assez de choses à apprendre comme ça sans vous en rajouter une couche.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/"/>
    <updated>2013-07-18T07:39:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p><em>Hier j&#8217;ai montré comment ajouter une commande à Git à l&#8217;aide d&#8217;un script.
Aujourd&#8217;hui je fais quelque chose d&#8217;utile grâce à ce nouveau pouvoir.</em></p>

<p>Ce que je fais régulierement avec Git c&#8217;est:</p>

<ol>
<li>ajouter une fonctionnalité dans la branche <code>ma_branche</code></li>
<li>quand c&#8217;est terminé, passer sur la branche <code>master</code></li>
<li>fusionner <code>ma_branche</code> dans <code>master</code></li>
</ol>


<p>Comme je ne travaille jamais directement dans la branche master, ce genre
de <em>merge</em> n&#8217;offre jamais de conflits. J&#8217;aimerais regrouper les
étapes 2 et 3 en une seule commande: <code>git merge-me</code>.</p>

<!-- more -->


<h2>Trouver la branche courante</h2>

<p>La première étape consiste à retrouver
et retenir le nom de la branche courante. Étant un grand fan de Sed, je
procederais naturellement comme ça:</p>

<pre><code>git branch | sed -n '/\* /s///p'
</code></pre>

<p>Mais je sais que Sed n&#8217;a pas les faveurs de tout le monde. J&#8217;ai donc fais une
recherche sur StackOverflow pour trouver une autre manière d&#8217;obtenir le
même résultat:</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre>

<p>Je pense que cette seconde solution est meilleure puisque moins fragile, même
si il y a peu de chance que Git change la sortie de <code>git branch</code>. Pour
retenir le nom de la branche, on place la sortie de cette commande dans une
variable Bash:</p>

<figure class='code'><figcaption><span>git-merge-me</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">BRANCH_TO_MERGE</span><span class="o">=</span><span class="sb">`</span>git rev-parse --abbrev-ref HEAD<span class="sb">`</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$BRANCH_TO_MERGE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme en Ruby, les backticks déclenchent la commande et retournent sa
sortie. Le résultat:</p>

<pre><code>xavier:~$ git merge-me
ma_branche
</code></pre>

<p>Maintenant que j&#8217;ai vu que ça fonctionnait bien, le reste est un jeu
d&#8217;enfant.</p>

<h2>Le script final</h2>

<p>On ajoute les deux commandes Git, ce qui donne:</p>

<figure class='code'><figcaption><span>git-merge-me</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">BRANCH_TO_MERGE</span><span class="o">=</span><span class="sb">`</span>git rev-parse --abbrev-ref HEAD<span class="sb">`</span>
</span><span class='line'>git checkout master
</span><span class='line'>git merge <span class="nv">$BRANCH_TO_MERGE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voici le script en action:</p>

<pre><code>xavier:~$ git merge-me
Switched to branch 'master'
Updating 48540e6..c584593
Fast-forward
 TODO |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
xavier:~$ git branch
* master
  ma_branche
</code></pre>

<p>Ma nouvelle commande fait bien le travail que je lui demande.</p>

<h2>Pour aller plus loin</h2>

<p>Vous n&#8217;êtes pas limité à l&#8217;utilisation de Bash. Vous pouvez utiliser le
langage que vous voulez. À titre d&#8217;exemple, voici l&#8217;équivalent du script
précédent, cette fois en Ruby.
Toutefois comme ce genre de script va utiliser beaucoup de commandes
système, Ruby n&#8217;est peut-être pas le mieux placé. À vous de voir.</p>

<figure class='code'><figcaption><span>git-merge-me version Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="n">branch_to_merge</span> <span class="o">=</span> <span class="sb">`git rev-parse --abbrev-ref HEAD`</span>
</span><span class='line'><span class="nb">system</span> <span class="s1">&#39;git checkout master&#39;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git merge </span><span class="si">#{</span><span class="n">branch_to_merge</span><span class="o">.</span><span class="n">chomp</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On peut aussi combiner script et alias. On donne un nom bien explicite
à notre fichier, comme <code>git-merge-me-into-master</code> et on crée un alias
<code>mm = merge-me-into-master</code>. Ainsi on a une commande rapide sous les
doigts et on peut facilement retrouver le fichier grâce à son nom quand
on doit le modifier.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/"/>
    <updated>2013-07-17T08:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Ces derniers jours j&#8217;ai montré comment étendre les fonctionnalités
de Git à l&#8217;aide des alias (voir les 2 articles précédents). Aujourd&#8217;hui
on passe à la suite logique avec la création de nos propres scripts pour
Git.</p>

<p><em>Ce qui suit fonctionne sur Linux et MacOS. Je ne sais pas si c&#8217;est
possible sur Windows.</em></p>

<!-- more -->


<p>Un exemple vaut parfois mieux qu&#8217;un long discours. Alors créez donc le fichier
<code>git-hello</code> suivant:</p>

<figure class='code'><figcaption><span>git-hello</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo </span>Hello
</span></code></pre></td></tr></table></div></figure>


<p>Donnez lui les droits d&#8217;exécution (<code>chmod +x git-hello</code>) et placez le dans
votre PATH. Moi je le place dans <code>~/bin/</code> et j&#8217;ajoute la ligne suivante à
<code>~/.bashrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/home/xavier/bin
</span></code></pre></td></tr></table></div></figure>


<p>Si vous n&#8217;êtes pas sous Linux, vous devrez adapter ces directives pour
votre OS. Une fois que c&#8217;est fait, vérifiez si tout fonctionne
correctement:</p>

<pre><code>xavier:~$ git-hello 
Hello
</code></pre>

<p>Maintenant vous vous dites peut-être <em>«Bon d&#8217;accord, il vient d&#8217;écrire un
script bidon, et alors ? Je vois toujours pas le rapport avec Git !»</em>
Le fichier qu&#8217;on vient d&#8217;écrire n&#8217;est pas nommé n&#8217;importe comment. Il
commence par <code>git-</code>. C&#8217;est ce qui va permettre à la magie d&#8217;opérer:</p>

<pre><code>xavier:~$ git h[Tab]
hello   help    hist    
xavier:~$ git hello
Hello
</code></pre>

<p>La même chose en différé live &ndash;<em> c&#8217;est mon dixième article sur ce blog,
je fête ça avec mon tout premier gif, je m&#8217;amuse comme je veux…</em> &ndash;</p>

<p><img src="http://lkdjiin.github.io/images/2013-07-17-1.gif"></p>

<p>La règle est simple:</p>

<blockquote><p>Un fichier nommé `git-foo` sera vu par Git comme étant une de ses propres<br/>commandes, nommée `foo`.</p></blockquote>


<p>C&#8217;est possible grâce à l&#8217;auto complétion programmable de Bash, dont je
parlerais une prochaine fois. Si vous avez défini des alias un peu
complexe, vous auriez peut-être avantage à les placez dans un script pour
profiter de la coloration syntaxique.
Demain, je montrerais un script un
peu plus utile et étoffé que celui-ci :) En attendant, testez vos propres idées.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git et les alias: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/16/git-et-les-alias-la-suite/"/>
    <updated>2013-07-16T09:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/16/git-et-les-alias-la-suite</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div>


<p><em>Hier, j&#8217;abordai les bases de la
<a href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/">création d&#8217;alias avec Git</a>.
Aujourd&#8217;hui je pousse un peu plus loin en montrant comment intégrer
des commandes externes dans ces alias.</em></p>

<p>J&#8217;ai constaté récemment que j&#8217;utilisai énormément Git:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xavier:~<span class="nv">$ </span>wc -l .bash_history
</span><span class='line'>500 .bash_history
</span><span class='line'>xavier:~<span class="nv">$ </span>sed -n <span class="s1">&#39;/^git/p&#39;</span> .bash_history | wc -l
</span><span class='line'>238
</span></code></pre></td></tr></table></div></figure>


<p>Sur 500 lignes d&#8217;historique, 238 sont consacrées à Git ! Ça m&#8217;a décidé
à approfondir la question des alias.</p>

<!-- more -->


<h2>L&#8217;opérateur !</h2>

<p>Git permet d&#8217;utiliser des commandes externes dans la définitions des
alias à l&#8217;aide de l&#8217;opérateur <code>!</code>. L&#8217;exemple qui suit est parfaitement
inutile mais illustre bien ce qui est possible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[alias]</span>
</span><span class='line'>  <span class="na">ls</span> <span class="o">=</span> <span class="s">!ls</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xavier:~<span class="nv">$ </span>git ls
</span><span class='line'>bin      Documents  Images            Modèles    Téléchargements   www
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>C&#8217;est pas tout, Git accepte aussi les arguments des commandes externes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xavier:~<span class="nv">$ </span>git ls -a
</span><span class='line'>.        .fonts       .javafx_eula_accepted   .remmina
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Vous imaginez un peu ce qu&#8217;on va pouvoir faire avec ça ? Prenons un
workflow simple : nouvelle branche, ajout de fichier, commit, retour à au
master et merge.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b new_branch
</span><span class='line'><span class="c"># Édition du code</span>
</span><span class='line'>git add . <span class="c"># 1 fois sur 2 j&#39;oublie celle-là.</span>
</span><span class='line'>git commit -a
</span><span class='line'>git checkout master
</span><span class='line'>git merge new_branch
</span></code></pre></td></tr></table></div></figure>


<p>Il est clair que <code>git add . ; git commit -a</code> va se répéter plusieurs fois.
Je cherche donc a optimiser cette partie. Pour cela je modifie mon vieil
alias <code>ci</code> (<a href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/">voir article précédent</a>).</p>

<p><em>Dans les exemples suivants, je n&#8217;écris plus <code>[alias]</code>, cette ligne est
désormais sous-entendue.</em></p>

<pre><code>ci = !git add . &amp;&amp; git commit -a
</code></pre>

<p>Git traite <code>git</code> comme une commande externe comme les autres &ndash;
<em>logique mais marrant</em> &ndash;, quant à <code>&amp;&amp;</code>, cela permet à Bash de n&#8217;exécuter
la commande de droite que si la commande de gauche réussie. Il n&#8217;y a pas
de raison de douter que <code>git add .</code> va crasher et vous pouvez remplacer
<code>&amp;&amp;</code> par <code>;</code> si vous voulez.</p>

<p>Pour finir sur une note d&#8217;humour de geek, voici la commande <code>la</code> (pour
list alias) qui va afficher tout les alias.</p>

<pre><code># Lister tout les alias.
la = !git config -l | sed -n '/alias/s/alias\\.//p' | sort
</code></pre>

<p>Tout d&#8217;abord <code>git</code> est utilisé pour lister le contenu du fichier .gitconfig.
Ensuite <code>sed</code> sélectionne seulement les lignes commençant par <code>alias</code> et en
même temps supprime <code>alias.</code> de la ligne. Et enfin <code>sort</code> nous trie tout
ça par ordre alphabétique. Notez au passage que le fichier <code>.gitconfig</code>
accepte les commentaires.</p>

<h2>Conclusion</h2>

<p>On a là un sacré terrain de jeu. Si vous aimez écrire des oneliners, vous
allez pouvoir vous amuser. Voici par exemple une page où vous trouverez
<a href="http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/">des définitions d&#8217;alias</a>
bien plus complexe que ce que j&#8217;ai montré ici.
Malgré tout, je ne pense pas que les alias de Git soient la réponse à tout
les problèmes.
Écrire une commande sur une seule ligne va vite devenir illisible si
vous avez besoin de faire quelque chose d&#8217;un peu élaboré. Dans un
prochain article je montrerais comment créer vos propres commandes Git
à l&#8217;aide de scripts, et non plus simplement d&#8217;alias.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: complétion automatique et alias pour débutants]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/"/>
    <updated>2013-07-15T07:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Utilisez git en ligne de commande, c&#8217;est taper encore et encore les mêmes
commandes sur votre clavier. Si vous êtes comme moi, vous utilisez la
ligne de commande parce que vous savez que c&#8217;est ce qu&#8217;il y a de plus
rapide. C&#8217;est puissant, mais ça peut aussi finir par lasser. On va voir
comment accélerer encore les choses.</p>

<!-- more -->


<h2>Complétion automatique</h2>

<p>Il y a tout d&#8217;abord la complétion automatique, si votre système est
configuré pour. Si par exemple je tape <code>git c</code>, suivi de la touche
tabulation ([Tab]), voici ce qu&#8217;il se passe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xavier:~<span class="nv">$ </span>git c
</span><span class='line'>checkout      cherry-pick   clean         clone         commit
</span><span class='line'>cherry        ci            cleanup       co            config
</span><span class='line'>xavier:~<span class="nv">$ </span>git c
</span></code></pre></td></tr></table></div></figure>


<p>Je suis informé de toutes les commandes commençant par la lettre <code>c</code>. Et la
ligne de commande est reprise automatiquement sur une nouvelle ligne, prête à
être complétée. Si je tape <code>git chec</code> puis [Tab], la commande s&#8217;étends de suite
en <code>git checkout</code> puisqu&#8217;il n&#8217;y a plus d&#8217;ambiguités. C&#8217;est un bon moyen pour se
rafraichir la mémoire sur les différentes commandes disponibles, et ça accélère
un peu la frappe au clavier. Mais on doit pouvoir faire mieux.</p>

<h2>Les alias git</h2>

<p>Git permet de définir des alias (littéralement: pseudonyme ou nom d&#8217;emprunt) sur
ses commandes. Un classique du genre est <code>git co</code>, à la place de <code>git
checkout</code>. Pour faire ça, on utilise la commande <code>config</code> de git:</p>

<pre><code>git config --global alias.co 'checkout'
</code></pre>

<p>Maintenant, partout où vous utilisiez <code>checkout</code> vous pouvez vous contentez
de <code>co</code>, par exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Grâce à son système d&#39;alias, git transforme la ligne suivante</span>
</span><span class='line'><span class="c"># en &#39;git checkout master&#39;.</span>
</span><span class='line'>git co master
</span></code></pre></td></tr></table></div></figure>


<p>Il faut noter que la complétion automatique fonctionne aussi sur le nom de
la branche. Ainsi <code>git co m[Tab]</code> sera étendu en <code>git co master</code> (si la
branche <code>master</code> est la seule commençant par la lettre <code>m</code>, bien entendu).</p>

<h2>Le fichier .gitconfig</h2>

<p>Git enregistre vos alias dans le fichier <code>~/.gitconfig</code>. Si vous vous sentez
à l&#8217;aise avec l&#8217;idée d&#8217;éditer ce fichier, vous pouvez le faire. Je trouve
que c&#8217;est plus simple que d&#8217;avoir à se souvenir de la syntaxe de la
commande <code>git config</code>. Voyons ce que ça donne avec notre alias <code>co</code>:</p>

<figure class='code'><figcaption><span>section [alias] de .gitconfig - exemple 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[alias]</span>
</span><span class='line'>  <span class="na">co</span> <span class="o">=</span> <span class="s">checkout</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ajoutons un autre classique du genre, <code>ci</code> pour <code>commit</code>:</p>

<figure class='code'><figcaption><span>section [alias] de .gitconfig - exemple 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[alias]</span>
</span><span class='line'>  <span class="na">co</span> <span class="o">=</span> <span class="s">checkout</span>
</span><span class='line'><span class="s">  ci = commit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voilà, maintenant vous pouvez écrire:</p>

<pre><code>git ci -a ...
</code></pre>

<p>à la place de</p>

<pre><code>git commit -a ...
</code></pre>

<p>Les alias peuvent aussi contenir des options. Par exemple, pour afficher les
3 derniers commits, on peut ajouter un alias sur la commande <code>log</code> de cette
manière:</p>

<figure class='code'><figcaption><span>section [alias] de .gitconfig - exemple 3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[alias]</span>
</span><span class='line'>  <span class="na">co</span> <span class="o">=</span> <span class="s">checkout</span>
</span><span class='line'><span class="s">  ci = commit</span>
</span><span class='line'><span class="s">  last = log -3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pour conclure</h2>

<p>Je vous ai présenté les fonctionnalités basiques des alias de git. On a vu
notamment deux manières de les créer. Les alias git
peuvent se révéler beaucoup plus puissants que ce que j&#8217;ai abordé dans
ce tutoriel d&#8217;introduction. En attendant un possible futur article sur
le sujet, si vous
cherchez un peu sur internet vous trouverez des tas de définitions
d&#8217;alias, certaines très utiles et d&#8217;autres moins. À vous de faire le tri
selon vos besoins.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro trois]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois/"/>
    <updated>2013-07-14T09:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Ayez confiance dans le mode normal</h2>

<p>Ça ne vous aura pas échappé, Vim est un éditeur modal.  C&#8217;est à dire qu&#8217;il
possède plusieurs modes de fonctionnement, plusieurs manières de considérer les
choses.  Comme par exemple, le mode normal pour éditer du texte, ou bien le mode
commande pour lancer des fonctions, ou encore le mode insertion pour saisir du
nouveau texte, etc.  C&#8217;est une des grandes différences de Vim par rapport aux
éditeurs dits «classiques», qui restent la plupart du temps en insertion.</p>

<!-- more -->


<p>Il semblerait qu&#8217;une erreur courante chez les nouveaux utilisateurs de Vim soit
de rester en mode insertion, et de ne passer en mode normal que lorsque cela
s&#8217;avère absolument necessaire.  Si vous agissez de la sorte, vous passerez
totalement à côté de vim. Au contraire, vous devez rester le plus longtemps
possible en mode normal. Entrez dans un autre mode uniquement quand c&#8217;est
nécessaire et repassez en normal le plus tôt possible.</p>

<blockquote><p>La première chose que fait un Vimiste qui revient d&#8217;une pause café, c&#8217;est<br/>appuyer sur ESC pour être sûr d&#8217;être à la maison.</p></blockquote>


<p><span class='pullquote-right' data-pullquote='Si vous restez en mode insertion, vous ne serez jamais à l&#8217;aise avec
Vim,'>
Un débutant aura tendance à faire le contraire, à rester trop
longtemps en mode insertion, puisqu&#8217;il va s&#8217;y sentir à l&#8217;aise. Il va utiliser la
souris et les touches fléchées pour se déplacer dans et parmi ses documents :
c&#8217;est ainsi que fonctionnait son ancien éditeur. C&#8217;est une grosse perte
de temps. Si vous restez en mode insertion, vous ne serez jamais à l&#8217;aise avec
Vim, et vous finirez par retourner dans les bras de votre ancien éditeur.  Vim
vous permet de vous déplacer bien plus rapidement grâce au clavier.
Faites lui un peu confiance ! Rester le
plus possible en mode normal et y repasser dès que possible vous forcera à
utiliser la <em>vim way</em>. Au début, ça semble totalement anti-naturel, il
faut persévérer. Que cela prenne 3 jours ou 3 semaines, le mode normal finira
par vous sembler … normal.
</span></p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je veux mon blog Octopress en français]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais/"/>
    <updated>2013-07-13T07:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<p>Octopress n&#8217;est pas prévu pour être internationnalisé et localisé. C&#8217;est
comme ça. Je ne pense pas que ça change avant un moment, si jamais ça
change. Suite à une
<a href="https://twitter.com/lkdjiin/status/355699071895343105">conversation sur twitter</a>
avec @octopress, on m&#8217;a
conseillé de regarder du coté de Jekyll. Je le ferais surement, mais plus
tard. Je ne connais pas du tout Jekyll et je veux mon blog Octopress en
français maintenant. (Ok, je fais un caprice)</p>

<!-- more -->


<p>Je vais vous montrer comment j&#8217;ai fait pour internationnalisé Octopress.
Si vous en avez envie vous aussi, vous pourrez suivre cette procédure
pour ne pas vous prendre la tête à chercher vous-même.</p>

<h2>Les titres</h2>

<p>Les titres des articles (aussi dans le volet à droite) sont capitalisés à
l&#8217;extrème. Chaque première lettre d&#8217;un mot est en majuscule.  Alors,
capitaliser chaque mot d&#8217;un titre, ça fait cool en anglais, mais en français
c&#8217;est juste horrible et illisible. Pour arranger ça, on change la méthode
<code>titlecase</code> dans <code>plugins/titlecase.rb</code>.</p>

<figure class='code'><figcaption><span>plugins/titlecase.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">titlecase</span>
</span><span class='line'>  <span class="n">capitalize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Edit 14/07/2013</strong> Pas besoin de faire tout ça en fait. Il suffit de passer
<code>titlecase:</code> à <code>false</code> dans le fichier <code>_config.yml</code>. Merci à Jonathan Georges
pour cette info.</p>

<h2>Les dates</h2>

<p>Je veux les dates en français, bien sûr. Les changements sont à faire
dans <code>plugins/date.rb</code>, et je vais vraiment y aller avec mes gros sabots.
Tout d&#8217;abord il faut modifier la méthode <code>ordinalize</code> ainsi:</p>

<figure class='code'><figcaption><span>méthode ordinalize dans plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns an ordinal date eg 1 juillet 2007 -&gt; 1er juillet 2007</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ordinalize</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="n">date</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">ordinal</span><span class="p">(</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%e&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">french_month</span><span class="p">(</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%-m&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="n">date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puis on modifie la méthode <code>ordinal</code> de cette façon:</p>

<figure class='code'><figcaption><span>méthode ordinal dans plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns an ordinal number. 1 -&gt; 1er.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ordinal</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">number</span><span class="o">.</span><span class="n">to_i</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">&lt;span&gt;er&lt;/span&gt;&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et enfin il faut ajouter la méthode <code>french_month</code>. C&#8217;est très basique, mais ça
fonctionne:</p>

<figure class='code'><figcaption><span>méthode french_month dans plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Returns a string french month. 1 -&gt; janvier, 2 -&gt; février, etc.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">french_month</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">number</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">1</span><span class="p">;</span> <span class="s2">&quot;janvier&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">2</span><span class="p">;</span> <span class="s2">&quot;février&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">3</span><span class="p">;</span> <span class="s2">&quot;mars&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">4</span><span class="p">;</span> <span class="s2">&quot;avril&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">5</span><span class="p">;</span> <span class="s2">&quot;mai&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">6</span><span class="p">;</span> <span class="s2">&quot;juin&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">7</span><span class="p">;</span> <span class="s2">&quot;juillet&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">8</span><span class="p">;</span> <span class="s2">&quot;août&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">9</span><span class="p">;</span> <span class="s2">&quot;septembre&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">10</span><span class="p">;</span> <span class="s2">&quot;octobre&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">11</span><span class="p">;</span> <span class="s2">&quot;novembre&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="mi">12</span><span class="p">;</span> <span class="s2">&quot;décembre&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si vous êtes en Ruby 1.9.3, il ne faut pas oublier de mettre un encodage
au début du fichier, à cause des caractères accentués :</p>

<figure class='code'><figcaption><span>1ère ligne de plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding: utf-8 -*-</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Les chaînes de caractères embarquées</h2>

<p>Rien de bien intéressant pour cette partie, il suffit de remplacer une
chaîne par une autre. Je vais donc me contenter de dresser la liste.</p>

<ul>
<li>&ldquo;Read on&rdquo; : <code>_config.yml</code></li>
<li>&ldquo;Recent Posts&rdquo; : <code>source/_includes/aside/recent_posts.html</code></li>
<li>&ldquo;Search&rdquo; : <code>source/_includes/navigation.html</code></li>
<li>&ldquo;Posted by&rdquo; : <code>source/_includes/post/author.html</code></li>
<li>&ldquo;posted in&rdquo; : <code>source/_includes/archive_post.html</code></li>
</ul>


<h3>Category:</h3>

<p>Pour remplacer «Category: » par «Catégorie : », c&#8217;est un peu différent.
Il faut <em>ajouter</em> la ligne suivante dans <code>_config.yml</code>:</p>

<figure class='code'><figcaption><span>1ère ligne de plugins/date.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">category_title_prefix</span><span class="p">:</span> <span class="s2">&quot;Catégorie : &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Alors voilà, j&#8217;ai bien conscience que certaines modifications risquent ne plus
fonctionner après une mise à jour d&#8217;Octopress… Mais c&#8217;est tout ce que j&#8217;ai
trouver pour faire ça dans l&#8217;heure.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro deux]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux/"/>
    <updated>2013-07-12T09:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux</id>
    <content type="html"><![CDATA[<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>


<h2>Abandonnez la souris</h2>

<p>Moins utiliser la souris est une des principales motivations qui m&#8217;ont décidé à
passer sur Vim, il y a maintenant un an et demi. Histoire d&#8217;avoir moins de
crampe à la fin de la journée. Et le pari est réussi. En quelques mois, toutes
les douleurs que je ressentais systématiquement à l&#8217;épaule et au poignet en fin
de journée ont totalement disparues.</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='Au début vous serez totalement paumé,
c&#8217;est normal.'>
Vim transforme votre clavier en un joypad géant
d&#8217;une centaine de boutons, profitez en ! Chaque fois que vous passez du clavier
à la souris, et vice-versa, vous perdez du temps &ndash; c&#8217;est vrai que c&#8217;est minime
mais ça s&#8217;accumule &ndash; et surtout, vous interrompez le flot de
vos pensées. De plus, votre cerveau doit commuter entre deux modes
différents (le mode souris et le mode clavier sont deux modes de
fonctionnement bien disctinct pour le cerveau, le «switch» prends un certain
temps et l&#8217;accumulation fatigue).
Donc, n&#8217;utilisez pas la souris pour vous déplacer dans vos documents, le clavier
est bien plus rapide avec Vim. Au début vous serez totalement paumé,
c&#8217;est normal. Mais
ne perdez pas de vue que Vim est fait pour être piloté au clavier, donc gardez
vos mains sur votre clavier.
</span></p>

<p>Je suis même prêt à parier que dans quelques temps, vous chercherez
les moyens d&#8217;utiliser vos autres logiciels sans la souris …</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
