<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : algorithme génétique | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/algorithme-genetique/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-09-10T09:32:53+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/"/>
    <updated>2013-09-10T08:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/">l'article précédent</a>
on a appris à évaluer la population en normalisant les scores.
Aujourd'hui on s'attaque à la méthode de sélection dite de
«la roue de la fortune».</p>

<!-- more -->


<p>Dans l'algorithme génétique <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
j'utilisais une méthode de sélection <em>artificielle</em> qu'on appelle
l'élitisme : je conservais un certain nombre des meilleurs
individus d'une génération, en éliminant purement et simplement les
autres. J'ai commencé par présenter cette méthode, l'élitisme, car c'est
la plus simple. On a ainsi pu se concentrer sur d'autres parties des
algorithmes génétiques. Seulement voilà, on a vu que cette méthode de
sélection posait certains problèmes, notamment l'appauvrissement du
patrimoine génétique. La méthode de la roue de la fortune va donner une
chance à tout individu porteur d'un bon gène de le transmettre à la
génération suivante. Mais bien sûr, certains auront plus de chances
que d'autres…</p>

<h2>La roue de la fortune</h2>

<p>Imaginez une roue de la fortune où chaque case représenterait un individu.
Imaginez que plus l'individu est adapté, plus sa case sur cette roue est
large. Autrement dit, un meilleur individu à une case qui occupe un
pourcentage plus important de la roue qu'un moins bon individu. Tiens !
Ça tombe bien, la dernière fois on a justement transformé les scores en
pourcentages.</p>

<p>On va utiliser cette image de la roue de la
fortune pour sélectionner des individus en vue de la reproduction.
Je vais prendre un exemple : supposons une population de 5 individus nommés
A, B, C, D et E. Après évaluation nous pourrions avoir:</p>

<pre><code>A 40%
B 30%
C 20%
D 10%
E  0%
</code></pre>

<p>Pour simuler le principe de la roue de la fortune, nous allons créer une
sélection avec 40 copies de A, 30 copies de B, 20 copies de C et 10 copies
de D. Quand le moment de la reproduction sera venu, on tirera au sort des
couples de parents. De cette manière, les plus adaptés auront plus de
chances de transmettre leurs gènes, mais même les moins adaptés auront aussi
leur chance. L'endroit où l'on place les individus sélectionnés (suivant le
langage : une liste, un tableau, etc) est appellé <em>mating pool</em>, qu'on peut
traduire par piscine d'accouplement. J'aurais préféré un terme qui fasse
moins laboratoire, comme «club de rencontre»…</p>

<p>Voyons le code pour créer ce fameux <em>mating pool</em>:</p>

<p>``` ruby
def create_mating_pool
  mating_pool = []
  @population.each do |person|</p>

<pre><code>person.first.to_i.times { mating_pool &lt;&lt; person }
</code></pre>

<p>  end
  # mating_pool.each {|i| puts i.inspect }
  mating_pool
end
```</p>

<p>La ligne commentée ne sera pas incluse dans le programme final,
mais elle va servir aujourd'hui pour voir ce qu'il se passe et
identifier un souci. Voici le code complet du programme, jusqu'à maintenant:</p>

<p>``` ruby monkey.rb
def make_chromosome
  value = &ldquo;&rdquo;
  length = @search_value.size
  length.times { value += random_gene }
  [nil, value]
end</p>

<p>def random_gene
  @genes[rand(@genes.size)]
end</p>

<p>def make_population
  population = []
  @population_size.times { population &lt;&lt; make_chromosome }
  population
end</p>

<p>def score_population
  evaluate_population
  normalize_population_score
end</p>

<p>def evaluate_population
  @population.map! {|person| [evaluate(person.last), person.last] }
end</p>

<p>def evaluate(phrase)
  score = 0
  phrase.split(&lsquo;&rsquo;).each_with_index do |character, index|</p>

<pre><code>score += 1 if @search_value[index] == character
</code></pre>

<p>  end
  score
end</p>

<p>def normalize_population_score
  total = @population.inject(0) {|sum, person| sum + person.first }
  @population.map! {|person| [person.first.to_f / total * 100, person.last] }
end</p>

<p>def create_mating_pool
  mating_pool = []
  @population.each do |person|</p>

<pre><code>person.first.to_i.times { mating_pool &lt;&lt; person }
</code></pre>

<p>  end
  mating_pool.each {|i| puts i.inspect }
  mating_pool
end</p>

<p>@search_value = &ldquo;Mon royaume pour un cheval&rdquo;
@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;
@population_size = 100
@population = make_population
score_population
create_mating_pool
```</p>

<p>Si on lance ce programme, voici une sortie possible:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[1.9607843137254901, "xuo pqnnoRrKbvXoQUXbvNVHxA"]
[1.9607843137254901, "Yri QsIVwvnPsNouYLugGlZPEg"]
[1.9607843137254901, "MBxSiHlhlnlgeMwtiVIXNa eiC"]
[1.9607843137254901, "JggyWIGUdXwfpcpeRVVUGPzeFx"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
...
</code></pre>

<p>On voit que les individus ayant un pourcentage de 1 virgule quelque chose
ont une seule copie d'eux-mêmes, alors qu'un individu avec un pourcentage
de 5 virgule quelque chose a bien placé cinq copies de lui-même.
Comme il n'est pas possible de mettre 1.96 (ou 5.88) copie(s) j'ai utilisé
seulement la partie entière. C'est un vrai problème. Un pourcentage de 1.0
place une copie et un pourcentage de 1.99 place aussi une copie alors que
1.99 est en gros 2 fois meilleur que 1.0 ! Pire, un pourcentage de
0.99 est éliminé, et on a vu avec l'algorithme <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
que ça n'était pas une bonne chose. Encore pire, l'oubli de ces chiffres
après la virgule peut faire crasher notre programme ! Comment ? Si on
augmente la taille de la population, il devient plus que probable que
chaque individus totalise un pourcentage inférieur à 1%. Autrement dit,
le <em>mating pool</em> risque de rester vide… Tant qu'on gardera une population
de 100 individus ça devrait passer, mais il faudra bien résoudre ce
problème un jour. La prochaine fois on terminera notre algorithme
avec la reproduction.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/"/>
    <updated>2013-09-09T12:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">l'article précédent</a>
j'ai donné l'objectif de ce second algorithme, inspiré par le paradoxe du
singe savant, et on a vu comment construire la population de phrases.
Aujourd'hui, on se concentre sur la méthode d'évaluation, tout en
introduisant l'idée de «normaliser un score».</p>

<!-- more -->


<p>Une fois la population créée, il faut l'évaluer avant de pouvoir passer à
l'étape de sélection. Je rappelle que nos chromosomes (que j'appelle aussi
individus ou encore solutions potentielles) sont mémorisés dans une liste
contenant un score et une phrase (voir
<a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">Les algorithmes génétiques démystifiés 8</a>).</p>

<p>Voici comment j'évalue la population:</p>

<p>``` ruby
def evaluate_population
  @population.map! {|person| [evaluate(person.last), person.last] }
end</p>

<p>def evaluate(phrase)
  score = 0
  phrase.split(&lsquo;&rsquo;).each_with_index do |character, index|</p>

<pre><code>score += 1 if @search_value[index] == character
</code></pre>

<p>  end
  score
end
```</p>

<p>Je donne 1 point pour chaque lettre bien placée. C'est difficile de
faire plus simple. Je pense que dans un autre article, on expérimentera
une autre manière d'évaluer les phrases en attribuant aussi des points pour
les lettres mal placées.</p>

<p>Contrairement à l'algorithme précédent, je vais aller plus loin en
transformant ces scores en pourcentages. Utiliser les pourcentages sera
très utile pour la méthode de sélection que je développerais dans le
prochain article. Pour transformer les scores en pourcentages, on doit
d'abord les normaliser. Cela signifie qu'on va transformer chaque score en
un nombre compris entre 0 et 1. Pour normaliser, on calcule la somme de
tous les scores de la population et on divise chaque score par ce total.
Il suffit ensuite de multiplier par 100 pour avoir un pourcentage:</p>

<p><code>ruby
def normalize_population_score
  total = @population.inject(0) {|sum, person| sum + person.first }
  @population.map! {|person| [person.first.to_f / total * 100, person.last] }
end
</code></p>

<p>Finalement, on met tout ça ensemble dans une méthode:</p>

<p><code>ruby
def score_population
  evaluate_population
  normalize_population_score
end
</code></p>

<p>Voici notre programme <code>monkey.rb</code> pour l'instant:</p>

<p>``` ruby monkey.rb
def make_chromosome
  value = &ldquo;&rdquo;
  length = @search_value.size
  length.times { value += random_gene }
  [nil, value]
end</p>

<p>def random_gene
  @genes[rand(@genes.size)]
end</p>

<p>def make_population
  population = []
  @population_size.times { population &lt;&lt; make_chromosome }
  population
end</p>

<p>def score_population
  evaluate_population
  normalize_population_score
end</p>

<p>def evaluate_population
  @population.map! {|person| [evaluate(person.last), person.last] }
end</p>

<p>def evaluate(phrase)
  score = 0
  phrase.split(&lsquo;&rsquo;).each_with_index do |character, index|</p>

<pre><code>score += 1 if @search_value[index] == character
</code></pre>

<p>  end
  score
end</p>

<p>def normalize_population_score
  total = @population.inject(0) {|sum, person| sum + person.first }
  @population.map! {|person| [person.first.to_f / total * 100, person.last] }
end</p>

<p>@search_value = &ldquo;Mon royaume pour un cheval&rdquo;
@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;
@population_size = 100
@population = make_population
score_population
@population.each {|i| puts i.inspect }
```</p>

<p>Et voici ce que ça donne:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[2.083333333333333, "GPjvZUOnEHAwBuVPazOXXYhwaG"]
[0.0, "yQdkKetHFCUpMSMjVFwepXREhT"]
[4.166666666666666, "Fz pHfkVjyRoIhgGglvfWhXhpl"]
[0.0, "fwjafrGAalfDRhpnpAtUoNfVNU"]
[0.0, "zXxPlALVVKxGg sOUdKpSAdKNG"]
[0.0, "myoLBtIbKhfNQPnHUzqHkw Mjz"]
[0.0, "HXDVgzNAKoUhjbVPLLNikGdWqX"]
[0.0, "XQIqLRKNzrxXJUqWRFQpYozNMB"]
[0.0, "xuIIUHEwaAdFcVedVJXkTJjFEv"]
.
.
.
[6.25, " oFkamnafTYpazNMRPY KCEVLZ"]
[2.083333333333333, "JqxvMEowRmEzeRPUwXJdCQQ UB"]
</code></pre>

<p>La prochaine fois, on parlera de la méthode de sélection dite de
«la roue de la fortune», secondée par une piscine d'accouplement
(oui, c'est bien le terme, véridique !).</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 8 - Le paradoxe du singe savant]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/"/>
    <updated>2013-09-08T09:40:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans son livre <a href="http://natureofcode.com/">The nature of code</a>,
Daniel Shiffman consacre un chapitre aux algorithmes génétiques. Je lui
pique l'idée du prochain algorithme que je vais développer sur ce blog.</p>

<p>Cette fois j'aimerais vous montrer un algorithme génétique plus traditionnel,
dans l'esprit de la <em>méthode</em> développée par
<a href="http://en.wikipedia.org/wiki/John_Henry_Holland">John Holland</a>, qu'on peut
considerer comme le pionnier en la matière.</p>

<!-- more -->


<h2>Objectif</h2>

<p>Le but du jeu est d'obtenir la phrase suivante : «Mon royaume pour un
cheval». C'est une variante du
<a href="http://fr.wikipedia.org/wiki/Paradoxe_du_singe_savant">paradoxe du singe savant</a>.
Contrairement à <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l'algorithme précédent</a>, les chromosomes vont
être représentés par une simple phrase, et non par une chaîne de bits.
Cela va me permettre de me concentrer plus sur l'explication de la
méthode de sélection. Le programme sera encore écrit en Ruby, dans un
style procédural, pour permettre au plus grand nombre de le comprendre
facilement. La seule différence avec le style de code de
<a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l'algorithme précédent</a> est que je vais éviter les <em>nombres magiques</em>
pour pouvoir plus simplement personnalisé l'algorithme.</p>

<p>L'intérêt d'un problème aussi simple, et dont on connait déjà la solution,
est d'apprendre à avoir confiance dans les algorithmes génétiques.
Lorsqu'on passera plus tard à la résolution d'un problème inconnu, on n'aura
pas à se demander «est-ce-que ça fonctionne vraiment ?».</p>

<h2>Créer la population</h2>

<p>Voici le code qui va permettre de créer la population de solutions
potentielles:</p>

<p>``` ruby monkey.rb
def make_chromosome
  value = &ldquo;&rdquo;
  length = @search_value.size
  length.times { value += random_gene }
  [nil, value]
end</p>

<p>def random_gene
  @genes[rand(@genes.size)]
end</p>

<p>def make_population
  population = []
  @population_size.times { population &lt;&lt; make_chromosome }
  population
end</p>

<p>@search_value = &ldquo;Mon royaume pour un cheval&rdquo;
@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;
@population_size = 100
@population = make_population
@population.each {|i| puts i.inspect }
```</p>

<p>La fonction <code>make_chromosome</code> crée une phrase de la même taille que celle qu'on
recherche. Elle se sert de la fonction <code>random_gene</code> pour obtenir les gènes
au hasard. Un gène, ici, est une lettre minuscule ou majuscule, ou un espace.
<code>make_chromosome</code> renvoie une liste avec la phrase et une valeur nulle placée
au début. Cette valeur nulle sera remplacée plus tard par l'évaluation
de la phrase.</p>

<p>Voilà ce que donne le programme pour l'instant:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[nil, "OdjBvCjnhCGRukFKwbpnUbSGzR"]
[nil, "uVqkznTRQwbUkrxUklkWgIVfyv"]
[nil, "LIRrECVrjFZPqaoySxosMs hdX"]
[nil, "XghuLIEopQNUjECpnnhtISelLs"]
[nil, "ovkilBZhnFTMEweTDOjsDbcqXX"]
[nil, "tGkEbfscRscqqRfoCxtwPuRqVx"]
[nil, "FHnwlsnoHtHbXTzsJohbyaxjIb"]
[nil, "xNbSYbkULcgfootEBJwfYiZqrC"]
[nil, "RcQfonEVMQnbdZX k glNDphbB"]
.
.
.
[nil, "OZVyLLOkKbzZnYTTLNxGty NWh"]
[nil, "rPyGwpTjvUmblwXCqlYBUBtPmZ"]
[nil, "FSQPGCFqYMWhaEurBOnefJceoZ"]
[nil, "bsMFghPtlFfkYLpKWRohhSAHjY"]
[nil, "FFATOumGCSfviwnzobeZOaIOJx"]
[nil, "svVsIjmbuOBTxhfNCUgBrtoI j"]
[nil, "ZyIqsyTefpdTmqxLzSDDPrMxQf"]
[nil, "nbpmNBYOYcmEGI jbs RxocKzv"]
[nil, "FlsryVrgyaGiciJBUzOfJameCh"]
</code></pre>

<p>Dans le prochain article, on s'occupera d'évaluer cette population de
phrase.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 7]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/06/les-algorithmes-genetiques-demystifies-7/"/>
    <updated>2013-09-06T11:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/06/les-algorithmes-genetiques-demystifies-7</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p><a href="http://lkdjiin.github.io/blog/2013/09/05/les-algorithmes-genetiques-demystifies-6/">Hier</a>
on a amélioré l'algorithme grâce à la mutation. C'est mieux mais on
peut encore faire mieux. Aujourd'hui on parle un peu plus en détail de
la sélection et de la diversité génétique.</p>

<!-- more -->


<h2>La sélection</h2>

<p>Voici la méthode de sélection:</p>

<p><code>ruby
def selection
  @selected = @population[0...50].shuffle
end
</code></p>

<p>C'est clair et limpide : on conserve la meilleure moitié de la population.
Mais ça pose des problèmes. Que faire si un gène important pour notre
solution se trouve dans la moitié supprimée ? On a vu hier qu'en <em>théorie</em>
la mutation régle le problème. Mais en <em>pratique</em> on a vu aussi qu'on pouvait
atteindre 10.000 générations sans trouver la solution. Autre problème de
taille : l'individu classé à la 1ère place va produire quatre enfants,
tout comme l'invidu classé à la 50ème place. Pourtant il y a un monde entre
les deux. De même, il y a peu de différence entre la 50ème place et la
51ème, et pourtant l'un se reproduira et pas l'autre. Tout ceci semble assez
bancal et arbitraire. Dans un prochain article on explorera une méthode de
sélection plus <em>naturelle</em>, pour l'instant on va essayer d'augmenter le
nombre d'individus sélectionnés, juste pour voir:</p>

<p><code>ruby
def selection
  @selected = @population[0...80].shuffle
end
</code></p>

<h2>La diversité génétique</h2>

<p>Voici la méthode utilisée hier pour produire une nouvelle génération:</p>

<p>``` ruby
def next_generation
  @selection = selection
  @population = []
  25.times do</p>

<pre><code>parent1, parent2 = @selection.slice!(0, 2)
child1, child2 = crossover(parent1, parent2)
child3, child4 = crossover(parent1, parent2)
@population += [child1, child2, child3, child4]
</code></pre>

<p>  end
end
```</p>

<p>On va la changer ainsi:</p>

<p>``` ruby
def next_generation
  @selection = selection
  @population = []
  40.times do</p>

<pre><code>parent1, parent2 = @selection.slice!(0, 2)
child1, child2 = crossover(parent1, parent2)
@population += [child1, child2]
</code></pre>

<p>  end
  20.times { @population &lt;&lt; make_chromosome }
end
```</p>

<p>Tout d'abord on tient compte du fait que le nombre d'individus sélectionnés
a changé : il est maintenant de 80, on va donc former 40 couples. Ensuite,
chaque couple ne va produire que 2 enfants. Enfin, on complète notre
population avec 20 individus créés au hasard. Ce sont eux qui vont apporter
la diversité génétique qui nous faisait défaut.</p>

<p>J'ai testé plusieurs dizaines de fois, et la solution a toujours été
trouvée avant la 1000ème génération (généralement bien avant).
N'hésitez pas à faire des tests
en modifiant le nombre d'invidus sélectionnés, le taux de mutation,
la taille de la population initiale, etc.</p>

<p>La prochaine fois, j'aimerais trouver un problème (toujours très simple) où
les individus ne seraient pas codés sous forme de bits. Je vais chercher ça.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 6]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/05/les-algorithmes-genetiques-demystifies-6/"/>
    <updated>2013-09-05T13:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/05/les-algorithmes-genetiques-demystifies-6</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>La dernière fois on était resté sur un algorithme parfois <em>bloqué</em> par
l'extremum local. Aujourd'hui on arrange cela grâce à la mutation génétique.</p>

<!-- more -->


<p>Tout d'abord un petit mot sur la mutation génétique. Vous voyez peut-être
cela comme de sombres expériences de laboratoire, ou bien vous pensez à
Peter Parker mordu par une araignée radioactive et devenant Spiderman…
En fait, la mutation génétique est un phénomène tout à fait naturel, et
à l'origine de l'évolution des espèces. Pour ce qui nous intéresse ici, on
imaginera que, de temps en temps, un gène est <em>mal recopié</em>, ce qui va se
traduire par une inversion d'un bit dans un chromosome.</p>

<p>Voici la méthode qui est chargée de muter un chromosome:</p>

<p>``` ruby
def mutate(chromosome)
  bit = rand(48)
  value = chromosome.last
  if value[bit] == &ldquo;0&rdquo;</p>

<pre><code>value[bit] = "1"
</code></pre>

<p>  else</p>

<pre><code>value[bit] = "0"
</code></pre>

<p>  end
  [nil, value]
end
```</p>

<p>On sélectionne au hasard un bit parmi les 48 que comporte le chromosome,
puis on l'inverse. Enfin on retourne le nouveau chromosome. Pour voir ce
code à l'oeuvre, on peut écrire ceci:</p>

<p><code>ruby
c = make_chromosome
puts c.inspect
c = mutate(c)
puts c.inspect
</code></p>

<p>On peut voir qu'un bit a été inversé:</p>

<pre><code>[~/genetic]⇒ ruby test.rb 
[nil, "101000101001011110110000011000010000110011011110"]
[nil, "101000101001011110110000011000010000110010011110"]
</code></pre>

<p>Reste à savoir <em>quand</em> muter ? On considère généralement que le bon taux
de mutation se trouve entre 1/1000 et 1/100000. Ce qui nous donne la
méthode suivante:</p>

<p>``` ruby
def mutation
  @population.map do |individual|</p>

<pre><code>if rand(1000) == 0
  mutate(individual)
else
  individual
end
</code></pre>

<p>  end
end
```</p>

<p>Un individu sur 1000 va recevoir une mutation, ce qui va permettre d'apporter
du nouveau matériel génétique et, en théorie, d'éviter de tomber dans un
extremum local. Pour voir ce que ça donne, il faut modifier le code du
dernier article pour appliquer la mutation:</p>

<p>``` ruby
10000.times do |generation|
  score_population
  @population = @population.sort
  best = @population.first.first
  puts &ldquo;Generation: #{generation} Best: #{best}&rdquo;
  if best == 0</p>

<pre><code>genes = chromosome_to_gene(@population.first)
puts "Formula: #{genes_to_formula(genes)}"
exit
</code></pre>

<p>  end
  next_generation
  @population = mutation
end
```</p>

<p>Vous noterez au passage que je suis passé de 50 générations à 10000. Les
algorithmes génétiques n'ont vraiment de sens que sur un grand nombre de
générations. Voyons le résultat:</p>

<pre><code>[~/genetic]⇒ ruby test.rb 
Generation: 0 Best: 39
Generation: 1 Best: 100
Generation: 2 Best: 34
Generation: 3 Best: 88
Generation: 4 Best: 44
Generation: 5 Best: 19
Generation: 6 Best: 105
Generation: 7 Best: 47
Generation: 8 Best: 13
Generation: 9 Best: 13
Generation: 10 Best: 13
Generation: 11 Best: 2
Generation: 12 Best: 1
Generation: 13 Best: 3
Generation: 14 Best: 33
Generation: 15 Best: 19
Generation: 16 Best: 7
Generation: 17 Best: 9
Generation: 18 Best: 1
...
Generation: 465 Best: 1
Generation: 466 Best: 0
Formula: 88-1%3+900
</code></pre>

<p>Ça fonctionne ! Sauf que parfois…</p>

<p>Parfois on atteint la 10.000ème génération sans avoir la solution. Je l'ai
déjà dit et je le répète : un algorithme génétique ne peut pas garantir
que l'on trouvera la meilleure solution. Le problème avec notre algorithme
(dont je donne le code complet à la fin de l'article) tient sûrement dans
sa méthode de sélection ainsi que dans la manière dont on produit une
nouvelle génération. Il serait intéressant de voir ce qu'il se passe
en introduisant du sang frais, c'est à dire quelques individus produits
au hasard. Peut-être le sujet d'un prochain article ?</p>

<h2>Le code source entier</h2>

<p>``` ruby
def make_chromosome
  value = &ldquo;&rdquo;
  48.times { value += rand(0..1).to_s }
  [nil, value]
end</p>

<p>def make_population
  population = []
  100.times { population &lt;&lt; make_chromosome }
  population
end</p>

<p>def chromosome_to_gene(chromosome)
  chromosome.last.scan /.{4}/
end</p>

<p>def gene_to_operand(gene)
  case gene
  when &ldquo;0000&rdquo; then 0
  when &ldquo;0001&rdquo; then 1
  when &ldquo;0010&rdquo; then 2
  when &ldquo;0011&rdquo; then 3
  when &ldquo;0100&rdquo; then 4
  when &ldquo;0101&rdquo; then 5
  when &ldquo;0110&rdquo; then 6
  when &ldquo;0111&rdquo; then 7
  when &ldquo;1000&rdquo; then 8
  when &ldquo;1001&rdquo; then 9
  when &ldquo;1010&rdquo; then &ldquo;+&rdquo;
  when &ldquo;1011&rdquo; then &ldquo;&ndash;&rdquo;
  when &ldquo;1100&rdquo; then &ldquo;/&rdquo;
  when &ldquo;1101&rdquo; then &ldquo;%&rdquo;
  end
end</p>

<p>def selection
  @selected = @population[0&hellip;50].shuffle
end</p>

<p>def genes_to_formula(genes)
  formula = []
  genes.each {|gene| formula &lt;&lt; gene_to_operand(gene) }
  formula.join
end</p>

<p>def evaluation(genes)
  formula = genes_to_formula(genes)
  begin</p>

<pre><code>result = (@search_value - eval(formula)).abs
</code></pre>

<p>  rescue Exception</p>

<pre><code>result = 999_999_999_999
</code></pre>

<p>  end
  result = 999_999_999_999 unless result.is_a?(Integer)
  result
end</p>

<p>def score_population
  @population = @population.map do |individual|</p>

<pre><code>genes = chromosome_to_gene(individual)
individual[0] = evaluation(genes)
individual
</code></pre>

<p>  end
end</p>

<p>def crossover(parent1, parent2)
  point = rand(1..47)
  child1 = [nil, parent1.last[0&hellip;point] + parent2.last[point..-1]]
  child2 = [nil, parent2.last[0&hellip;point] + parent1.last[point..-1]]
  [child1, child2]
end</p>

<p>def next_generation
  @selection = selection
  @population = []
  25.times do</p>

<pre><code>parent1, parent2 = @selection.slice!(0, 2)
child1, child2 = crossover(parent1, parent2)
child3, child4 = crossover(parent1, parent2)
@population += [child1, child2, child3, child4]
</code></pre>

<p>  end
end</p>

<p>def mutation
  @population.map do |individual|</p>

<pre><code>if rand(1000) == 0
  mutate(individual)
else
  individual
end
</code></pre>

<p>  end
end</p>

<p>def mutate(chromosome)
  bit = rand(48)
  value = chromosome.last
  if value[bit] == &ldquo;0&rdquo;</p>

<pre><code>value[bit] = "1"
</code></pre>

<p>  else</p>

<pre><code>value[bit] = "0"
</code></pre>

<p>  end
  [nil, value]
end</p>

<p>@search_value = 987
@population = make_population</p>

<p>10000.times do |generation|
  score_population
  @population = @population.sort
  best = @population.first.first
  puts &ldquo;Generation: #{generation} Best: #{best}&rdquo;
  if best == 0</p>

<pre><code>genes = chromosome_to_gene(@population.first)
puts "Formula: #{genes_to_formula(genes)}"
exit
</code></pre>

<p>  end
  next_generation
  @population = mutation
end
```</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
