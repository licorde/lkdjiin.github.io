<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : problème des 8 dames | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/probleme-des-8-dames/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-03T12:27:42+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 27]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/"/>
    <updated>2013-10-02T12:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Maintenant qu'on a vu ce qu'était <em>en théorie</em> un extremum local, on
regarde <em>en pratique</em> comment il se manifeste dans les algorithmes
génétiques.</p>

<!-- more -->


<h2>Comment un extremum local se manifeste dans les algorithmes génétiques ?</h2>

<p>On va reprendre le <a href="http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/">dernier code</a>
sur le problème des 8 dames et modifier deux ou trois petites choses.
D'abord on s'assure d'avoir des soucis en passant la taille de l'échiquier
à 16, et on réduit le nombre de générations pour ne pas avoir à attendre
trop longtemps, 200 semble un bon compromis:</p>

<p><code>ruby
generations = 200
board_size = 16
</code></p>

<p>Puis on modifie la méthode <code>run</code> de la classe <code>GeneticAlgorithm</code> de cette
manière:</p>

<p>``` ruby
def run
  @generations.times do |generation|</p>

<pre><code>Evaluator.new(@board_size, @population).evaluate
best = @population.best
# display(generation, best)
if best.score &gt; 1.0
  best.display
  exit
end
next_generation
</code></pre>

<p>  end
  @population.each {|individual| p individual.chromosome }
end
```</p>

<p>La nouveauté est la ligne suivante:</p>

<p><code>ruby
  @population.each {|individual| p individual.chromosome }
</code></p>

<p>Ainsi, au bout de 200 générations, on affiche la liste des chromosomes.
Pour ceux qui ne connaisse pas Ruby, <code>p x</code> est un raccourci pour
<code>puts x.inspect</code>.</p>

<p>J'ai aussi pris soin de commenter la ligne <code>display(generation, best)</code>
pour pouvoir enregistrer plus tard le résultat dans un fichier sans que
celui-ci soit pollué par des données inutiles.</p>

<p>Quand on lance le programme, on obtient quelque chose comme ça:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 14, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 11, 3]
[10, 8, 5, 11, 2, 0, 15, 12, 9, 13, 1, 4, 14, 7, 14, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 11, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 14, 3]
...
</code></pre>

<p>Les chromosomes sont tous identiques, ou presque ! Pour savoir à quel
point ils sont identiques, on peut les compter à la main (!?) où écrire
un petit script de trois lignes:</p>

<p><code>ruby 8_queens_stat.rb
hash = Hash.new(0)
File.open(ARGV.first, "r").each_line {|line| hash[line] += 1 }
hash.each {|key, value| puts "#{"%3d" % value} =&gt; #{key}" }
</code></p>

<p><strong>Edit 3 octobre 2013</strong> Si vous ne comprenez pas le script ci-dessus,
voici <a href="http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash/">une explication</a>.</p>

<p>L'explication de ce script dépasse le cadre de cet article, l'objectif
étant de savoir combien de chromosomes sont identiques. Pour cela on
refait tourner notre algorithme génétique en enregistrant le résultat
(c'est à dire la liste des chromosomes après 200 générations) dans un
fichier:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb &gt; result.txt
</code></pre>

<p>Puis on fait travailler notre script sur ce fichier:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens_stat.rb result.txt
971 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 2, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 8, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 12, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 0]
  2 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 9, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 13, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  3 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 6]
  8 =&gt; [3, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 2, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 14]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 3, 4]
  1 =&gt; [1, 7, 13, 3, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 5, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 13, 10, 2, 4]
  1 =&gt; [1, 7, 14, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 3, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  2 =&gt; [1, 7, 13, 11, 4, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 14, 2, 4]
</code></pre>

<p>971 chromosomes sur 1000 sont identiques ! Question diversité génétique
on repassera… Voilà donc comment un extremum local se manifeste dans
un algorithme génétique: toutes les solutions convergent vers un même
point. L'algorithme ne peut plus produire de nouvelles solutions originales,
il patauge. Les quelques chromosomes différents, 29 sur 1000 dans ce cas là
(ou encore 2,9%) s'expliquent en grande partie par la mutation.</p>

<p>Si vous étudiez en détail le résultat ci-dessus, vous verrez que chaque
chromosome différent ne diffère du chromosome majoritaire que par un
seul de ses gènes. C'est la clé pour comprendre pourquoi la mutation
semble impuissante à nous aider dans ce problème des 8 dames, alors que
tout avait bien fonctionné avec le paradoxe du singe savant. On verra
ça dans le prochain article.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 24]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/"/>
    <updated>2013-09-27T18:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Maintenant vous connaissez bien la procédure : on trouve comment représenter
les chromosomes, comment les évaluer, puis une fois la population
initialisée on sélectionne, on croise, on mute…</p>

<!-- more -->


<p>Dernièrement on s'est occupé des chromosomes, de l'évaluation et de la
population. Reste à sélectionner, croiser, muter.
Je ne vais pas trop m'étendre sur le code permettant de faire ceci puisqu'il
s'agit pratiquement d'un copier/coller des classes développées
précédement. Voici le code permettant de résoudre le problème des
8 dames:</p>

<p>``` ruby 8_queens.rb
class Individual
  def self.random(chromosome_size)</p>

<pre><code>new(nil, chromosome_size)
</code></pre>

<p>  end</p>

<p>  def self.from_chromosome(chromosome)</p>

<pre><code>new(chromosome)
</code></pre>

<p>  end</p>

<p>  def display</p>

<pre><code>@chromosome.each do |queen_position|
  row = ""
  @chromosome.size.times do |cell|
    row += (cell == queen_position) ? "Q" : "."
  end
  puts row
end
</code></pre>

<p>  end</p>

<p>  attr_accessor :score, :fitness
  attr_reader :chromosome</p>

<p>  def initialize(chromosome = nil, chromosome_size = nil)</p>

<pre><code>if chromosome
  @chromosome = chromosome
else
  @chromosome = []
  chromosome_size.times { @chromosome &lt;&lt; Gene.random(chromosome_size) }
end
</code></pre>

<p>  end
  private_class_method :new
end</p>

<p>class Gene
  def self.random(limit)</p>

<pre><code>rand(limit)
</code></pre>

<p>  end
end</p>

<p>class Population &lt; Array
  def initialize(chromosome_size, population_size)</p>

<pre><code>population_size.times { self &lt;&lt; Individual.random(chromosome_size) }
</code></pre>

<p>  end</p>

<p>  def best</p>

<pre><code>self.sort_by{|individual| individual.score}.last
</code></pre>

<p>  end
end</p>

<p>class Evaluator
  def initialize(board_size, population)</p>

<pre><code>@board_size = board_size
@population = population
</code></pre>

<p>  end</p>

<p>  def evaluate</p>

<pre><code>@population.each {|individual| score(individual) }
fitness
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def score(individual)</p>

<pre><code>individual.score = 1.0 / conflicts(individual)
</code></pre>

<p>  end</p>

<p>  def conflicts(individual)</p>

<pre><code>board = individual.chromosome
score = 0
@board_size.times do |row1|
  gene1 = board[row1]
  (row1+1...@board_size).each do |row2|
    gene2 = board[row2]
    score += 1 if gene1 == gene2
    score += 1 if row2 - row1 == (gene1 - gene2).abs
  end
end
score
</code></pre>

<p>  end</p>

<p>  def fitness</p>

<pre><code>total = @population.inject(0) {|sum, individual| sum + individual.score }
@population.each do |individual|
  individual.fitness = individual.score.to_f / total * @population.size
end
</code></pre>

<p>  end
end</p>

<p>class GeneticAlgorithm
  def initialize(generations, population, board_size, mutation_rate)</p>

<pre><code>@generations = generations
@population = population
@board_size = board_size
@mutation_rate = mutation_rate
@crossover = Crossover.new(board_size, mutation_rate)
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code>@generations.times do |generation|
  Evaluator.new(@board_size, @population).evaluate
  best = @population.best
  display(generation, best)
  if best.score &gt; 1.0
    best.display
    exit
  end
  next_generation
end
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def display(generation, best)</p>

<pre><code>puts "----------------------"
puts "Gen: #{generation}"
puts "Best: #{best.score}"
</code></pre>

<p>  end</p>

<p>  def next_generation</p>

<pre><code>pool = MatingPool.new(@population)
population_size = @population.size
@population.clear
population_size.times do
  @population &lt;&lt; @crossover.two_point(pool.random, pool.random)
end
</code></pre>

<p>  end
end</p>

<p>class MatingPool
  def initialize(population)</p>

<pre><code>@mating_pool = []
population.each do |individual|
  integer_part = individual.fitness.to_i
  real_part = individual.fitness - integer_part
  integer_part.times { @mating_pool &lt;&lt; individual.dup }
  @mating_pool &lt;&lt; individual.dup if rand &lt; real_part
end
@size = @mating_pool.size
</code></pre>

<p>  end</p>

<p>  def random</p>

<pre><code>@mating_pool[rand(@size)]
</code></pre>

<p>  end
end</p>

<p>class Crossover
  def initialize(chromosome_size, mutation_rate)</p>

<pre><code>@size = chromosome_size
@rate = mutation_rate
@mutator = Mutator.new(@size, @rate)
</code></pre>

<p>  end</p>

<p>  def two_point(parent1, parent2)</p>

<pre><code>child = assemble(parent1, parent2, two_cut_points)
child = @mutator.mutate(child)
Individual.from_chromosome(child)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def two_cut_points</p>

<pre><code>point1 = cut_point
point2 = cut_point
point1, point2 = point2, point1 if point1 &gt; point2
[point1, point2]
</code></pre>

<p>  end</p>

<p>  def cut_point</p>

<pre><code>rand(@size)
</code></pre>

<p>  end</p>

<p>  def assemble(parent1, parent2, points)</p>

<pre><code>point1, point2 = points
parent1.chromosome[0...point1] + 
  parent2.chromosome[point1..point2] +
  parent1.chromosome[point2+1..-1]
</code></pre>

<p>  end
end</p>

<p>class Mutator
  def initialize(chromosome_size, mutation_rate)</p>

<pre><code>@size = chromosome_size
@rate = mutation_rate
</code></pre>

<p>  end</p>

<p>  def mutate(chromosome)</p>

<pre><code>@size.times do |index|
  if rand &lt; @rate
    chromosome[index] = Gene.random(@size)
  end
end
chromosome
</code></pre>

<p>  end
end</p>

<p>generations = 500
board_size = 8
population = Population.new(board_size, 1000)
mutation = 0.001
GeneticAlgorithm.new(generations, population, board_size, mutation).run
```</p>

<p>J'ai seulement ajouter une méthode <code>display</code> à la classe <code>Individual</code> pour
afficher à l'écran une représentation de la solution. Voilà le programme
en marche:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb 
----------------------
Gen: 0
Best: 0.5
----------------------
Gen: 1
Best: 0.5
.
.
.
Gen: 11
Best: 1.0
----------------------
Gen: 12
Best: Infinity
.......Q
.Q......
...Q....
Q.......
......Q.
....Q...
..Q.....
.....Q..
</code></pre>

<p>Cool ! Une solution en 12 générations. J'ai écrit récemment que trouver
une solution pour un échiquier de 8 x 8 cases ne serait pas difficile.
Et bien voilà, c'est fait. J'ai écrit aussi qu'il serait plus intéressant de
voir ce qu'il se passe avec des plateaux plus grands. Si on essaye en
doublant les dimensions:</p>

<p><code>ruby
board_size = 16
</code></p>

<p>On aura de grandes chances de voir ce type de sortie:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb 
----------------------
Gen: 0
Best: 0.125
----------------------
Gen: 1
Best: 0.16666666666666666
.
.
.
Gen: 70
Best: 0.5
----------------------
Gen: 71
Best: 1.0
.
.
.
----------------------
Gen: 499
Best: 1.0
</code></pre>

<p>Plus de 400 générations coincées sur le même résultat. Vous pensiez en
avoir fini avec les extremums locaux ? Et ben non, ils ne sont jamais
bien loin. 3 questions:</p>

<ol>
<li>Comment je sais que l'algorithme est coinçé dans un extremum local ?</li>
<li>Pourquoi cet algorithme coinçe alors qu'il est écrit comme le
précédent qui lui, ne coinçait pas ?</li>
<li>Comment on s'en sort ?</li>
</ol>


<p>Avant de répondre à cela, je pense qu'il est plus que temps d'expliquer
quelques petites choses sur les extremums locaux:</p>

<ol>
<li>Qu'est ce que c'est qu'un extremum local ?</li>
<li>Comment un extremum local se manifeste dans les algorithmes génétiques ?</li>
</ol>


<p>J'ai mon sujet pour le prochain article…</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 23]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23/"/>
    <updated>2013-09-26T18:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/26/les-algorithmes-genetiques-demystifies-23</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Pour évaluer une solution potentielle dans le problème des 8 dames, on va
devoir calculer le nombre de paires de dames qui sont en conflit (en prise,
pour les joueurs d'échecs).</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/">l'article précédent</a>
on a mis en place la classe <code>Evaluator</code>, mais il manquait une partie
déterminante: le calcul du nombre de conflits. Le voici:</p>

<p>``` ruby
  def conflicts(individual)</p>

<pre><code>board = individual.chromosome
score = 0
@board_size.times do |row1|
  gene1 = board[row1]
  (row1+1...@board_size).each do |row2|
    gene2 = board[row2]
    score += 1 if gene1 == gene2
    score += 1 if row2 - row1 == (gene1 - gene2).abs
  end
end
score
</code></pre>

<p>  end
```</p>

<p>Je ne suis pas très satisfait de cette méthode, elle est assez imposante
(trop longue) et difficile à lire (pas claire). Néanmoins elle fait son
travail et c'est ce qui compte pour l'instant. Je ferais peut-être du
refactoring plus tard (ou bien c'est un lecteur charitable qui va nous
le faire ?). Une explication s'impose:</p>

<p>``` ruby</p>

<pre><code>@board_size.times do |row1|
  gene1 = board[row1]
</code></pre>

<p>```</p>

<p>On a une première itération sur chaque rangées. Dans chaque boucle, la variable
<code>gene1</code> reçoit la position de la dame de cette rangée, c'est à dire
le numéro de la colonne (base 0). On va ensuite
comparer cette dame avec les dames des rangées suivantes:</p>

<p>``` ruby</p>

<pre><code>  (row1+1...@board_size).each do |row2|
    gene2 = board[row2]
</code></pre>

<p>```</p>

<p>Dans cette seconde itération, <code>gene2</code> reçoit successivement les positions
de chaque dames restantes. On peut maintenant regarder si deux dames sont
dans la même colonne:</p>

<p>``` ruby</p>

<pre><code>    score += 1 if gene1 == gene2
</code></pre>

<p>```</p>

<p>Ça se passe de commentaire… Pour savoir si deux dames sont sur une
même diagonale, c'est un peu plus tordu:</p>

<p>``` ruby</p>

<pre><code>    score += 1 if row2 - row1 == (gene1 - gene2).abs
</code></pre>

<p>```</p>

<p>Je vois un peu ça comme un problème de géométrie. Si deux dames ont le
même écart en nombre de colonnes et en nombre de rangées, c'est qu'elles
partagent la même diagonale.</p>

<p>Cet article n'était pas vraiment orienté algorithme génétique mais je pense
qu'il était pourtant nécessaire. Si on a pas une bonne fonction d'évaluation,
un algorithme génétique n'est d'aucune aide. C'est pour ça que la première
chose que je fais quand j'aborde un nouveau problème c'est de réfléchir au
combo évaluation/chromosome jusqu'à en avoir une vision claire.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 22]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22/"/>
    <updated>2013-09-25T14:22:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/25/les-algorithmes-genetiques-demystifies-22</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir trouver comment représenter un chromosome pour le
problème des 8 dames (<a href="http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/">article précédent</a>),
on regarde aujourd'hui comment réaliser l'évaluation de la population.</p>

<!-- more -->


<p>Sans plus attendre, voici la classe <code>Evaluator</code> dans toute sa
splendeur, on la détaille après:</p>

<p>``` ruby
class Evaluator
  def initialize(board_size, population)</p>

<pre><code>@board_size = board_size
@population = population
</code></pre>

<p>  end</p>

<p>  def evaluate</p>

<pre><code>@population.each {|individual| score(individual) }
fitness
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def score(individual)</p>

<pre><code>individual.score = 1.0 / conflicts(individual)
</code></pre>

<p>  end</p>

<p>  def conflicts(individual)</p>

<pre><code># Calcule et renvoie le nombre de paires de dames en conflits.
</code></pre>

<p>  end</p>

<p>  def fitness</p>

<pre><code>total = @population.inject(0) {|sum, individual| sum + individual.score }
@population.each do |individual|
  individual.fitness = individual.score.to_f / total * @population.size
end
</code></pre>

<p>  end
end
```</p>

<p>Tout d'abord le constucteur:</p>

<p><code>ruby
  def initialize(board_size, population)
</code></p>

<p>Il prends comme paramêtre la taille de l'échiquier et la population à
évaluer. Trouver une solution pour un échiquier de 8 x 8 cases ne
devrait pas être trop difficile et il sera plus intéressant de voir
comment l'algorithme se débrouille avec des échiquiers de plus grande
taille.</p>

<p>La méthode <code>evalute</code> est identique à celle de la
<a href="http://lkdjiin.github.io/blog/2013/09/19/les-algorithmes-genetiques-demystifies-18/">dernière fois</a>:
elle calcule le <em>score</em> puis le <em>fitness</em> de chaque individu.</p>

<p>Passons à la méthode <code>conflicts</code>, qui n'est pas encore implémentée:</p>

<p>``` ruby
  def conflicts(individual)</p>

<pre><code># Calcule et renvoie le nombre de paires de dames en conflits.
</code></pre>

<p>  end
```</p>

<p>C'est en calculant le nombre de paires de dames en conflits qu'on pourra
évaluer les différentes positions. Plus il y a de conflits, plus on est
loin d'une solution. À l'inverse, une solution possède zéro conflits.
L'implémentation sera pour la prochaine fois.</p>

<p>Voyons maintenant la méthode <code>score</code>:</p>

<p>``` ruby
  def score(individual)</p>

<pre><code>individual.score = 1.0 / conflicts(individual)
</code></pre>

<p>  end
```</p>

<p>Pourquoi diviser 1 par le nombre de conflits ? Pourquoi ne pas avoir écrit
simplement <code>individual.score = conflicts(individual)</code> ?
Parce que je ne trouve pas naturel qu'un score de zéro soit meilleur qu'un
score de 5, 10, 20, etc. Je préfère donc calculer l'inverse du nombre de
conflits. De cette manière si il y a 10 conflits, le score sera 0,1 et si il
y a 2 conflits le score sera 0,5. Et si il y a zéro conflits ? Ruby ne pose
pas de problème avec les nombres réèls:</p>

<p>``` irb
[~]⇒ irb</p>

<blockquote><blockquote><p>1.0 / 0
Infinity
```</p></blockquote></blockquote>

<p>Je saurais donc que j'ai trouvé une solution quand un score sera supérieur
à 1. Avec d'autres langages on peut gérer ça avec des exceptions, des erreurs,
détecter la division par zéro avant de la faire, etc. Ou encore ajouter
une petite valeur au nombre de conflits, par exemple:</p>

<pre><code>score = 1.0 / (nombre_de_conflits + 0.1)
</code></pre>

<p>La prochaine fois on verra comment calculer le nombre de conflits.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 21: Problème des 8 dames]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames/"/>
    <updated>2013-09-24T10:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/24/les-algorithmes-genetiques-demystifies-21-probleme-des-8-dames</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>On va tenter de résoudre le problème des 8 dames à l'aide d'un algorithme
génétique.</p>

<p><blockquote><p>Le but du problème des huit dames est de placer huit dames d'un jeu d'échecs sur un échiquier de 8 × 8 cases sans que les dames ne puissent se menacer mutuellement, conformément aux règles du jeu d'échecs (la couleur des pièces étant ignorée). Par conséquent, deux dames ne devraient jamais partager la même rangée, colonne, ou diagonale.</p><footer><strong>Wikipédia <a href="http://fr.wikipedia.org/wiki/Probl%C3%A8me_des_huit_dames">http://fr.wikipedia.org/wiki/Probl%C3%A8me_des_huit_dames</a></strong></footer></blockquote></p>

<!-- more -->


<p>Avant toute chose, il faut trouver comment nos chromosomes vont pouvoir
représenter une solution potentielle. On pourrait coder ça sous forme
d'une chaîne de 64 bits, un par case, les 0 étants des cases vides et
les 1 étants les cases occupées par les dames. On pourrait aussi les coder
comme un tableau à deux dimensions, soit 8 rangées multipliées par 8 colonnes.
En y regardant de plus près (ou simplement en relisant la définition du
problème), on remarque que pour qu'une solution soit
viable, il faut une seule dame par rangée, une seule par colonne et une
seule par diagonale. On peut donc se contenter d'une liste (un tableau) de
8 nombres entiers, ces nombres étants le numéro de la colonne. Ainsi, pour
un échiquier de 4 x 4 cases, la liste <code>[0, 2, 3, 3]</code> équivaut à la position
suivante:</p>

<pre><code>---------
|D| | | |
---------
| | |D| |
---------
| | | |D|
---------
| | | |D|
---------
</code></pre>

<p>Maintenant on peut s'occuper de la population. Je vais me servir du code
objet développé dans les derniers articles, en essayant de le modifier
le moins possible.</p>

<p>``` ruby
class Individual
  def self.random(chromosome_size)</p>

<pre><code>new(nil, chromosome_size)
</code></pre>

<p>  end</p>

<p>  def self.from_chromosome(chromosome)</p>

<pre><code>new(chromosome)
</code></pre>

<p>  end</p>

<p>  attr_accessor :score, :fitness
  attr_reader :chromosome</p>

<p>  def initialize(chromosome = nil, chromosome_size = nil)</p>

<pre><code>if chromosome
  @chromosome = chromosome
else
  @chromosome = []
  chromosome_size.times { @chromosome &lt;&lt; Gene.random(chromosome_size) }
end
</code></pre>

<p>  end
  private_class_method :new
end</p>

<p>class Gene
  def self.random(limit)</p>

<pre><code>rand(limit)
</code></pre>

<p>  end
end</p>

<p>class Population &lt; Array
  def initialize(chromosome_size, population_size)</p>

<pre><code>population_size.times { self &lt;&lt; Individual.random(chromosome_size) }
</code></pre>

<p>  end</p>

<p>  def best</p>

<pre><code>self.sort_by{|individual| individual.score}.last
</code></pre>

<p>  end
end
```</p>

<p>J'ai été obligé de modifier la méthode <code>initialize</code> de la classe <code>Individual</code>
ainsi que la classe <code>Gene</code>. Il faudra en tenir compte si on veut qu'un
framework sorte de tout ça…</p>

<p>Le prochain article traitera de l'évaluation du problème des 8 dames.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
