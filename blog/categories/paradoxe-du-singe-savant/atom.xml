<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : paradoxe du singe savant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/paradoxe-du-singe-savant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-09-10T09:32:53+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 10]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10/"/>
    <updated>2013-09-10T08:44:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/10/les-algorithmes-genetiques-demystifies-10</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/">l'article précédent</a>
on a appris à évaluer la population en normalisant les scores.
Aujourd'hui on s'attaque à la méthode de sélection dite de
«la roue de la fortune».</p>

<!-- more -->


<p>Dans l'algorithme génétique <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
j'utilisais une méthode de sélection <em>artificielle</em> qu'on appelle
l'élitisme : je conservais un certain nombre des meilleurs
individus d'une génération, en éliminant purement et simplement les
autres. J'ai commencé par présenter cette méthode, l'élitisme, car c'est
la plus simple. On a ainsi pu se concentrer sur d'autres parties des
algorithmes génétiques. Seulement voilà, on a vu que cette méthode de
sélection posait certains problèmes, notamment l'appauvrissement du
patrimoine génétique. La méthode de la roue de la fortune va donner une
chance à tout individu porteur d'un bon gène de le transmettre à la
génération suivante. Mais bien sûr, certains auront plus de chances
que d'autres…</p>

<h2>La roue de la fortune</h2>

<p>Imaginez une roue de la fortune où chaque case représenterait un individu.
Imaginez que plus l'individu est adapté, plus sa case sur cette roue est
large. Autrement dit, un meilleur individu à une case qui occupe un
pourcentage plus important de la roue qu'un moins bon individu. Tiens !
Ça tombe bien, la dernière fois on a justement transformé les scores en
pourcentages.</p>

<p>On va utiliser cette image de la roue de la
fortune pour sélectionner des individus en vue de la reproduction.
Je vais prendre un exemple : supposons une population de 5 individus nommés
A, B, C, D et E. Après évaluation nous pourrions avoir:</p>

<pre><code>A 40%
B 30%
C 20%
D 10%
E  0%
</code></pre>

<p>Pour simuler le principe de la roue de la fortune, nous allons créer une
sélection avec 40 copies de A, 30 copies de B, 20 copies de C et 10 copies
de D. Quand le moment de la reproduction sera venu, on tirera au sort des
couples de parents. De cette manière, les plus adaptés auront plus de
chances de transmettre leurs gènes, mais même les moins adaptés auront aussi
leur chance. L'endroit où l'on place les individus sélectionnés (suivant le
langage : une liste, un tableau, etc) est appellé <em>mating pool</em>, qu'on peut
traduire par piscine d'accouplement. J'aurais préféré un terme qui fasse
moins laboratoire, comme «club de rencontre»…</p>

<p>Voyons le code pour créer ce fameux <em>mating pool</em>:</p>

<p>``` ruby
def create_mating_pool
  mating_pool = []
  @population.each do |person|</p>

<pre><code>person.first.to_i.times { mating_pool &lt;&lt; person }
</code></pre>

<p>  end
  # mating_pool.each {|i| puts i.inspect }
  mating_pool
end
```</p>

<p>La ligne commentée ne sera pas incluse dans le programme final,
mais elle va servir aujourd'hui pour voir ce qu'il se passe et
identifier un souci. Voici le code complet du programme, jusqu'à maintenant:</p>

<p>``` ruby monkey.rb
def make_chromosome
  value = &ldquo;&rdquo;
  length = @search_value.size
  length.times { value += random_gene }
  [nil, value]
end</p>

<p>def random_gene
  @genes[rand(@genes.size)]
end</p>

<p>def make_population
  population = []
  @population_size.times { population &lt;&lt; make_chromosome }
  population
end</p>

<p>def score_population
  evaluate_population
  normalize_population_score
end</p>

<p>def evaluate_population
  @population.map! {|person| [evaluate(person.last), person.last] }
end</p>

<p>def evaluate(phrase)
  score = 0
  phrase.split(&lsquo;&rsquo;).each_with_index do |character, index|</p>

<pre><code>score += 1 if @search_value[index] == character
</code></pre>

<p>  end
  score
end</p>

<p>def normalize_population_score
  total = @population.inject(0) {|sum, person| sum + person.first }
  @population.map! {|person| [person.first.to_f / total * 100, person.last] }
end</p>

<p>def create_mating_pool
  mating_pool = []
  @population.each do |person|</p>

<pre><code>person.first.to_i.times { mating_pool &lt;&lt; person }
</code></pre>

<p>  end
  mating_pool.each {|i| puts i.inspect }
  mating_pool
end</p>

<p>@search_value = &ldquo;Mon royaume pour un cheval&rdquo;
@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;
@population_size = 100
@population = make_population
score_population
create_mating_pool
```</p>

<p>Si on lance ce programme, voici une sortie possible:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[1.9607843137254901, "xuo pqnnoRrKbvXoQUXbvNVHxA"]
[1.9607843137254901, "Yri QsIVwvnPsNouYLugGlZPEg"]
[1.9607843137254901, "MBxSiHlhlnlgeMwtiVIXNa eiC"]
[1.9607843137254901, "JggyWIGUdXwfpcpeRVVUGPzeFx"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
[5.88235294117647, "HPIJqwyYbgZEboKAkVEsFVeNTa"]
...
</code></pre>

<p>On voit que les individus ayant un pourcentage de 1 virgule quelque chose
ont une seule copie d'eux-mêmes, alors qu'un individu avec un pourcentage
de 5 virgule quelque chose a bien placé cinq copies de lui-même.
Comme il n'est pas possible de mettre 1.96 (ou 5.88) copie(s) j'ai utilisé
seulement la partie entière. C'est un vrai problème. Un pourcentage de 1.0
place une copie et un pourcentage de 1.99 place aussi une copie alors que
1.99 est en gros 2 fois meilleur que 1.0 ! Pire, un pourcentage de
0.99 est éliminé, et on a vu avec l'algorithme <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">précédent</a>
que ça n'était pas une bonne chose. Encore pire, l'oubli de ces chiffres
après la virgule peut faire crasher notre programme ! Comment ? Si on
augmente la taille de la population, il devient plus que probable que
chaque individus totalise un pourcentage inférieur à 1%. Autrement dit,
le <em>mating pool</em> risque de rester vide… Tant qu'on gardera une population
de 100 individus ça devrait passer, mais il faudra bien résoudre ce
problème un jour. La prochaine fois on terminera notre algorithme
avec la reproduction.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 9]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9/"/>
    <updated>2013-09-09T12:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/09/les-algorithmes-genetiques-demystifies-9</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">l'article précédent</a>
j'ai donné l'objectif de ce second algorithme, inspiré par le paradoxe du
singe savant, et on a vu comment construire la population de phrases.
Aujourd'hui, on se concentre sur la méthode d'évaluation, tout en
introduisant l'idée de «normaliser un score».</p>

<!-- more -->


<p>Une fois la population créée, il faut l'évaluer avant de pouvoir passer à
l'étape de sélection. Je rappelle que nos chromosomes (que j'appelle aussi
individus ou encore solutions potentielles) sont mémorisés dans une liste
contenant un score et une phrase (voir
<a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">Les algorithmes génétiques démystifiés 8</a>).</p>

<p>Voici comment j'évalue la population:</p>

<p>``` ruby
def evaluate_population
  @population.map! {|person| [evaluate(person.last), person.last] }
end</p>

<p>def evaluate(phrase)
  score = 0
  phrase.split(&lsquo;&rsquo;).each_with_index do |character, index|</p>

<pre><code>score += 1 if @search_value[index] == character
</code></pre>

<p>  end
  score
end
```</p>

<p>Je donne 1 point pour chaque lettre bien placée. C'est difficile de
faire plus simple. Je pense que dans un autre article, on expérimentera
une autre manière d'évaluer les phrases en attribuant aussi des points pour
les lettres mal placées.</p>

<p>Contrairement à l'algorithme précédent, je vais aller plus loin en
transformant ces scores en pourcentages. Utiliser les pourcentages sera
très utile pour la méthode de sélection que je développerais dans le
prochain article. Pour transformer les scores en pourcentages, on doit
d'abord les normaliser. Cela signifie qu'on va transformer chaque score en
un nombre compris entre 0 et 1. Pour normaliser, on calcule la somme de
tous les scores de la population et on divise chaque score par ce total.
Il suffit ensuite de multiplier par 100 pour avoir un pourcentage:</p>

<p><code>ruby
def normalize_population_score
  total = @population.inject(0) {|sum, person| sum + person.first }
  @population.map! {|person| [person.first.to_f / total * 100, person.last] }
end
</code></p>

<p>Finalement, on met tout ça ensemble dans une méthode:</p>

<p><code>ruby
def score_population
  evaluate_population
  normalize_population_score
end
</code></p>

<p>Voici notre programme <code>monkey.rb</code> pour l'instant:</p>

<p>``` ruby monkey.rb
def make_chromosome
  value = &ldquo;&rdquo;
  length = @search_value.size
  length.times { value += random_gene }
  [nil, value]
end</p>

<p>def random_gene
  @genes[rand(@genes.size)]
end</p>

<p>def make_population
  population = []
  @population_size.times { population &lt;&lt; make_chromosome }
  population
end</p>

<p>def score_population
  evaluate_population
  normalize_population_score
end</p>

<p>def evaluate_population
  @population.map! {|person| [evaluate(person.last), person.last] }
end</p>

<p>def evaluate(phrase)
  score = 0
  phrase.split(&lsquo;&rsquo;).each_with_index do |character, index|</p>

<pre><code>score += 1 if @search_value[index] == character
</code></pre>

<p>  end
  score
end</p>

<p>def normalize_population_score
  total = @population.inject(0) {|sum, person| sum + person.first }
  @population.map! {|person| [person.first.to_f / total * 100, person.last] }
end</p>

<p>@search_value = &ldquo;Mon royaume pour un cheval&rdquo;
@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;
@population_size = 100
@population = make_population
score_population
@population.each {|i| puts i.inspect }
```</p>

<p>Et voici ce que ça donne:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[2.083333333333333, "GPjvZUOnEHAwBuVPazOXXYhwaG"]
[0.0, "yQdkKetHFCUpMSMjVFwepXREhT"]
[4.166666666666666, "Fz pHfkVjyRoIhgGglvfWhXhpl"]
[0.0, "fwjafrGAalfDRhpnpAtUoNfVNU"]
[0.0, "zXxPlALVVKxGg sOUdKpSAdKNG"]
[0.0, "myoLBtIbKhfNQPnHUzqHkw Mjz"]
[0.0, "HXDVgzNAKoUhjbVPLLNikGdWqX"]
[0.0, "XQIqLRKNzrxXJUqWRFQpYozNMB"]
[0.0, "xuIIUHEwaAdFcVedVJXkTJjFEv"]
.
.
.
[6.25, " oFkamnafTYpazNMRPY KCEVLZ"]
[2.083333333333333, "JqxvMEowRmEzeRPUwXJdCQQ UB"]
</code></pre>

<p>La prochaine fois, on parlera de la méthode de sélection dite de
«la roue de la fortune», secondée par une piscine d'accouplement
(oui, c'est bien le terme, véridique !).</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 8 - Le paradoxe du singe savant]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/"/>
    <updated>2013-09-08T09:40:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans son livre <a href="http://natureofcode.com/">The nature of code</a>,
Daniel Shiffman consacre un chapitre aux algorithmes génétiques. Je lui
pique l'idée du prochain algorithme que je vais développer sur ce blog.</p>

<p>Cette fois j'aimerais vous montrer un algorithme génétique plus traditionnel,
dans l'esprit de la <em>méthode</em> développée par
<a href="http://en.wikipedia.org/wiki/John_Henry_Holland">John Holland</a>, qu'on peut
considerer comme le pionnier en la matière.</p>

<!-- more -->


<h2>Objectif</h2>

<p>Le but du jeu est d'obtenir la phrase suivante : «Mon royaume pour un
cheval». C'est une variante du
<a href="http://fr.wikipedia.org/wiki/Paradoxe_du_singe_savant">paradoxe du singe savant</a>.
Contrairement à <a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l'algorithme précédent</a>, les chromosomes vont
être représentés par une simple phrase, et non par une chaîne de bits.
Cela va me permettre de me concentrer plus sur l'explication de la
méthode de sélection. Le programme sera encore écrit en Ruby, dans un
style procédural, pour permettre au plus grand nombre de le comprendre
facilement. La seule différence avec le style de code de
<a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">l'algorithme précédent</a> est que je vais éviter les <em>nombres magiques</em>
pour pouvoir plus simplement personnalisé l'algorithme.</p>

<p>L'intérêt d'un problème aussi simple, et dont on connait déjà la solution,
est d'apprendre à avoir confiance dans les algorithmes génétiques.
Lorsqu'on passera plus tard à la résolution d'un problème inconnu, on n'aura
pas à se demander «est-ce-que ça fonctionne vraiment ?».</p>

<h2>Créer la population</h2>

<p>Voici le code qui va permettre de créer la population de solutions
potentielles:</p>

<p>``` ruby monkey.rb
def make_chromosome
  value = &ldquo;&rdquo;
  length = @search_value.size
  length.times { value += random_gene }
  [nil, value]
end</p>

<p>def random_gene
  @genes[rand(@genes.size)]
end</p>

<p>def make_population
  population = []
  @population_size.times { population &lt;&lt; make_chromosome }
  population
end</p>

<p>@search_value = &ldquo;Mon royaume pour un cheval&rdquo;
@genes = &ldquo;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &rdquo;
@population_size = 100
@population = make_population
@population.each {|i| puts i.inspect }
```</p>

<p>La fonction <code>make_chromosome</code> crée une phrase de la même taille que celle qu'on
recherche. Elle se sert de la fonction <code>random_gene</code> pour obtenir les gènes
au hasard. Un gène, ici, est une lettre minuscule ou majuscule, ou un espace.
<code>make_chromosome</code> renvoie une liste avec la phrase et une valeur nulle placée
au début. Cette valeur nulle sera remplacée plus tard par l'évaluation
de la phrase.</p>

<p>Voilà ce que donne le programme pour l'instant:</p>

<pre><code>[~/genetic]⇒ ruby monkey.rb 
[nil, "OdjBvCjnhCGRukFKwbpnUbSGzR"]
[nil, "uVqkznTRQwbUkrxUklkWgIVfyv"]
[nil, "LIRrECVrjFZPqaoySxosMs hdX"]
[nil, "XghuLIEopQNUjECpnnhtISelLs"]
[nil, "ovkilBZhnFTMEweTDOjsDbcqXX"]
[nil, "tGkEbfscRscqqRfoCxtwPuRqVx"]
[nil, "FHnwlsnoHtHbXTzsJohbyaxjIb"]
[nil, "xNbSYbkULcgfootEBJwfYiZqrC"]
[nil, "RcQfonEVMQnbdZX k glNDphbB"]
.
.
.
[nil, "OZVyLLOkKbzZnYTTLNxGty NWh"]
[nil, "rPyGwpTjvUmblwXCqlYBUBtPmZ"]
[nil, "FSQPGCFqYMWhaEurBOnefJceoZ"]
[nil, "bsMFghPtlFfkYLpKWRohhSAHjY"]
[nil, "FFATOumGCSfviwnzobeZOaIOJx"]
[nil, "svVsIjmbuOBTxhfNCUgBrtoI j"]
[nil, "ZyIqsyTefpdTmqxLzSDDPrMxQf"]
[nil, "nbpmNBYOYcmEGI jbs RxocKzv"]
[nil, "FlsryVrgyaGiciJBUzOfJameCh"]
</code></pre>

<p>Dans le prochain article, on s'occupera d'évaluer cette population de
phrase.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
