<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : elixir | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-24T08:09:41+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers - suite et fin]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/"/>
    <updated>2013-07-24T07:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><a href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/">Hier</a>,
je me suis arrêté sur cette version:</p>

<p>``` elixir somme.exs version 1
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Aujourd'hui je vais raffiner ce programme petit à petit pour montrer
quelques possibilités intéressantes du langage Elixir.</p>

<!-- more -->


<p>Pour commencer, je vais reécrire le if/else sur une seule ligne:</p>

<p>``` elixir somme.exs version 2
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0, do: somme, else: run(suivant, somme)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Ça ne change rien à la logique du programme. Je voulais seulement vous montrer
une alternative. Il semblerait qu'Elixir n'aime pas trop les if, moi non plus
ça tombe bien. Dans la version suivante, qui pourra vous paraitre très étrange
de prime abord, je me débarasse de ce if/else qui pollue mon joli code:</p>

<p>``` elixir somme.exs version 3
defmodule Somme do
  def run(n, acc) when n == 0 do</p>

<pre><code>acc
</code></pre>

<p>  end</p>

<p>  def run(n, acc) do</p>

<pre><code>run(n - 1, n + acc)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Ça peut surprendre, hein ? La condition qui était précédement dans le <code>if</code> se
retrouve dans la définition de la fonction:</p>

<p><code>elixir
def run(n, acc) when n == 0 do
</code></p>

<p>C'est ce qu'Elixir appelle un <em>guard</em>. Cette version de la fonction <code>run</code> sera
exécutée uniquement quand n vaut zéro. Dans les autres cas, c'est la seconde
version, généraliste, <code>run(n, acc) do</code> qui sera exécutée. Je ne sais pas si ce
truc existe dans d'autres langages, en tout cas je trouve ce comportement tout
simplement génial. Mais Elixir ne s'arrête pas là. Voici une nouvelle version:</p>

<p>``` elixir somme.exs version 4
defmodule Somme do
  def run(0, acc) do</p>

<pre><code>acc
</code></pre>

<p>  end</p>

<p>  def run(n, acc) do</p>

<pre><code>run(n - 1, n + acc)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Cette fois le <em>guard</em> est passé directement dans un argument de la fonction:</p>

<p><code>elixir
def run(0, acc) do
</code></p>

<p><code>def run(0, …</code> ne sera exécutée que quand le premier argument sera égal à zéro.
Et si on écrit les fonctions sur une seule ligne, on obtient un résultat très
compact:</p>

<p>``` elixir somme.exs version 5
defmodule Somme do
  def run(0, acc), do: acc
  def run(n, acc), do: run(n &ndash; 1, n + acc)
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Il reste encore une chose à prendre en compte: l'API. Devoir passer deux
arguments à la méthode <code>run</code> n'est pas très intuitif. Comme la valeur initiale
de l'accumulateur est toujours zéro, on s'arrange pour la cacher à
l'utilisateur:</p>

<p>``` elixir somme.exs version 6
defmodule Somme do
  def run(n), do: run_body(n, 0)
  defp run_body(0, acc), do: acc
  defp run_body(n, acc), do: run_body(n &ndash; 1, n + acc)
end</p>

<p>IO.puts Somme.run(5)
```</p>

<p><code>run</code> est maintenant une fonction <em>bootstrap</em> qui sert à amorcer le vrai
travail. Mes deux anciennes fonctions <code>run</code> sont renommées <code>run_body</code> et
passe dans l'espace privé du module grâce à <code>defp</code>.
Pour finir, il faut noter qu'Elixir connait bien évidemment une
fonction <code>reduce</code>, et que le programme pourrait donc s'écrire comme ça:</p>

<p><code>elixir somme.exs version 7
defmodule Somme do
  def run(n), do: Enum.reduce(1..n, 0, fn(x, acc) -&gt; x + acc end)
end
IO.puts Somme.run(5)
</code></p>

<p>Mais avouez que ça aurait été moins drôle si j'avais commencé directement
par là.</p>

<p>Voilà, c'était un petit exemple de fonction récursive qui m'a permit de vous
montrer certaines particularités d'Elixir.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/"/>
    <updated>2013-07-23T07:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour illustrer la programmation récursive avec Elixir et montrer quelques
aspects sympathiques du langage, j'ai choisi un classique et très simple
problème mathématique: calculer la somme des n premiers entiers.
Par exemple:</p>

<pre><code>Somme des n premiers entiers si n vaut 5

5 + 4 + 3 + 2 + 1 = 15
</code></pre>

<p>Super simple. C'est comme la factorielle mais avec des additions. Pas de quoi
choper des boutons, même si on déteste les maths. C'est un bon problème pour
illustrer les fonctions récursives. En programmation procédurale on ferait
quelque chose dans ce genre là:</p>

<pre><code>somme = 0
for(i = n; i &gt; 0; i--) {
  somme += n
}
</code></pre>

<p>Ma première tentative avec Elixir donne le programme suivant:</p>

<!-- more -->


<p>``` elixir somme.exs version 1
defmodule Somme do</p>

<p>  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Vous le lancez comme ça:</p>

<pre><code>$ elixir somme.exs 
15
</code></pre>

<p><strong>Sachez dès maintenant que ce bout de code n'est pas dans l'esprit
Elixir.</strong>  J'ai cherché à décomposer toutes les étapes, pas à faire quelque chose
de beau, ou d'optimisé, ou de compact. Alors, que fais ce programme ?</p>

<p><code>elixir
def run(n, acc) do
</code></p>

<p>C'est la définition d'une méthode <code>run</code>. Le paramètre <code>acc</code> est le diminutif de
accumulator. Avoir un accumulateur est un truc très utilisé dans ce type de
fonction. On enregistre le résultat provisioire dans cet accumulateur, qui
est propagé tout au long de la pile d'appels.</p>

<p><code>elixir
somme = n + acc
suivant = n - 1
</code></p>

<p>Ici je calcule deux résultats temporaires. Dans <code>somme</code> je place la somme du
nombre n actuel et de l'accumulateur. Quant à <code>suivant</code>, il contient la
prochaine valeur du nombre n.</p>

<p><code>elixir
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></p>

<p>Dans une fonction récursive il faut évidemment un appel à cette même fonction.
Mais surtout il faut une
condition de sortie. Sans ce garde-fou, c'est la boucle infinie à tout les
coups. Ici la condition de sortie est <code>suivant == 0</code>. Quand le prochain nombre
à traiter atteint zéro, c'est le signe que la fonction a terminé son travail donc
je renvois le résultat actuel, qui est la somme de tous les nombres traités
jusqu'ici. Dans l'autre cas, c'est l'appel récursif: <code>run(suivant, somme)</code>.</p>

<p>Si vous avez du mal à comprendre la logique de ce programme, vous pouvez
ajouter un traçage:</p>

<p>``` elixir
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>IO.puts "n: #{n} --- acc: #{acc}"
# ...
</code></pre>

<p>```</p>

<p>Ce qui donnera le résultat suivant:</p>

<pre><code>$ elixir somme.exs 
n: 5 --- acc: 0
n: 4 --- acc: 5
n: 3 --- acc: 9
n: 2 --- acc: 12
n: 1 --- acc: 14
15
</code></pre>

<p>La prochaine fois je transformerais ce programme afin qu'il soit dans
l'esprit Elixir.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mon premier programme Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/22/mon-premier-programme-elixir/"/>
    <updated>2013-07-22T07:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/22/mon-premier-programme-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour apprendre Elixir, j'ai décidé de faire quelques tâches tirées du
<a href="http://rosettacode.org/wiki/Category:Programming_Tasks">rosetta code</a>.
Pour mon tout premier programme, je commence avec un classique: 99 bottles of beer.</p>

<!-- more -->


<p>Vous connaissez la chanson ? Le but du jeu est d'obtenir ça:</p>

<pre><code>99 bottles of beer on the wall
99 bottles of beer
Take one down, pass it around
98 bottle of beer on the wall

...

1 bottle of beer on the wall
1 bottle of beer
Take one down, pass it around
0 bottles of beer on the wall
</code></pre>

<p>C'est parti. &ndash; <em>N'oubliez pas que c'est mon premier programme Elixir, le code
sera forcement maladroit.</em> &ndash; D'abord une version sans tenir compte du pluriel de &ldquo;bottle&rdquo;.</p>

<p><code>elixir 99_bottle_of_beer_v1.exs
Enum.each 99..1, fn idx -&gt;
  IO.puts "#{idx} bottles of beer on the wall"
  IO.puts "#{idx} bottles of beer"
  IO.puts "Take one down, pass it around"
  IO.puts "#{idx - 1} bottles of beer on the wall"
  IO.puts ""
end
</code></p>

<p>On lance le programme comme ça:</p>

<pre><code>elixir 99_bottle_of_beer_v1.exs
</code></pre>

<p>Il y a pas mal de ressemblance avec Ruby. Notamment, l'interpolation
des chaînes de caractères est identique:</p>

<p><code>elixir
IO.puts "#{idx} bottles of beer on the wall"
</code></p>

<p>La fameuse méthode <code>puts</code> de Ruby est utilisée pour sortir du texte.
Le fait que <code>puts</code> soit appelée d'un module <code>IO</code> me rappelle un peu
Java.
Voyons maintenant l'itération:</p>

<p><code>elixir
Enum.each 99..1, fn idx -&gt;
  # ...
end
</code></p>

<p>Tiens, on a déjà un truc qui ressemble à un pattern: <code>Module.méthode</code>. On
a vu <code>IO.puts</code>, on a maintenant <code>Enum.each</code>. On va donc itérer sur un <em>range</em>
<code>99..1</code>, et appliquer une fonction à chaque élément de ce <em>range</em>. La
fonction, anonyme, avec un argument, débute par <code>fn idx -&gt;</code> ; <code>idx</code> prenant
à chaque itération la valeur de l'élément courant du <em>range</em>.</p>

<p>Je m'intéresse maintenant à une version qui tient compte du pluriel.</p>

<p>``` elixir 99_bottle_of_beer_v2.exs
defmodule Bottles do
  def run do</p>

<pre><code>Enum.each 99..1, fn idx -&gt;
  IO.puts "#{idx} bottle#{plural(idx)} of beer on the wall"
  IO.puts "#{idx} bottle#{plural(idx)} of beer"
  IO.puts "Take one down, pass it around"
  IO.puts "#{idx - 1} bottle#{plural(idx-1)} of beer on the wall"
  IO.puts ""
end
</code></pre>

<p>  end</p>

<p>  def plural num do</p>

<pre><code>if num == 1 do
  ""
else
  "s"
end
</code></pre>

<p>  end
end</p>

<p>Bottles.run
```</p>

<p>J'ai du enfermer mes fonctions dans un module, avec <code>defmodule</code>, puisqu'il
n'est pas permis d'utiliser <code>def</code> en dehors d'un module. L'intérieur de
la fonction <code>run</code> ne diffère pas vraiment de la version précédente.
La fonction <code>plural</code> est intéressante à commenter:</p>

<p>``` elixir
def plural num do
  if num == 1 do</p>

<pre><code>""
</code></pre>

<p>  else</p>

<pre><code>"s"
</code></pre>

<p>  end
end
```</p>

<p>Comme avec Ruby, les arguments n'ont pas besoin d'être enfermés entre
parenthèses, mais on peut le faire. Pas besoin non plus d'un mot-clé
<code>return</code>, une fonction renvoie toujours une valeur, même de manière
implicite. Pour définir une fonction on utilise:
<code>def name args do</code>. Le <code>if</code> prends aussi un <code>do</code> à la fin. Elixir semble
en fait être assez cohérent et homogène:</p>

<pre><code>defmodule ... do ... end
def       ... do ... end
if        ... do ... end
</code></pre>

<p>Enfin, l'appel de la fonction <code>run</code> est sans surprise: <code>Bottles.run</code>. Je note
que je ne sais pas encore à quoi j'ai affaire avec les modules. Est-ce-qu'un
module est juste un espace de nommage ? Est-ce-qu'un module est plus qu'un
espace de nommage ?</p>

<p>Voilà pour une première approche d'Elixir, un langage qui ressemble
beaucoup à Ruby, et en même temps pas vraiment ;)</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installer le langage Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir/"/>
    <updated>2013-07-21T08:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça fait quelques jours que j'essaie de faire des petits programmes avec
Elixir. J'entends parler de ce nouveau langage depuis plusieurs mois déjà, et
je n'avais pas encore eu le temps de m'amuser un peu avec. C'est chose
faite. Elixir est un langage dynamique, fonctionnel, concurrent, immuable
et on dit qu'il ressemble beaucoup à Ruby. C'est l'occasion pour moi de
débuter une série d'articles consacrés à Elixir. Ça commence aujourd'hui
avec l'installation.</p>

<!-- more -->


<p><em>Je vais décrire l'installation pour Debian, mais ça ne semble pas être
bien différent sur d'autres OS.</em></p>

<h2>Installer d'abord Erlang</h2>

<p>Elixir est bati au-dessus du langage Erlang, il faut donc tout d'abord
installer le compilateur Erlang avant d'installer Elixir à proprement parler.
La version R16B minimum est requise.
La marche à suivre est indiqué sur la page
<a href="https://www.erlang-solutions.com/downloads/download-erlang-otp">download-erlang-otp</a>.
Pour résumer, on ajoute la ligne suivante au fichier <code>/etc/apt/sources.list</code>:</p>

<pre><code>deb http://binaries.erlang-solutions.com/debian squeeze contrib
</code></pre>

<p>Puis on installe la clé:</p>

<pre><code>wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc \ 
| sudo apt-key add -
</code></pre>

<p>Après y-a-pu-ka:</p>

<pre><code>apt-get update
apt-get install esl-erlang
</code></pre>

<p>On s'assure que l'installation est bien réalisée:</p>

<p>``` bash
xavier:~$ erl
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Eshell V5.10.2  (abort with ^G)
1>
```</p>

<h2>Installer Elixir</h2>

<p>Voilà Erlang est installé, c'est maintenant au tour d'Elixir proprement dit.
Pas de chance, il n'y a pas de package pour Debian, je dois donc installer
à partir des <a href="https://github.com/elixir-lang/elixir/tags">sources</a>. C'est
aussi simple que de décompresser l'archive et de taper <code>make</code>. À ce moment
là j'ai quand même un petit doute: pas de dépendances, de lib à installer ?
Mais je comprends vite que c'est Erlang qui est en train de compiler Elixir.
Donc non, tout va bien et ça marche du premier coup. Un petit truc quand
même, Elixir étant installé en local, il faut modifier la variable <code>PATH</code>
du shell pour pas galérer:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.9.3/bin/
</code></p>

<p>Reste à voir si ça fonctionne vraiment:</p>

<p>``` bash
xavier:~$ iex
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Interactive Elixir (0.9.3) &ndash; press Ctrl+C to exit (type h() ENTER for help)
iex(1)> 1+1
2
iex(2)>
```</p>

<p>Cool ! L'installation s'est déroulée à merveille, tout marche du premier
coup. C'est bon signe ou pas ?</p>

<h2>Mise à jour d'Elixir</h2>

<p>Il sort pratiquement une nouvelle version d'Elixir par mois ; je sens
que les mises à jour vont faire partie de ma vie d'elixiriste (oui je
l'ai inventé celui-là, comment vous diriez ? Elixirien ?)
En fait, en
écrivant cet article, je m'aperçois que la version 0.10.0 est sortie.
C'est donc ma première mise à jour. Après le téléchargement,
la décompression et le <code>make</code>, il suffit d'accommoder le <code>PATH</code>:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.10.0/bin/
</code></p>

<p>Et la nouvelle version est prête à l'emploi. Si Elixir est aussi sympa que son
installation, ça promet. Affaire à suivre.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
