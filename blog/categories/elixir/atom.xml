<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : elixir | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-11T10:54:13+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir et les paramètres par défaut]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut/"/>
    <updated>2013-08-07T08:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/07/elixir-et-les-parametres-par-defaut</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour définir un paramètre par défaut dans une fonction de module, Elixir
fournit l'opérateur <code>//</code>:</p>

<p>``` elixir test.exs
defmodule M do
  def foo(a // &ldquo;a&rdquo;) do</p>

<pre><code>IO.puts(a)
</code></pre>

<p>  end
end</p>

<p>M.foo()
M.foo(&ldquo;z&rdquo;)
```</p>

<!-- more -->


<pre><code>$ elixir test.exs 
a
z
</code></pre>

<p>Beaucoup d'autres langages permettent la même chose, en général à l'aide
de l'opérateur d'affection <code>=</code>. Si Elixir utilise <code>//</code> à la place de <code>=</code>,
ça n'est pas par goût de l'étrange ou par snobisme. Avec Elixir l'opérateur
<code>=</code> fait plus que de l'affectation, <code>=</code> fait aussi du
<a href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/">pattern matching</a>.
Et d'après ce que j'ai pu voir, le <em>pattern matching</em> est interdit dans
la définition des paramètres.</p>

<p>On peut bien sûr mixer paramètre <em>normal</em> et paramètre par défaut:</p>

<p>``` elixir test.exs
defmodule M do
  def foo(a, b // &ldquo;b&rdquo;) do</p>

<pre><code>IO.puts "#{a} #{b}"
</code></pre>

<p>  end
end</p>

<p>M.foo(&ldquo;a&rdquo;)
M.foo(&ldquo;a&rdquo;, &ldquo;z&rdquo;)
```</p>

<pre><code>$ elixir test.exs 
a b
a z
</code></pre>

<p>Encore une fois c'est comme avec un tas d'autres langages. On place les
paramètres par défaut à la fin. Mais Elixir va plus loin en permettant
de placer les paramètres par défaut n'importe où:</p>

<p>``` elixir test.exs
defmodule M do
  def foo(a // &ldquo;a&rdquo;, b) do</p>

<pre><code>IO.puts "#{a} #{b}"
</code></pre>

<p>  end
end</p>

<p>M.foo(&ldquo;z&rdquo;)
```</p>

<pre><code>$ elixir test.exs 
a z
</code></pre>

<p>C'est peut-être un classique de la programmation fonctionnelle, mais moi, c'est
la première fois que je vois ça. Je ne sais pas encore si c'est utile, mais
au moins c'est possible. Si vous connaissez d'autres langages qui permettent
ce truc, laissez moi un commentaire, je suis curieux.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment lire et écrire un fichier texte avec Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir/"/>
    <updated>2013-08-06T08:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/06/comment-lire-et-ecrire-un-fichier-texte-avec-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Quand j'aborde un nouveau langage j'aime bien regarder l'API pour les
entrées/sorties. Je trouve que ça donne le ton.
Aujourd'hui on voit comment ouvrir, lire et écrire des fichiers texte.</p>

<!-- more -->


<h2>Lire un fichier</h2>

<p><code>elixir
{result, device} = File.open("file.ext", [:read, :utf8])
data = IO.read(device, :line)
File.close(device)
</code></p>

<p><code>result</code> contiendra <code>:ok</code> ou <code>:error</code>. On peut tester ce résultat après
coup ou bien se servir du
<a href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/">pattern matching</a> ainsi:</p>

<p><code>elixir
{:ok, device} = File.open("file.ext", [:read, :utf8])
</code></p>

<p>Lorsque la fin du fichier est atteinte, <code>IO.read</code> retourne <code>:eof</code>.
Si on veut lire un certain nombre de caractères au lieu d'une ligne
complète, on passe le nombre de caractères à lire à la fonction <code>IO.read</code>:</p>

<p><code>elixir
chars = IO.read(device, 3)
</code></p>

<p>On notera qu'il faut penser à fermer le fichier après utilisation, ce que
je trouve toujours bizarre avec un langage moderne. J'attends vraiment que
le runtime fasse ça pour moi.</p>

<h2>Écrire un fichier</h2>

<p><code>elixir
{:ok, device} = File.open("test", [:write, :utf8])
IO.write(device, "foo\n")
IO.puts(device, "bar")
File.close(device)
</code></p>

<p>Pas grand chose à dire, c'est clair. La seule différence entre <code>IO.write</code>
et <code>IO.puts</code> est que cette dernière ajoute le caractère de fin de ligne.</p>

<h2>Les entrées/sorties console</h2>

<p>Pour lire sur la console on utilise <code>IO.gets</code>. Le <em>device</em> est <code>:stdio</code>
par défaut:</p>

<p><code>iex
iex(46)&gt; str = IO.gets(:stdio, "Votre nom: ")
Votre nom: xavier
"xavier\n"
iex(47)&gt; str = IO.gets("Votre nom: ")        
Votre nom: foobar
"foobar\n"
</code></p>

<p>Pour écrire sur la console on utilise <code>IO.puts</code>, mais ça vous le saviez déjà.</p>

<p>``` iex
iex(48)> IO.puts(:stdio, str)      <br/>
foobar</p>

<p>:ok
iex(49)> IO.puts(str)      <br/>
foobar</p>

<p>:ok
```</p>

<h2>Pour finir</h2>

<p>Voilà, c'est suffisant pour commencer à bidouiller. Pour aller plus loin,
on pourra lire la documentation des modules IO et File, qui permettent de
faire bien d'autres choses…</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern matching avec Elixir: une première approche]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/"/>
    <updated>2013-07-28T13:32:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Une tâche réccurente quand on utilise la récursivité pour résoudre un problème
est de séparer une liste en deux parties. La première partie étant le premier
élément de la liste et la seconde partie étant ce qui reste. Pour faire cela,
on peut utiliser le <em>pattern matching</em>, qu'on peut traduire par filtrage à
l'aide de motifs.</p>

<!-- more -->


<p>Voyons la syntaxe pour séparer une liste en deux:</p>

<p><code>elixir
[head | tail] = [1, 2, 3]
</code></p>

<p>Après ça, <code>head</code> (la tête) vaut 1 et <code>tail</code> (la queue) vaut [2, 3].
Maintenant les cas exceptionnels: Si on passe une liste d'un seul élément,
<code>tail</code> sera une liste vide ([]). Si on passe une liste vide, et bien c'est
une erreur. Voici une capture d'écran qui montre le résultat:</p>

<p><img src="/images/2013-07-28-1.jpg" width="890" height="577" title="pattern matching avec Elixir" ></p>

<p>Pour illustrer le <em>pattern matching</em> je vais écrire un module avec une fonction
<code>minimum</code> qui doit trouver le plus petit élément dans une liste de nombres
entiers.</p>

<p>``` elixir
defmodule Stats do
  def minimum([head|tail]) do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end</p>

<p>  defp minimum([], candidate) do</p>

<pre><code>candidate
</code></pre>

<p>  end</p>

<p>  defp minimum([head|tail], candidate) when head &lt; candidate do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end</p>

<p>  defp minimum([_|tail], candidate) do</p>

<pre><code>minimum tail, candidate
</code></pre>

<p>  end
end
```</p>

<p>On peut l'utiliser comme ceci:</p>

<p><code>elixir
IO.puts Stats.minimum([1, 2, -9, 3])
</code></p>

<p>Voici une explication des différentes fonctions:</p>

<p>``` elixir
  def minimum([head|tail]) do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end
```</p>

<p>Le <em>pattern matching</em> s'applique directement dans les arguments de la
fonction. Pour cette première passe, on considère que <code>head</code> est à priori
la plus petite valeur de la série.</p>

<p>``` elixir
  defp minimum([], candidate) do</p>

<pre><code>candidate
</code></pre>

<p>  end
```</p>

<p>Là, c'est la clause de sortie de la fonction <code>minimum</code>. Si la liste est
vide, c'est qu'on à trouvé la valeur minimum (<code>candidate</code>).</p>

<p>``` elixir
  defp minimum([head|tail], candidate) when head &lt; candidate do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end
```</p>

<p>Quand la liste est encore remplie, on compare la valeur de tête à notre
valeur candidate. Je rappelle que <code>candidate</code> est à ce moment la plus petite
valeur trouvée jusqu'ici. Si la valeur de <code>head</code> est plus petite que
la valeur de <code>candidate</code>, la première remplace la dernière.</p>

<p>``` elixir
  defp minimum([_|tail], candidate) do</p>

<pre><code>minimum tail, candidate
</code></pre>

<p>  end
```</p>

<p>Dans les autres cas, la valeur de tête n'a pas d'intérêt, ce que souligne
le caractère <code>_</code> dans <code>[_|tail]</code>. On remplace une variable par <code>_</code>
lorsque cette variable est inutilisée.</p>

<p>Nouveau venu en programmation fonctionnelle, je pense que je n'entrevois là
que la surface du <em>pattern matching</em>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le problème des 100 portes en Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/25/le-probleme-des-100-portes-en-elixir/"/>
    <updated>2013-07-25T07:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/25/le-probleme-des-100-portes-en-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je continue mon périple parmi le <a href="http://rosettacode.org/wiki/">rosetta code</a>
en m'attaquant au problème des «100 doors».</p>

<p><blockquote><p>Problem: You have 100 doors in a row that are all initially closed. You make 100 passes by the doors. The first time through, you visit every door and toggle the door (if the door is closed, you open it; if it is open, you close it). The second time you only visit every 2nd door (door #2, #4, #6, &hellip;). The third time, every 3rd door (door #3, #6, #9, &hellip;), etc, until you only visit the 100th door.</p></p><p><p>Question: What state are the doors in after the last pass? Which are open, which are closed?</p><footer><strong>Rosetta Code <a href="http://rosettacode.org/wiki/100_doors">http://rosettacode.org/wiki/100_doors</a> 100 doors</strong></footer></blockquote></p>

<!-- more -->


<p>Je me dis que je vais d'abord le faire dans un langage que je connais bien
pour voir de quoi il retourne, et si il n'y a pas de pièges cachés. En
quelques lignes de Ruby, le tour est joué:</p>

<p>``` ruby 100 doors en Ruby
doors = Array.new(100)</p>

<p>(1..100).each do |interval|
  doors.map!.with_index do |elem, idx|</p>

<pre><code>(idx+1) % interval == 0 ? !elem : elem
</code></pre>

<p>  end
end</p>

<h1>Écrire le numéro des portes ouvertes.</h1>

<p>doors.each_with_index {|e, i| puts i+1 if e }
```</p>

<p>Voyant cela j'ai pensé que ça allait être assez simple à implémenter en
Elixir. Pas du tout. J'ai galéré longtemps avant de trouver la solution qui
va suivre. Mon plus gros problème avec Elixir est que les variables sont
non-mutables. Une fois définie, une variable ne change pas. Il faut donc
faire appel constament à la récursivité. Je ne nie pas les avantages d'un
tel système (pas d'effets de bords) mais ce n'est pas évident de s'y faire quand
on vient comme moi du monde procédural ou objet. Trêve de baratin, voici
ma solution avec Elixir:</p>

<p>``` elixir 100 doors en Elixir
defmodule Doors do</p>

<p>  def soluce do</p>

<pre><code>doors = Enum.map 1..100, fn _ -&gt; false end
run(doors, 1)
</code></pre>

<p>  end</p>

<p>  defp run(doors, interval) when interval > 100 do</p>

<pre><code>doors
</code></pre>

<p>  end</p>

<p>  defp run doors, interval do</p>

<pre><code>run(switch_doors(doors,interval), interval + 1)
</code></pre>

<p>  end</p>

<p>  defp switch_doors(doors, interval) do</p>

<pre><code>stream = Stream.with_index(doors)
list = Enum.to_list(stream)
Enum.map list, fn e -&gt;
  door = elem e, 0
  index = elem(e, 1) + 1
  switch_door rem(index, interval), door
end
</code></pre>

<p>  end</p>

<p>  defp switch_door(0, door), do: not door
  defp switch_door(_, door), do: door
end</p>

<p>soluce = Doors.soluce
Enum.each Enum.to_list(Stream.with_index(soluce)), fn e &ndash;>
  if elem(e, 0) == true, do: IO.puts elem(e, 1) + 1
end
```</p>

<p>Plutôt long comparé à la version Ruby, hein ? Quoiqu'il en soit, j'en suis
fier, j'ai mis du temps à la pondre, cette version. Je pense que quelqu'un
connaissant bien Elixir doit pouvoir nettement améliorer mon code. Je
vais le poster sur la mailing-list et demander ce qu'il en
pense. Si j'ai des retours (ce dont je ne doute pas) je mettrais la
version améliorée dans un prochain article. En attendant je vais
commenter un peu mon code pour l'expliquer.</p>

<p><code>elixir
def soluce do
  doors = Enum.map 1..100, fn _ -&gt; false end
  run(doors, 1)
end
</code></p>

<p><code>soluce</code> est la seule fonction publique du module. Elle initialise une liste
de 100 éléments avec la valeur <code>false</code>. Puis elle commence le travail avec
<code>run(doors, 1)</code>, <code>1</code> étant le premier intervalle de la série, c'est à dire
qu'on passe par toutes les portes. Une fois la solution découverte, elle est
renvoyée explicitement. Si vous connaissez Ruby, vous savez à quoi je fais
référence, sinon, sachez qu'en Elixir toutes les fonctions renvoie une valeur,
et qu'on a pas besoin de l'indiquer. C'est implicite, la dernière évaluation
est renvoyée. Notez aussi l'usage de <code>_</code> qui indique qu'on se fiche du contenu
de la variable.</p>

<p>``` elixir
defp run(doors, interval) when interval > 100 do
  doors
end</p>

<p>defp run doors, interval do
  run(switch_doors(doors,interval), interval + 1)
end
```</p>

<p>La première version de <code>run</code> comporte un <em>guard</em>. Elle n'est utilisée que
lorsque <code>interval</code> est supérieur à 100. C'est notre clause de sortie de la
fonction récursive.</p>

<p>La seconde version de <code>run</code> est utilisée dans tout les autres cas. Elle se
contente de s'appeller elle-même (récursivité) avec une liste des portes
mise à jour et un intervalle incrémenté.</p>

<p>``` elixir
defp switch_doors(doors, interval) do
  stream = Stream.with_index(doors)
  list = Enum.to_list(stream)
  Enum.map list, fn e &ndash;></p>

<pre><code>door = elem e, 0
index = elem(e, 1) + 1
switch_door rem(index, interval), door
</code></pre>

<p>  end
end
```</p>

<p><code>switch_doors</code> est responsable de fabriquer une nouvelle liste de portes.
C'est la fonction qui m'a tenu en échec pendant des heures, jusqu'à ce que
je découvre le module <code>Stream</code>. Voyons <code>switch_doors</code> en détails:</p>

<p><code>elixir
stream = Stream.with_index(doors)
list = Enum.to_list(stream)
</code></p>

<p>Je crée une nouvelle liste qui va embarquer les valeurs de <code>doors</code>
en les associant aux indexs. <code>list</code> va ressembler à ça:</p>

<pre><code>[{false, 0}, {false, 1}, {false, 2}, ... {false, 99}]
</code></pre>

<p>Qui en Elixir peut aussi être représenté ainsi:</p>

<pre><code>[false: 0, false: 1 ...
</code></pre>

<p><code>elixir
Enum.map list, fn e -&gt;
  door = elem e, 0
  index = elem(e, 1) + 1
  switch_door rem(index, interval), door
end
</code></p>

<p><code>Enum.map</code> fabrique et renvoie une nouvelle version de la liste des portes.
Chaque élément de <code>list</code> (chaque <code>{false, 0}</code>) passe à travers une fonction
anonyme qui renvoie false ou true, selon le résultat de index modulo interval.</p>

<p><code>elixir
defp switch_door(0, door), do: not door
defp switch_door(_, door), do: door
</code></p>

<p>Si le modulo égal zéro, on inverse l'état de la porte. Sinon la porte doit
rester dans le même état.</p>

<p><code>elixir
Enum.each Enum.to_list(Stream.with_index(soluce)), fn e -&gt;
  if elem(e, 0) == true, do: IO.puts elem(e, 1) + 1
end
</code></p>

<p>J'écris les numéros des portes ouvertes. Avec mes explications qui précèdent,
j'espère que vous pourrez comprendre comment ça marche.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers - suite et fin]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin/"/>
    <updated>2013-07-24T07:35:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/24/elixir-calculer-la-somme-des-n-premiers-entiers-suite-et-fin</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><a href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/">Hier</a>,
je me suis arrêté sur cette version:</p>

<p>``` elixir somme.exs version 1
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Aujourd'hui je vais raffiner ce programme petit à petit pour montrer
quelques possibilités intéressantes du langage Elixir.</p>

<!-- more -->


<p>Pour commencer, je vais reécrire le if/else sur une seule ligne:</p>

<p>``` elixir somme.exs version 2
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0, do: somme, else: run(suivant, somme)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Ça ne change rien à la logique du programme. Je voulais seulement vous montrer
une alternative. Il semblerait qu'Elixir n'aime pas trop les if, moi non plus
ça tombe bien. Dans la version suivante, qui pourra vous paraitre très étrange
de prime abord, je me débarasse de ce if/else qui pollue mon joli code:</p>

<p>``` elixir somme.exs version 3
defmodule Somme do
  def run(n, acc) when n == 0 do</p>

<pre><code>acc
</code></pre>

<p>  end</p>

<p>  def run(n, acc) do</p>

<pre><code>run(n - 1, n + acc)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Ça peut surprendre, hein ? La condition qui était précédement dans le <code>if</code> se
retrouve dans la définition de la fonction:</p>

<p><code>elixir
def run(n, acc) when n == 0 do
</code></p>

<p>C'est ce qu'Elixir appelle un <em>guard</em>. Cette version de la fonction <code>run</code> sera
exécutée uniquement quand n vaut zéro. Dans les autres cas, c'est la seconde
version, généraliste, <code>run(n, acc) do</code> qui sera exécutée. Je ne sais pas si ce
truc existe dans d'autres langages, en tout cas je trouve ce comportement tout
simplement génial. Mais Elixir ne s'arrête pas là. Voici une nouvelle version:</p>

<p>``` elixir somme.exs version 4
defmodule Somme do
  def run(0, acc) do</p>

<pre><code>acc
</code></pre>

<p>  end</p>

<p>  def run(n, acc) do</p>

<pre><code>run(n - 1, n + acc)
</code></pre>

<p>  end
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Cette fois le <em>guard</em> est passé directement dans un argument de la fonction:</p>

<p><code>elixir
def run(0, acc) do
</code></p>

<p><code>def run(0, …</code> ne sera exécutée que quand le premier argument sera égal à zéro.
Et si on écrit les fonctions sur une seule ligne, on obtient un résultat très
compact:</p>

<p>``` elixir somme.exs version 5
defmodule Somme do
  def run(0, acc), do: acc
  def run(n, acc), do: run(n &ndash; 1, n + acc)
end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Il reste encore une chose à prendre en compte: l'API. Devoir passer deux
arguments à la méthode <code>run</code> n'est pas très intuitif. Comme la valeur initiale
de l'accumulateur est toujours zéro, on s'arrange pour la cacher à
l'utilisateur:</p>

<p>``` elixir somme.exs version 6
defmodule Somme do
  def run(n), do: run_body(n, 0)
  defp run_body(0, acc), do: acc
  defp run_body(n, acc), do: run_body(n &ndash; 1, n + acc)
end</p>

<p>IO.puts Somme.run(5)
```</p>

<p><code>run</code> est maintenant une fonction <em>bootstrap</em> qui sert à amorcer le vrai
travail. Mes deux anciennes fonctions <code>run</code> sont renommées <code>run_body</code> et
passe dans l'espace privé du module grâce à <code>defp</code>.
Pour finir, il faut noter qu'Elixir connait bien évidemment une
fonction <code>reduce</code>, et que le programme pourrait donc s'écrire comme ça:</p>

<p><code>elixir somme.exs version 7
defmodule Somme do
  def run(n), do: Enum.reduce(1..n, 0, fn(x, acc) -&gt; x + acc end)
end
IO.puts Somme.run(5)
</code></p>

<p>Mais avouez que ça aurait été moins drôle si j'avais commencé directement
par là.</p>

<p>Voilà, c'était un petit exemple de fonction récursive qui m'a permit de vous
montrer certaines particularités d'Elixir.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
