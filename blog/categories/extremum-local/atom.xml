<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : extremum local | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/extremum-local/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-01T14:45:10+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés: exploration vs exploitation]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation/"/>
    <updated>2013-10-01T14:32:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Pour en finir avec la <em>théorie</em> sur les extremums locaux, je voudrais
aujourd'hui parler des concepts d'exploration et d'exploitation.</p>

<!-- more -->


<h2>Exploration versus exploitation</h2>

<p>Je vais me resservir de quelques petits dessins que j'ai fait pour l'article
précédent. Lorsqu'on lance des sondes au hasard le long de notre fonction,
on est dans une phase d'exploration:</p>

<p><img src="/images/algo2.jpg"></p>

<p>On <em>explore</em> toute la fonction.</p>

<p>À l'opposé, quand on se concentre sur une valeur de x et qu'on compare
<em>f</em>(x) avec <em>f</em>(x + petite valeur) et <em>f</em>(x &ndash; petite valeur), on est
dans une phase d'exploitation:</p>

<p><img src="/images/algo3.jpg"></p>

<p>On <em>exploite</em> un petit morceau de la fonction. Plus la petite valeur ajoutée
(ou retranchée) à x est petite, plus on exploite la fonction. (<em>Si x peut-être
un nombre entier, ajouter ou soustraire 1 à x est la plus grande exploitation
possible.</em>) Plus cette petite valeur augmente et moins on exploite, plus on
se rapproche d'une exploration.</p>

<p>Il faut comprendre, et accepter, qu'à un moment donné, on ne peut pas à la
fois explorer la fonction et l'exploiter. Il faut choisir entre les deux.
L'exploration seule ne peut pas nous garantir qu'on va trouver un
extremum (pas même un extremum local) et l'exploitation seule risque fort
de trouver un extremum local (et non pas le global).</p>

<p>Pour donner une image &ndash;<em> toutes proportions gardées </em>&ndash; c'est un peu
comme dans le monde quantique : vous ne pouvez pas mesurer à la fois la
masse et la position d'une particule, vous devez choisir l'un ou l'autre.
Une autre image, plus macroscopique, serait ces jeux vidéos où un brouillard
de guerre masque la carte du monde : vous devez constamment choisir entre
explorer le monde loin de vous et exploiter ce qui est tout près de vous.</p>

<p>Un bon algorithme génétique doit trouver le bon équilibre entre ses deux
possibilités : exploration et exploitation. Et malheureusement pour nous,
ce bon équilibre dépend des chromosomes, il est donc différent pour chaque
problème.</p>

<p>La prochaine fois, fini la théorie, on verra comment un extremum local
se manifeste en pratique dans l'algorithme génétique du problème des 8 dames.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 25: extremum local]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/30/les-algorithmes-genetiques-demystifies-25-extremum-local/"/>
    <updated>2013-09-30T21:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/30/les-algorithmes-genetiques-demystifies-25-extremum-local</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans cette serie d'articles sur les algorithmes génétiques, j'ai
employé le terme <em>extremum local</em> à plusieurs reprises sans jamais
vraiment l'expliquer.</p>

<!-- more -->


<p>Pour comprendre ce qu'est un extremum local, on va se servir d'une
fonction mathématique. Rassurez-vous on ne va pas faire de math, je vais
juste me servir du visuel. Imaginons la fonction <em>f</em>(x) suivante:</p>

<p><img src="/images/algo1.jpg"></p>

<p>Admettons que la fonction <em>f</em> soit notre fonction d'évaluation. Dans ce
cas chaque x représente un chromosome parmi tous ceux possibles. Et à chaque
valeur x correspond une valeur y qui serait notre score.</p>

<p>Nous voulons connaitre la valeur de x qui maximise la fonction, qui donne
le plus grand y/score possible. Comment faire ? Le plus simple est de
balayer toutes les valeurs possibles de x, soit calculer <em>f</em>(0), <em>f</em>(1),
<em>f</em>(2), etc. Une fois tout ça calculé, on sait quel x donne le plus grand y.
Où est le problème ? Imaginons que x puisse prendre comme valeur les
nombres entiers de zéro à un milliard, imaginons aussi que la fonction
d'évaluation (<em>f</em>) soit un peu longue et prenne 1 seconde de calcul.
Ça veut dire qu'il faudra (à la louche) 11820 jours pour balayer
toutes les valeurs de x. Pas possible, faut trouver autre chose.</p>

<p>Les algorithmes génétiques, et plus largement les algorithmes
<em>stochastiques</em>, utilisent en partie le hasard pour résoudre ce
type de problème. La solution la plus simple est d'évaluer des valeurs
de x tirées au hasard. Plus on disposera de temps, et plus on s'approchera
<em>théoriquement</em> de la valeur maximum (l'extremum). La figure suivante
propose cinq valeurs de x au hasard. Un premier hic, c'est que pour obtenir
l'extremum en un temps raisonnable, il faut avoir beaucoup de chance.
Un second hic, c'est que pour être <em>sûr</em> d'obtenir l'extremum il faut
toujours balayer toutes les possibilités.</p>

<p><img src="/images/algo2.jpg"></p>

<p>Une solution plus intelligente est de tirer une première valeur de x au
hasard.
Puis on ajoute une petite valeur à x, par exemple 1, 5, 10 ou 100 suivant
l'étendue des x possibles.
On a donc x1 = x + 1. Si le nouveau y
obtenu est plus grand que l'ancien on est sur la bonne voie, sinon on
retranche cette petite valeur (x2 = x &ndash; 1). En progressant ainsi par petits
bonds, on arrivera à l'extremum.</p>

<p><img src="/images/algo3.jpg"></p>

<p>Cette progression par petits bonds est assez proche, dans l'idée, de la
mecanique des algorithmes génétiques. En ajustant comme il faut la
<em>petite valeur</em> qu'on ajoute aux x successifs, on obtiendra l'extremum en
un temps raisonnable.</p>

<p><strong>Edit du 1 oct 2013</strong> Cette petite valeur ajoutée à x peut-être considérée
comme une mutation.</p>

<p>Alors où est le problème maintenant ? Pour le visualiser il faut changer
de fonction mathématique:</p>

<p><img src="/images/algo4.jpg"></p>

<p>Si on n'a pas de chance, on va tirer au hasard une première valeur de x
qui nous emmènera immanquablement vers un extremum <em>local</em>, et non
pas vers l'extremum <em>global</em> !</p>

<p>Voilà, j'espère que cette petite démonstration a remplie son office et
que vous visualisez maintenant clairement cette histoire
d'extremum local.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
