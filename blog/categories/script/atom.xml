<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : script | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/script/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-19T09:05:51+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/"/>
    <updated>2013-07-18T07:39:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><em>Hier j'ai montré comment ajouter une commande à Git à l'aide d'un script.
Aujourd'hui je fais quelque chose d'utile grâce à ce nouveau pouvoir.</em></p>

<p>Ce que je fais régulierement avec Git c'est:</p>

<ol>
<li>ajouter une fonctionnalité dans la branche <code>ma_branche</code></li>
<li>quand c'est terminé, passer sur la branche <code>master</code></li>
<li>fusionner <code>ma_branche</code> dans <code>master</code></li>
</ol>


<p>Comme je ne travaille jamais directement dans la branche master, ce genre
de <em>merge</em> n'offre jamais de conflits. J'aimerais regrouper les
étapes 2 et 3 en une seule commande: <code>git merge-me</code>.</p>

<!-- more -->


<h2>Trouver la branche courante</h2>

<p>La première étape consiste à retrouver
et retenir le nom de la branche courante. Étant un grand fan de Sed, je
procederais naturellement comme ça:</p>

<pre><code>git branch | sed -n '/\* /s///p'
</code></pre>

<p>Mais je sais que Sed n'a pas les faveurs de tout le monde. J'ai donc fais une
recherche sur StackOverflow pour trouver une autre manière d'obtenir le
même résultat:</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre>

<p>Je pense que cette seconde solution est meilleure puisque moins fragile, même
si il y a peu de chance que Git change la sortie de <code>git branch</code>. Pour
retenir le nom de la branche, on place la sortie de cette commande dans une
variable Bash:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
echo $BRANCH_TO_MERGE
```</p>

<p>Comme en Ruby, les backticks déclenchent la commande et retournent sa
sortie. Le résultat:</p>

<pre><code>xavier:~$ git merge-me
ma_branche
</code></pre>

<p>Maintenant que j'ai vu que ça fonctionnait bien, le reste est un jeu
d'enfant.</p>

<h2>Le script final</h2>

<p>On ajoute les deux commandes Git, ce qui donne:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
git checkout master
git merge $BRANCH_TO_MERGE
```</p>

<p>Et voici le script en action:</p>

<pre><code>xavier:~$ git merge-me
Switched to branch 'master'
Updating 48540e6..c584593
Fast-forward
 TODO |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
xavier:~$ git branch
* master
  ma_branche
</code></pre>

<p>Ma nouvelle commande fait bien le travail que je lui demande.</p>

<h2>Pour aller plus loin</h2>

<p>Vous n'êtes pas limité à l'utilisation de Bash. Vous pouvez utiliser le
langage que vous voulez. À titre d'exemple, voici l'équivalent du script
précédent, cette fois en Ruby.
Toutefois comme ce genre de script va utiliser beaucoup de commandes
système, Ruby n'est peut-être pas le mieux placé. À vous de voir.</p>

<p>``` ruby git-merge-me version Ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>branch_to_merge = <code>git rev-parse --abbrev-ref HEAD</code>
system &lsquo;git checkout master&rsquo;
system &ldquo;git merge #{branch_to_merge.chomp}&rdquo;
```</p>

<p>On peut aussi combiner script et alias. On donne un nom bien explicite
à notre fichier, comme <code>git-merge-me-into-master</code> et on crée un alias
<code>mm = merge-me-into-master</code>. Ainsi on a une commande rapide sous les
doigts et on peut facilement retrouver le fichier grâce à son nom quand
on doit le modifier.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/"/>
    <updated>2013-07-17T08:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ces derniers jours j'ai montré comment étendre les fonctionnalités
de Git à l'aide des alias (voir les 2 articles précédents). Aujourd'hui
on passe à la suite logique avec la création de nos propres scripts pour
Git.</p>

<p><em>Ce qui suit fonctionne sur Linux et MacOS. Je ne sais pas si c'est
possible sur Windows.</em></p>

<!-- more -->


<p>Un exemple vaut parfois mieux qu'un long discours. Alors créez donc le fichier
<code>git-hello</code> suivant:</p>

<p>``` bash git-hello</p>

<h1>!/bin/bash</h1>

<p>echo Hello
```</p>

<p>Donnez lui les droits d'exécution (<code>chmod +x git-hello</code>) et placez le dans
votre PATH. Moi je le place dans <code>~/bin/</code> et j'ajoute la ligne suivante à
<code>~/.bashrc</code>:</p>

<p><code>bash
PATH=$PATH:/home/xavier/bin
</code></p>

<p>Si vous n'êtes pas sous Linux, vous devrez adapter ces directives pour
votre OS. Une fois que c'est fait, vérifiez si tout fonctionne
correctement:</p>

<pre><code>xavier:~$ git-hello 
Hello
</code></pre>

<p>Maintenant vous vous dites peut-être <em>«Bon d'accord, il vient d'écrire un
script bidon, et alors ? Je vois toujours pas le rapport avec Git !»</em>
Le fichier qu'on vient d'écrire n'est pas nommé n'importe comment. Il
commence par <code>git-</code>. C'est ce qui va permettre à la magie d'opérer:</p>

<pre><code>xavier:~$ git h[Tab]
hello   help    hist    
xavier:~$ git hello
Hello
</code></pre>

<p>La même chose en différé live &ndash;<em> c'est mon dixième article sur ce blog,
je fête ça avec mon tout premier gif, je m'amuse comme je veux…</em> &ndash;</p>

<p><img src="/images/2013-07-17-1.gif"></p>

<p>La règle est simple:</p>

<p><blockquote><p>Un fichier nommé <code>git-foo</code> sera vu par Git comme étant une de ses propres<br/>commandes, nommée <code>foo</code>.</p></blockquote></p>

<p>C'est possible grâce à l'auto complétion programmable de Bash, dont je
parlerais une prochaine fois. Si vous avez défini des alias un peu
complexe, vous auriez peut-être avantage à les placez dans un script pour
profiter de la coloration syntaxique.
Demain, je montrerais un script un
peu plus utile et étoffé que celui-ci :) En attendant, testez vos propres idées.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
