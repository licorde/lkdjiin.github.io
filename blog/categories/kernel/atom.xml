<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : kernel | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/kernel/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-09-22T22:06:40+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel/"/>
    <updated>2013-09-21T13:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Les méthodes définies dans le module Kernel de Ruby sont <em>à priori</em> des
méthodes très importantes. En effet le module Kernel est inclus d'office
dans la classe Object, et donc, ses méthodes sont toujours disponibles.
Elles s'utilisent directement sous la forme <code>method_name</code> et non pas
<code>object_name.method_name</code>. C'est cette différence de traitement qui
me donne à penser qu'elles sont importantes. Dans cette série d'articles,
je me propose de passer en revue chacune des méthodes du module Kernel
de Ruby version 2.0.</p>

<!-- more -->


<p>Aujourd'hui on voit les méthodes suivantes:</p>

<ul>
<li>Array(<em>arg</em>)</li>
<li>Hash(<em>arg</em>)</li>
<li>String(<em>arg</em>)</li>
</ul>


<p>Ce sont toutes les trois des méthodes de conversions. Elles transforment
respectivement l'argument en un type Array, Hash ou String. Pour effectuer
cette conversion elles utilisent la méthode <code>to_*</code> sur l'argument. Par
exemple <code>String(self)</code> utilise <code>self.to_s</code>:</p>

<p>``` irb
[~]⇒ irb</p>

<blockquote><blockquote><p>String(self)
&ldquo;main&rdquo;
self.to_s
&ldquo;main
```</p></blockquote></blockquote>

<p>La particularité de ces méthodes est que leur nom débutent par une majuscule,
ce qui va à l'encontre des conventions en Ruby et les fait ressembler un
peu comme à un constructeur en Java et consorts. D'un autre coté, le langage
n'empêche pas de nommer les méthodes ainsi:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def Foo(arg)
  puts arg
end
nil
Foo(&ldquo;hello&rdquo;)
hello
nil
```</p></blockquote></blockquote>

<p>J'imagine que si ces méthodes débutent par une majuscule, c'est pour
permettre aux développeurs d'utiliser <code>array</code>, <code>hash</code> et <code>string</code> comme
nom de variable. Par contre je n'arrive pas à trouver une utilité à
ces méthodes… Je veux dire pourquoi utiliser <code>String(arg)</code> plutôt que
<code>arg.to_s</code> ?</p>

<p>Si toi, Lecteur, tu as une réponse, n'hésite pas à laisser un commentaire ;&ndash;)</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
