<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : naam | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/naam/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-11T10:54:13+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parrot 5: un plan pour écrire un compilateur]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/11/parrot-5-un-plan-pour-ecrire-un-compilateur/"/>
    <updated>2013-08-11T10:47:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/11/parrot-5-un-plan-pour-ecrire-un-compilateur</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir fini le tour d'horizon de l'assembleur PIR dans
<a href="http://lkdjiin.github.io/blog/2013/08/10/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-4/">la quatrième partie</a>
je digresse un peu sur ce qui nous attends dans les prochains épisodes.</p>

<!-- more -->


<h2>Un plan pour écrire un compilateur</h2>

<p>Maintenant qu'on sait écrire des programmes en PIR suffisament
évolués pour fournir un début de support au magnifique langage Naam,
il est plus que temps d'écrire le compilateur Naam vers PIR.
Pour ça, il y a plusieurs solutions.</p>

<p>La première est d'utiliser les outils fournis avec Parrot sous le nom
de PCT: Parrot Compiler Tools. PCT a vraiment l'air très bien et devrait
faire l'affaire pour certains. Malheureusement pour moi, les outils PCT
sont écrits en Perl, langage que je ne connais vraiment pas assez. J'ai
essayé mais y a pas eu moyen. Si vous connaissez bien Perl, je pense que
vous serez très heureux avec les PCT. Sinon, il faut se tourner
vers autre chose.</p>

<p>La seconde solution est plus old-school. On écrit un compilateur en C à l'aide
de Lex et Yacc,
<a href="http://flex.sourceforge.net/">Flex</a>
et <a href="http://www.gnu.org/software/bison/">Bison</a>, etc. Encore une fois, comme
pour PCT, ce sont de très bons outils. Mais j'ai déjà donné, ils
sont aussi ennuyeux qu'ils sont excellents. Pour mémoire,
j'écris un <em>toy language</em> pour le fun.</p>

<p>Ça me laisse une troisième solution: tout écrire <em>from scratch</em> en Ruby.
Ça c'est fun.</p>

<p>J'ai une certaine expérience dans le domaine. J'ai écrit des assembleurs,
des compilateurs, des interpréteurs. En C, en python, en Java, en Ruby.
Avec ou sans outils tiers. Certains projets ont aboutis et d'autres ont
échoués mais à chaque fois j'appris quelque chose. Tout ça pour vous dire
que je sais assez bien dans quoi je m'embarque. Naam est, et restera, un
langage très simple. Comme je sais où je vais, écrire un compilateur
Naam vers PIR en Ruby ne sera pas trop difficile.
Je n'écrirais surement pas un code performant. Au contraire, je
m'attacherais uniquement à produire un code facile à lire.
Il nous faudra un analyseur lexical (un <em>tokenizer</em> et un <em>lexer</em>), un
analyseur syntaxique (pour les fameuses <em>Syntax Error</em>). On aura peut-être
besoin de produire un AST (<em>Abstract Syntax Tree</em>) mais surement pas dès
le début. On aura aussi intêret à écrire la grammaire du langage. Il y
arrivera un moment où il faudra se pencher sur les messages d'erreurs
du compilateur. Après ça on avisera.</p>

<p>Un compilateur est après tout un programme comme un autre, donc je ne vois
pas de raisons de ne pas l'écrire par améliorations successives. L'objectif
initial sera donc simplement de compiler et faire tourner le programme suivant:</p>

<pre><code>sign(n)=
1  if n &gt; 0
-1 if n &lt; 0
0  else

print sign(-123)
</code></pre>

<p>La prochaine fois on commence par le commencement en écrivant le
<a href="http://en.wikipedia.org/wiki/Tokenization">tokenizer</a>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur la machine virtuelle Parrot: partie 1]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/"/>
    <updated>2013-08-01T07:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Cela fait quelques années que j'ai envie d'essayer la
<a href="https://fr.wikipedia.org/wiki/Machine_virtuelle">machine virtuelle</a>
<a href="http://www.parrot.org/">Parrot</a> et j'ai toujours reporté à plus tard.
Jusqu'à maintenant. Aujourd'hui, je commence à écrire un
<a href="http://en.wikipedia.org/wiki/Toy_language">toy language</a>
qui tournera sur Parrot.</p>

<p>Pour implémenter un langage sur Parrot, il faut d'abord … un langage.
Simple de préférence, avec peu de fonctionnalités, au moins pour
démarrer.
Je vais en inventer un pour l'occasion, ce qui sera bien plus drôle que
d'utiliser un sous-ensemble d'un langage déjà existant.</p>

<!-- more -->


<h2>Le langage naam</h2>

<p>Naam signifie No Assignment, Automatic Memoization.
Je rappelle qu'il s'agit d'un <em>toy language</em>, l'objectif étant
d'expérimenter, et non de produire le prochain succès planétaire.
Pour le moment, et peut-être pour toujours, le langage sera limité
à l'utilisation des nombres entiers. Pas de nombres à virgule, pas de
chaînes, pas d'objets… Je viens de passer quelques jours à envisager
une syntaxe. Mais la reflexion n'est pas terminée et elle pourrait
changer d'ici à l'implémentation de naam. Voici des exemples:</p>

<pre><code>sign(n)=
1  if n &gt; 0
-1 if n &lt; 0
0  else

print sign(3)
</code></pre>

<p>Les détails:</p>

<pre><code>sign(n)=
</code></pre>

<p>C'est la définition d'une fonction <code>sign</code>.</p>

<pre><code>1  if n &gt; 0
-1 if n &lt; 0
</code></pre>

<p>Si <code>n</code> est positif on renvoie 1. Si <code>n</code> est négatif on renvoie -1.</p>

<pre><code>0  else
</code></pre>

<p>Dans les autres cas (il reste le cas du zéro) on renvoie 0. Le mot <code>else</code>
marque aussi la fin de la fonction.</p>

<p>Voici maintenant ce que pourrait être la fonction factorielle:</p>

<pre><code>!(n)=
1            if 0
n * .(n - 1) if n &gt; 0
else

print !(7)
</code></pre>

<p>Et le détail:</p>

<pre><code>!(n)=
</code></pre>

<p>On définit la fonction <code>!</code>. Le nom d'une fonction n'a pas à être composé
de lettres. Des signes font aussi bien l'affaire.</p>

<pre><code>1            if 0
</code></pre>

<p>Quand l'argument vaut zéro, on renvoie 1.</p>

<pre><code>n * .(n - 1) if n &gt; 0
</code></pre>

<p>Dans les cas où <code>n</code> est positif, on renvoie <code>n</code> multiplié
par la factorielle de <code>n - 1</code>.
Le point (<code>.</code>) signifie «la fonction elle-même».</p>

<pre><code>else
</code></pre>

<p>Enfin, dans les autres cas (qui ici sont <code>n</code> est négatif) on renvoie du
vide, rien, nada. Comme une fonction est dans l'obligation de renvoyer
une valeur, cela provoquera une erreur (ce qui est voulu).</p>

<p>Un dernier exemple pour terminer, la fonction d'Ackermann. Je ne vais pas
la commenter, la seule différence avec ce que j'ai montré avant est
qu'il y a deux arguments :</p>

<pre><code>ackermann(m, n)=
n + 1                 if 0, n
.(m - 1, 1)           if m &gt; 0, 0
.(m - 1, .(m, n - 1)) else

print ackermann(2, 3)
</code></pre>

<p>On pourrait aussi écrire la même fonction de la manière suivante (je n'ai
pas encore décidé si naam supporterait les deux syntaxes ou non):</p>

<pre><code>ackermann(0, n)     = n + 1
ackermann(m &gt; 0, 0) = .(m - 1, 1)
ackermann(m, n)     = .(m - 1, .(m, n - 1))
</code></pre>

<p>Alors, qu'en pensez vous. Est-ce-que ça vous dit de voir naître un
<em>toy language</em> au jour le jour ? Que pensez vous de naam ?</p>

<p>La prochaine fois on installe Parrot et on joue un peu avec pour sentir le truc.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
