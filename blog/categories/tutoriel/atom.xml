<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : tutoriel | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/tutoriel/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-23T10:11:01+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/"/>
    <updated>2013-07-23T07:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour illustrer la programmation récursive avec Elixir et montrer quelques
aspects sympathiques du langage, j'ai choisi un classique et très simple
problème mathématique: calculer la somme des n premiers entiers.
Par exemple:</p>

<pre><code>Somme des n premiers entiers si n vaut 5

5 + 4 + 3 + 2 + 1 = 15
</code></pre>

<p>Super simple. C'est comme la factorielle mais avec des additions. Pas de quoi
choper des boutons, même si on déteste les maths. C'est un bon problème pour
illustrer les fonctions récursives. En programmation procédurale on ferait
quelque chose dans ce genre là:</p>

<pre><code>somme = 0
for(i = n; i &gt; 0; i--) {
  somme += n
}
</code></pre>

<p>Ma première tentative avec Elixir donne le programme suivant:</p>

<!-- more -->


<p>``` elixir somme.exs version 1
defmodule Somme do</p>

<p>  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Vous le lancez comme ça:</p>

<pre><code>$ elixir somme.exs 
15
</code></pre>

<p><strong>Sachez dès maintenant que ce bout de code n'est pas dans l'esprit
Elixir.</strong>  J'ai cherché à décomposer toutes les étapes, pas à faire quelque chose
de beau, ou d'optimisé, ou de compact. Alors, que fais ce programme ?</p>

<p><code>elixir
def run(n, acc) do
</code></p>

<p>C'est la définition d'une méthode <code>run</code>. Le paramètre <code>acc</code> est le diminutif de
accumulator. Avoir un accumulateur est un truc très utilisé dans ce type de
fonction. On enregistre le résultat provisioire dans cet accumulateur, qui
est propagé tout au long de la pile d'appels.</p>

<p><code>elixir
somme = n + acc
suivant = n - 1
</code></p>

<p>Ici je calcule deux résultats temporaires. Dans <code>somme</code> je place la somme du
nombre n actuel et de l'accumulateur. Quant à <code>suivant</code>, il contient la
prochaine valeur du nombre n.</p>

<p><code>elixir
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></p>

<p>Dans une fonction récursive il faut évidemment un appel à cette même fonction.
Mais surtout il faut une
condition de sortie. Sans ce garde-fou, c'est la boucle infinie à tout les
coups. Ici la condition de sortie est <code>suivant == 0</code>. Quand le prochain nombre
à traiter atteint zéro, c'est le signe que la fonction a terminé son travail donc
je renvois le résultat actuel, qui est la somme de tous les nombres traités
jusqu'ici. Dans l'autre cas, c'est l'appel récursif: <code>run(suivant, somme)</code>.</p>

<p>Si vous avez du mal à comprendre la logique de ce programme, vous pouvez
ajouter un traçage:</p>

<p>``` elixir
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>IO.puts "n: #{n} --- acc: #{acc}"
# ...
</code></pre>

<p>```</p>

<p>Ce qui donnera le résultat suivant:</p>

<pre><code>$ elixir somme.exs 
n: 5 --- acc: 0
n: 4 --- acc: 5
n: 3 --- acc: 9
n: 2 --- acc: 12
n: 1 --- acc: 14
15
</code></pre>

<p>La prochaine fois je transformerais ce programme afin qu'il soit dans
l'esprit Elixir.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installer le langage Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir/"/>
    <updated>2013-07-21T08:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça fait quelques jours que j'essaie de faire des petits programmes avec
Elixir. J'entends parler de ce nouveau langage depuis plusieurs mois déjà, et
je n'avais pas encore eu le temps de m'amuser un peu avec. C'est chose
faite. Elixir est un langage dynamique, fonctionnel, concurrent, immuable
et on dit qu'il ressemble beaucoup à Ruby. C'est l'occasion pour moi de
débuter une série d'articles consacrés à Elixir. Ça commence aujourd'hui
avec l'installation.</p>

<!-- more -->


<p><em>Je vais décrire l'installation pour Debian, mais ça ne semble pas être
bien différent sur d'autres OS.</em></p>

<h2>Installer d'abord Erlang</h2>

<p>Elixir est bati au-dessus du langage Erlang, il faut donc tout d'abord
installer le compilateur Erlang avant d'installer Elixir à proprement parler.
La version R16B minimum est requise.
La marche à suivre est indiqué sur la page
<a href="https://www.erlang-solutions.com/downloads/download-erlang-otp">download-erlang-otp</a>.
Pour résumer, on ajoute la ligne suivante au fichier <code>/etc/apt/sources.list</code>:</p>

<pre><code>deb http://binaries.erlang-solutions.com/debian squeeze contrib
</code></pre>

<p>Puis on installe la clé:</p>

<pre><code>wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc \ 
| sudo apt-key add -
</code></pre>

<p>Après y-a-pu-ka:</p>

<pre><code>apt-get update
apt-get install esl-erlang
</code></pre>

<p>On s'assure que l'installation est bien réalisée:</p>

<p>``` bash
xavier:~$ erl
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Eshell V5.10.2  (abort with ^G)
1>
```</p>

<h2>Installer Elixir</h2>

<p>Voilà Erlang est installé, c'est maintenant au tour d'Elixir proprement dit.
Pas de chance, il n'y a pas de package pour Debian, je dois donc installer
à partir des <a href="https://github.com/elixir-lang/elixir/tags">sources</a>. C'est
aussi simple que de décompresser l'archive et de taper <code>make</code>. À ce moment
là j'ai quand même un petit doute: pas de dépendances, de lib à installer ?
Mais je comprends vite que c'est Erlang qui est en train de compiler Elixir.
Donc non, tout va bien et ça marche du premier coup. Un petit truc quand
même, Elixir étant installé en local, il faut modifier la variable <code>PATH</code>
du shell pour pas galérer:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.9.3/bin/
</code></p>

<p>Reste à voir si ça fonctionne vraiment:</p>

<p>``` bash
xavier:~$ iex
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Interactive Elixir (0.9.3) &ndash; press Ctrl+C to exit (type h() ENTER for help)
iex(1)> 1+1
2
iex(2)>
```</p>

<p>Cool ! L'installation s'est déroulée à merveille, tout marche du premier
coup. C'est bon signe ou pas ?</p>

<h2>Mise à jour d'Elixir</h2>

<p>Il sort pratiquement une nouvelle version d'Elixir par mois ; je sens
que les mises à jour vont faire partie de ma vie d'elixiriste (oui je
l'ai inventé celui-là, comment vous diriez ? Elixirien ?)
En fait, en
écrivant cet article, je m'aperçois que la version 0.10.0 est sortie.
C'est donc ma première mise à jour. Après le téléchargement,
la décompression et le <code>make</code>, il suffit d'accommoder le <code>PATH</code>:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.10.0/bin/
</code></p>

<p>Et la nouvelle version est prête à l'emploi. Si Elixir est aussi sympa que son
installation, ça promet. Affaire à suivre.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/"/>
    <updated>2013-07-18T07:39:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><em>Hier j'ai montré comment ajouter une commande à Git à l'aide d'un script.
Aujourd'hui je fais quelque chose d'utile grâce à ce nouveau pouvoir.</em></p>

<p>Ce que je fais régulierement avec Git c'est:</p>

<ol>
<li>ajouter une fonctionnalité dans la branche <code>ma_branche</code></li>
<li>quand c'est terminé, passer sur la branche <code>master</code></li>
<li>fusionner <code>ma_branche</code> dans <code>master</code></li>
</ol>


<p>Comme je ne travaille jamais directement dans la branche master, ce genre
de <em>merge</em> n'offre jamais de conflits. J'aimerais regrouper les
étapes 2 et 3 en une seule commande: <code>git merge-me</code>.</p>

<!-- more -->


<h2>Trouver la branche courante</h2>

<p>La première étape consiste à retrouver
et retenir le nom de la branche courante. Étant un grand fan de Sed, je
procederais naturellement comme ça:</p>

<pre><code>git branch | sed -n '/\* /s///p'
</code></pre>

<p>Mais je sais que Sed n'a pas les faveurs de tout le monde. J'ai donc fais une
recherche sur StackOverflow pour trouver une autre manière d'obtenir le
même résultat:</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre>

<p>Je pense que cette seconde solution est meilleure puisque moins fragile, même
si il y a peu de chance que Git change la sortie de <code>git branch</code>. Pour
retenir le nom de la branche, on place la sortie de cette commande dans une
variable Bash:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
echo $BRANCH_TO_MERGE
```</p>

<p>Comme en Ruby, les backticks déclenchent la commande et retournent sa
sortie. Le résultat:</p>

<pre><code>xavier:~$ git merge-me
ma_branche
</code></pre>

<p>Maintenant que j'ai vu que ça fonctionnait bien, le reste est un jeu
d'enfant.</p>

<h2>Le script final</h2>

<p>On ajoute les deux commandes Git, ce qui donne:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
git checkout master
git merge $BRANCH_TO_MERGE
```</p>

<p>Et voici le script en action:</p>

<pre><code>xavier:~$ git merge-me
Switched to branch 'master'
Updating 48540e6..c584593
Fast-forward
 TODO |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
xavier:~$ git branch
* master
  ma_branche
</code></pre>

<p>Ma nouvelle commande fait bien le travail que je lui demande.</p>

<h2>Pour aller plus loin</h2>

<p>Vous n'êtes pas limité à l'utilisation de Bash. Vous pouvez utiliser le
langage que vous voulez. À titre d'exemple, voici l'équivalent du script
précédent, cette fois en Ruby.
Toutefois comme ce genre de script va utiliser beaucoup de commandes
système, Ruby n'est peut-être pas le mieux placé. À vous de voir.</p>

<p>``` ruby git-merge-me version Ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>branch_to_merge = <code>git rev-parse --abbrev-ref HEAD</code>
system &lsquo;git checkout master&rsquo;
system &ldquo;git merge #{branch_to_merge.chomp}&rdquo;
```</p>

<p>On peut aussi combiner script et alias. On donne un nom bien explicite
à notre fichier, comme <code>git-merge-me-into-master</code> et on crée un alias
<code>mm = merge-me-into-master</code>. Ainsi on a une commande rapide sous les
doigts et on peut facilement retrouver le fichier grâce à son nom quand
on doit le modifier.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/"/>
    <updated>2013-07-17T08:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ces derniers jours j'ai montré comment étendre les fonctionnalités
de Git à l'aide des alias (voir les 2 articles précédents). Aujourd'hui
on passe à la suite logique avec la création de nos propres scripts pour
Git.</p>

<p><em>Ce qui suit fonctionne sur Linux et MacOS. Je ne sais pas si c'est
possible sur Windows.</em></p>

<!-- more -->


<p>Un exemple vaut parfois mieux qu'un long discours. Alors créez donc le fichier
<code>git-hello</code> suivant:</p>

<p>``` bash git-hello</p>

<h1>!/bin/bash</h1>

<p>echo Hello
```</p>

<p>Donnez lui les droits d'exécution (<code>chmod +x git-hello</code>) et placez le dans
votre PATH. Moi je le place dans <code>~/bin/</code> et j'ajoute la ligne suivante à
<code>~/.bashrc</code>:</p>

<p><code>bash
PATH=$PATH:/home/xavier/bin
</code></p>

<p>Si vous n'êtes pas sous Linux, vous devrez adapter ces directives pour
votre OS. Une fois que c'est fait, vérifiez si tout fonctionne
correctement:</p>

<pre><code>xavier:~$ git-hello 
Hello
</code></pre>

<p>Maintenant vous vous dites peut-être <em>«Bon d'accord, il vient d'écrire un
script bidon, et alors ? Je vois toujours pas le rapport avec Git !»</em>
Le fichier qu'on vient d'écrire n'est pas nommé n'importe comment. Il
commence par <code>git-</code>. C'est ce qui va permettre à la magie d'opérer:</p>

<pre><code>xavier:~$ git h[Tab]
hello   help    hist    
xavier:~$ git hello
Hello
</code></pre>

<p>La même chose en différé live &ndash;<em> c'est mon dixième article sur ce blog,
je fête ça avec mon tout premier gif, je m'amuse comme je veux…</em> &ndash;</p>

<p><img src="/images/2013-07-17-1.gif"></p>

<p>La règle est simple:</p>

<p><blockquote><p>Un fichier nommé <code>git-foo</code> sera vu par Git comme étant une de ses propres<br/>commandes, nommée <code>foo</code>.</p></blockquote></p>

<p>C'est possible grâce à l'auto complétion programmable de Bash, dont je
parlerais une prochaine fois. Si vous avez défini des alias un peu
complexe, vous auriez peut-être avantage à les placez dans un script pour
profiter de la coloration syntaxique.
Demain, je montrerais un script un
peu plus utile et étoffé que celui-ci :) En attendant, testez vos propres idées.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git et les alias: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/16/git-et-les-alias-la-suite/"/>
    <updated>2013-07-16T09:10:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/16/git-et-les-alias-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p><em>Hier, j'abordai les bases de la
<a href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/">création d'alias avec Git</a>.
Aujourd'hui je pousse un peu plus loin en montrant comment intégrer
des commandes externes dans ces alias.</em></p>

<p>J'ai constaté récemment que j'utilisai énormément Git:</p>

<p><code>bash
xavier:~$ wc -l .bash_history
500 .bash_history
xavier:~$ sed -n '/^git/p' .bash_history | wc -l
238
</code></p>

<p>Sur 500 lignes d'historique, 238 sont consacrées à Git ! Ça m'a décidé
à approfondir la question des alias.</p>

<!-- more -->


<h2>L'opérateur !</h2>

<p>Git permet d'utiliser des commandes externes dans la définitions des
alias à l'aide de l'opérateur <code>!</code>. L'exemple qui suit est parfaitement
inutile mais illustre bien ce qui est possible.</p>

<p><code>ini
[alias]
  ls = !ls
</code></p>

<p><code>bash
xavier:~$ git ls
bin    Documents  Images            Modèles    Téléchargements   www
[...]
</code></p>

<p>C'est pas tout, Git accepte aussi les arguments des commandes externes:</p>

<p><code>bash
xavier:~$ git ls -a
.          .fonts       .javafx_eula_accepted   .remmina
[...]
</code></p>

<p>Vous imaginez un peu ce qu'on va pouvoir faire avec ça ? Prenons un
workflow simple : nouvelle branche, ajout de fichier, commit, retour à au
master et merge.</p>

<p>``` bash</p>

<pre><code>git checkout -b new_branch
# Édition du code
git add . # 1 fois sur 2 j'oublie celle-là.
git commit -a
git checkout master
git merge new_branch
</code></pre>

<p>```</p>

<p>Il est clair que <code>git add . ; git commit -a</code> va se répéter plusieurs fois.
Je cherche donc a optimiser cette partie. Pour cela je modifie mon vieil
alias <code>ci</code> (<a href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/">voir article précédent</a>).</p>

<p><em>Dans les exemples suivants, je n'écris plus <code>[alias]</code>, cette ligne est
désormais sous-entendue.</em></p>

<pre><code>ci = !git add . &amp;&amp; git commit -a
</code></pre>

<p>Git traite <code>git</code> comme une commande externe comme les autres &ndash;
<em>logique mais marrant</em> &ndash;, quant à <code>&amp;&amp;</code>, cela permet à Bash de n'exécuter
la commande de droite que si la commande de gauche réussie. Il n'y a pas
de raison de douter que <code>git add .</code> va crasher et vous pouvez remplacer
<code>&amp;&amp;</code> par <code>;</code> si vous voulez.</p>

<p>Pour finir sur une note d'humour de geek, voici la commande <code>la</code> (pour
list alias) qui va afficher tout les alias.</p>

<pre><code># Lister tout les alias.
la = !git config -l | sed -n '/alias/s/alias\\.//p' | sort
</code></pre>

<p>Tout d'abord <code>git</code> est utilisé pour lister le contenu du fichier .gitconfig.
Ensuite <code>sed</code> sélectionne seulement les lignes commençant par <code>alias</code> et en
même temps supprime <code>alias.</code> de la ligne. Et enfin <code>sort</code> nous trie tout
ça par ordre alphabétique. Notez au passage que le fichier <code>.gitconfig</code>
accepte les commentaires.</p>

<h2>Conclusion</h2>

<p>On a là un sacré terrain de jeu. Si vous aimez écrire des oneliners, vous
allez pouvoir vous amuser. Voici par exemple une page où vous trouverez
<a href="http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/">des définitions d'alias</a>
bien plus complexe que ce que j'ai montré ici.
Malgré tout, je ne pense pas que les alias de Git soient la réponse à tout
les problèmes.
Écrire une commande sur une seule ligne va vite devenir illisible si
vous avez besoin de faire quelque chose d'un peu élaboré. Dans un
prochain article je montrerais comment créer vos propres commandes Git
à l'aide de scripts, et non plus simplement d'alias.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
