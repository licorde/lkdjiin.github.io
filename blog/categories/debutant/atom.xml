<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-09-15T12:10:59+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim: la commande point et le clavier Azerty]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty/"/>
    <updated>2013-09-14T09:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Tout Vimiste sait à quoi sert le <code>.</code>, cette commande répète le dernier
changement. Si vous venez de saisir <code>dap</code> pour supprimer un paragraphe,
il suffit de tapez <code>.</code> pour en supprimer un second. Très utile, c'est
ce que nous dit toute la littérature sur Vim. Y'aurait pas comme un petit
malaise quand même ?</p>

<!-- more -->


<p>Quand j'ai débuté sur Vim, je lisais ça partout: «Le <code>.</code> c'est génial» ou
encore «Préparez vous à utiliser <code>.</code> tout le temps», etc. Après un mois
à utiliser Vim, j'avais du utiliser cette commande 3 fois maximum… Je
sentais bien qu'il y avait un souci quelque part, mais pris dans
l'apprentissage de Vim je ne mettais pas le doigt dessus. J'ai presque fini par
l'oublier, ce <code>.</code>.</p>

<p>Et puis un jour, j'ai changé de clavier pour un Bépo. Et comme par magie je
me suis mis à utiliser le <code>.</code> tout le temps, sans même m'en rendre compte.</p>

<p>Voici un clavier Bépo et un clavier Qwerty:</p>

<p><img src="/images/clavier-bepo.png"></p>

<p><img src="/images/clavier-qwerty.png"></p>

<p>Sur Bépo et Qwerty, le point est une touche en accès direct. Au contraire
de l'Azerty où il faut combiner avec la touche Majuscule pour l'atteindre:</p>

<p><img src="/images/clavier-azerty.png"></p>

<p>Du coup je me demande si ça ne vaudrait pas le coup d'échanger le <code>.</code> et
le <code>;</code> pour les Vimistes qui utilisent un clavier Azerty. Je suis curieux
de savoir ce que vous en pensez. Avez vous déjà tenté cette manip et la
conseilleriez vous ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le système de fenêtrage de Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/"/>
    <updated>2013-09-07T09:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je vous présente les combinaisons de touches que j'utilise
au quotidien pour travailler avec les fenêtres dans Vim.</p>

<!-- more -->


<p>Avant d'entrer dans le vif du sujet, je dois vous prévenir que
pour ouvrir un fichier dans une nouvelle fenêtre (ou dans un nouvel onglet)
j'utilise le plugin Ctrlp. Il n'y aura donc pas de commandes relatives
à l'ouverture d'un nouveau fichier.</p>

<h2>La base</h2>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
horizontale:</p>

<p><code>vim
:sp
</code></p>

<p><code>sp</code> est l'abréviation de <code>split</code>.</p>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
verticale:</p>

<p><code>vim
:vs
</code></p>

<p><code>vs</code> est l'abréviation de <code>vsplit</code>.</p>

<h2>Un peu de mappage</h2>

<p>Pour faciliter les manipulations de fenêtres, j'utilise <code>w</code> comme
un Ctrl+w. Ctrl+w étant le préfixe de nombreuses commandes concernants
les fenêtres:</p>

<p><code>vim
noremap w &lt;C-w&gt;
noremap W &lt;C-w&gt;&lt;C-w&gt;
</code></p>

<p>En mode normal, les touches fléchées me servent à changer de fenêtre.</p>

<p><code>vim
nnoremap &lt;up&gt; &lt;C-w&gt;&lt;up&gt;
nnoremap &lt;down&gt; &lt;C-w&gt;&lt;down&gt;
nnoremap &lt;left&gt; &lt;C-w&gt;&lt;left&gt;
nnoremap &lt;right&gt; &lt;C-w&gt;&lt;right&gt;
</code></p>

<h2>Bouger et fermer</h2>

<p>Pour changer de fenêtre en cycle:</p>

<p><code>vim
ww
</code></p>

<p>Pour échanger deux fenêtres:</p>

<p><code>vim
wx
</code></p>

<p>Pour fermer la fenêtre active, deux solutions:</p>

<p><code>vim
:q
" ou bien
ZZ
</code></p>

<p>Pour fermer toutes les fenêtres sauf la courante:</p>

<p><code>vim
wo
</code></p>

<p>Pour basculer la fenêtre active dans un nouvel onglet:</p>

<p><code>vim
wT
</code></p>

<h2>Dimensions des fenêtres</h2>

<p>Pour un agencement de fenêtres un peu complexe, il est sûrement plus simple et
rapide d'utiliser la souris. Et oui, il arrive parfois (mais c'est rare, hein)
que le clavier ne soit pas le périphérique le mieux adapté.</p>

<p>Pour donner une taille identique à toutes les fenêtres:</p>

<p><code>vim
w=
</code></p>

<p>Pour redimensionner les fenêtres, j'utilise la touche <code>Control</code> combinée
avec les flèches:</p>

<p><code>vim
nnoremap &lt;C-up&gt; :resize +2&lt;cr&gt;
nnoremap &lt;C-down&gt; :resize -2&lt;cr&gt;
nnoremap &lt;C-right&gt; :vertical resize +2&lt;cr&gt;
nnoremap &lt;C-left&gt; :vertical resize -2&lt;cr&gt;
</code></p>

<p>Ainsi,
Ctrl + flèche vers le haut va augmenter la hauteur de la fenêtre active.
Ctrl + flèche vers le bas va diminuer la hauteur de la fenêtre active.
Ctrl + flèche vers la droite va augmenter la largeur de la fenêtre active.
Ctrl + flèche vers la gauche va diminuer la largeur de la fenêtre active.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Générer un fichier Changelog avec Git]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git/"/>
    <updated>2013-09-04T11:23:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/04/generer-un-fichier-changelog-avec-git</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><em>J'ai écrit un script pour Git qui permet de produire un fichier</em>
changelog
<em>en html ou en markdown à partir des commits.</em></p>

<!-- more -->


<p>Dans un
<a href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/">article précédent</a>
j'ai montré comment étendre Git avec un script pour créer ses propres
commandes. Aujourd'hui je vous présente mon script <code>git-changelog</code>.
Vous pouvez le trouver sur
<a href="https://github.com/lkdjiin/git-changelog">Github</a>.</p>

<p>Il s'agit d'un script Ruby qui ajoute une commande <code>changelog</code> à Git.
Il est utile pour automatiser (ou semi-automatiser) la production du
fichier changelog. Il peut produire des fichiers au format HTML ou au
format Markdown.</p>

<p>Pour l'installer, il faut mettre le fichier <code>git-changelog</code> quelque part
dans votre PATH, après l'avoir téléchargé.</p>

<h2>Utilisation</h2>

<p>Sortie sur la console:</p>

<pre><code>git changelog
</code></pre>

<p>Sortie dans un fichier:</p>

<pre><code>git changelog &gt; changelog.markdown
</code></pre>

<p>Le script accepte l'option <code>--since</code>. C'est la même option qu'utilise la
commande <code>git log</code>:</p>

<pre><code>git changelog --since=2013-07-01
git changelog --since=10.days
</code></pre>

<p>Sortie au format HTML:</p>

<pre><code>git changelog --html
</code></pre>

<p>Un exemple de combinaison:</p>

<pre><code>git changelog --html --since=2013-05-27 &gt; changelog.html
</code></pre>

<h2>Un exemple</h2>

<p>Voici ce que produit <code>git-changelog</code>:</p>

<pre><code>2013-07-18 Version 0.2.1  
==========================
* 2013-07-18 Fix bug for markdown format  
  Html entities are now escaped.
* 2013-07-18 Fix bug with markdown format  
  Commit body now start on a new line.
* 2013-07-18 Add auto-generated changelog file  

2013-07-18 Version 0.2.0  
==========================
* 2013-07-18 Add html format output  
  A new --html option outputs a &amp;lt;ul&amp;gt;.
* 2013-07-17 First commit  
  The script outputs in markdown and accept the option '--since'.
</code></pre>

<p>Et voilà ce que ça donne (avec le style de ce blog):</p>

<h1>2013-07-18 Version 0.2.1  </h1>

<ul>
<li>2013-07-18 Fix bug for markdown format<br/>
Html entities are now escaped.</li>
<li>2013-07-18 Fix bug with markdown format<br/>
Commit body now start on a new line.</li>
<li>2013-07-18 Add auto-generated changelog file</li>
</ul>


<h1>2013-07-18 Version 0.2.0  </h1>

<ul>
<li>2013-07-18 Add html format output<br/>
A new &mdash;html option outputs a &lt;ul&gt;.</li>
<li>2013-07-17 First commit<br/>
The script outputs in markdown and accept the option &lsquo;&mdash;since&rsquo;.</li>
</ul>


<h2>Rake task</h2>

<p>Voici un exemple de <em>rake task</em> pour une gem Ruby:</p>

<p><code>ruby
desc "Generate the changelog"
task :changelog do
  system "git changelog &gt; Changelog.markdown"
end
</code></p>

<p>Et un exemple pour un projet Rails:</p>

<p><code>ruby lib/tasks/changelog.rake
desc "Generate the changelog in html"
task :changelog do
  system "git changelog --html &gt; app/views/pages/_changelog.html"
end
</code></p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: Recherche de texte]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte/"/>
    <updated>2013-08-27T10:14:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je montre comment rechercher une chaîne de caractères dans un
fichier avec Vim: les commandes, les options et un petit truc en plus…</p>

<!-- more -->


<h2>Les commandes utiles</h2>

<p>Pour rechercher un texte dans le fichier, on utilise la commande <code>/</code> suivie
du texte à rechercher et de la touche entrée. Ainsi:</p>

<pre><code>/texte
</code></pre>

<p>va chercher toutes les occurences de «texte» dans le fichier.</p>

<p>Pour se déplacer parmi les occurences trouvées, on utilise <code>n</code> et <code>N</code>. <code>n</code>
va à l'occurence suivante tandis que <code>N</code> va à l'occurence précédente.</p>

<p>Attention, la commande de recherche <code>/</code> ne tient pas compte des <em>mots</em>.
Je m'explique: <code>/xxx</code> va trouver les 4 expressions suivantes.</p>

<ol>
<li>xxx</li>
<li>aaaxxx</li>
<li>xxxbbb</li>
<li>aaaxxxbbb</li>
</ol>


<p>Parfois c'est ce que l'on veut, parfois non. Pour modifier ce comportement
on utilise <code>\&lt;</code> et <code>\&gt;</code>, respectivement pour signifier le début et la fin
d'un mot. Ainsi <code>\&lt;xxx\&gt;</code> ne trouvera que l'expression n° 1. <code>\&lt;xxx</code> trouvera
la n° 1 et la n° 3. Quand à <code>/xxx\&gt;</code>, elle trouvera la n° 1 et la n° 2.</p>

<h2>Les options</h2>

<p>Voici quelques options à utiliser dans votre fichier .vimrc.</p>

<p><code>vim
set incsearch
</code></p>

<p>La recherche sera mise en évidence au fur et à mesure de la frappe clavier,
et non pas seulement après la touche entrée. <code>incsearch</code> signifie
<em>incremental search</em>.</p>

<p><code>vim
set ignorecase smartcase
</code></p>

<p>Ces deux options marchent souvent de pair. <code>ignorecase</code> permet d'ignorer la
différence minuscule/majuscule, ainsi <code>/texte</code> trouvera «texte», «TEXTE» et
«Texte». <code>smartcase</code> repassera en mode différenciation des
minuscules/majuscules si vous saisissez une majuscule, ainsi <code>/Texte</code> trouvera
«Texte» mais pas «TEXTE» ni «texte».</p>

<p><code>vim
set hlsearch
</code></p>

<p>Cette option sert à mettre en évidence la recherche, autrement dit à la
surligner.</p>

<h2>Supprimer la mise en évidence du texte après une recherche</h2>

<p>Une fois que vous avez fait ce que vous aviez à faire avec votre recherche,
celle-ci reste surlignée, ce qui devient vite très agaçant (pour rester poli).
Pour effacer le surlignage, on utilise la commande <code>nohlsearch</code>:</p>

<p><code>vim
:nohlsearch
</code></p>

<p>On aura évidemment intérêt à mapper cette commande, par exemple sur
<code>&lt;Leader&gt;h</code>:</p>

<p><code>vim
nnoremap &lt;Leader&gt;h :nohlsearch&lt;CR&gt;
</code></p>

<p>Personnellement, je n'ai pas de mappage pour cette commande: je ne m'en
sert tout simplement pas. Pour supprimer la mise en évidence de la
dernière recherche je tape juste <code>/xx</code>. Vous pouvez utiliser <code>/yy</code> ou <code>/ww</code>
ou tout ce qui tombe bien sous vos doigts. Le principe est de rechercher
une chaîne qui n'existe pas, ce qui a pour effet d'effacer la dernière
mise en évidence.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quelques ressources libres pour Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir/"/>
    <updated>2013-08-24T11:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J'ai passé quelques semaines à tester/jouer avec le langage Elixir. Voici
une liste des ressources qui m'ont été très utiles.</p>

<!-- more -->


<h2>Le site officiel</h2>

<p>Tout commence ici: <a href="http://elixir-lang.org/">http://elixir-lang.org/</a>.
Plus spécifiquement, vous y trouverez une liste de
<a href="http://elixir-lang.org/getting_started/1.html">tutoriels</a>
bien foutus, quoique trop succints à mon goût.</p>

<h2>La documentation</h2>

<p>N'hésitez jamais à consulter la
<a href="http://elixir-lang.org/docs/stable/">documentation d'Elixir</a>. Elle est
claire et assez complète pour un jeune projet.</p>

<h2>Études for Elixir</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000001642">Études for Elixir</a>
est un bouquin par O'Reilly en open-source. Il s'agit d'une série d'exercices
à réaliser, on apprend beaucoup. Si vous êtes coincés, les solutions se
trouvent
<a href="https://github.com/oreillymedia/etudes-for-elixir">ici</a>.</p>

<h2>La mailing list</h2>

<p>Si vous êtes perdus, la <a href="https://groups.google.com/forum/#!forum/elixir-lang-talk">mailing list</a>
d'Elixir est votre amie. L'auteur du langage, et d'autres passionnés/engagés,
vous répondent rapidement et poliment. Les réponses sont toujours pertinentes.
C'est vraiment une très bonne mailing list.</p>

<h2>Plugin vim</h2>

<p>Si vous utilisez Vim, ce qu'il vous faut pour la syntaxe, l'indentation, etc,
se trouve <a href="https://github.com/elixir-lang/vim-elixir">ici</a>.</p>

<p>Si vous utilisez le plugin Vim Snipmate, voici en bonus un fichier de
snippets pour Elixir que j'ai commencé. Il y en a peu, mais je pense que
c'est un bon départ, à vous ensuite de créer les votres:</p>

<p>``` vim
snippet case</p>

<pre><code>case ${1:var} do
    ${2:condition1} -&gt; ${3:action1}
    _ -&gt; ${4:other}
end
</code></pre>

<p>snippet cond</p>

<pre><code>cond do
    ${1:condition1} -&gt; ${2:action1}
    true -&gt; ${3:other}
end
</code></pre>

<p>snippet d</p>

<pre><code>def ${1:function} do
    ${2}
end
</code></pre>

<p>snippet dm</p>

<pre><code>defmodule ${1:ModuleName} do
    ${2}
end
</code></pre>

<p>snippet dp</p>

<pre><code>defp ${1:function} do
    ${2}
end
</code></pre>

<p>snippet map</p>

<pre><code>Enum.map(${1:list}, fn e -&gt; ${2:action} end)
</code></pre>

<p>snippet puts</p>

<pre><code>IO.puts ${1}
</code></pre>

<p>```</p>

<h2>Conclusion provisoire sur Elixir</h2>

<p>Apprendre les bases d'Elixir a été plaisant, mais je vais m'arrêter là,
du moins jusqu'à la sortie de la version 1.0.
Le gros avantage d'Elixir est d'utiliser la totalité de vos processeurs
gratuitement. Il n'y a rien à faire, rien à dire, rien à configurer. Ça
marche et c'est tout. J'ai moins aimé la syntaxe qui te fait croire que
tu es en terrain conquis si tu connais Ruby. Ça n'est pas le cas, les
deux langages sont vraiment différents. Le couplage avec Erlang ne
m'a pas convaincu. À un moment ou un autre (du moins quand j'écris ces
lignes) si on veut écrire quelque chose de conséquent, il faut apprendre
un minimum d'Erlang. Ça changera peut-être avec le temps.</p>

<p>Quoiqu'il en soit, la fréquence de nos processeurs n'augmentant plus, un
langage élégant qui sait <em>réellement</em> utiliser le multi-coeur simplement
et avec efficacité est sans conteste un langage sur lequel il faut
garder un oeil…</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
