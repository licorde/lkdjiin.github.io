<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-17T09:08:07+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/"/>
    <updated>2013-07-17T08:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ces derniers jours j'ai montré comment étendre les fonctionnalités
de Git à l'aide des alias (voir les 2 articles précédents). Aujourd'hui
on passe à la suite logique avec la création de nos propres scripts pour
Git.</p>

<p><em>Ce qui suit fonctionne sur Linux et MacOS. Je ne sais pas si c'est
possible sur Windows.</em></p>

<!-- more -->


<p>Un exemple vaut parfois mieux qu'un long discours. Alors créez donc le fichier
<code>git-hello</code> suivant:</p>

<p>``` bash git-hello</p>

<h1>!/bin/bash</h1>

<p>echo Hello
```</p>

<p>Donnez lui les droits d'exécution (<code>chmod +x git-hello</code>) et placez le dans
votre PATH. Moi je le place dans <code>~/bin/</code> et j'ajoute la ligne suivante à
<code>~/.bashrc</code>:</p>

<p><code>bash
PATH=$PATH:/home/xavier/bin
</code></p>

<p>Si vous n'êtes pas sous Linux, vous devrez adapter ces directives pour
votre OS. Une fois que c'est fait, vérifiez si tout fonctionne
correctement:</p>

<pre><code>xavier:~$ git-hello 
Hello
</code></pre>

<p>Maintenant vous vous dites peut-être <em>«Bon d'accord, il vient d'écrire un
script bidon, et alors ? Je vois toujours pas le rapport avec Git !»</em>
Le fichier qu'on vient d'écrire n'est pas nommé n'importe comment. Il
commence par <code>git-</code>. C'est ce qui va permettre à la magie d'opérer:</p>

<pre><code>xavier:~$ git h[Tab]
hello   help    hist    
xavier:~$ git hello
Hello
</code></pre>

<p>La même chose en différé live &ndash;<em> c'est mon dixième article sur ce blog,
je fête ça avec mon tout premier gif, je m'amuse comme je veux…</em> &ndash;</p>

<p><img src="/images/2013-07-17-1.gif"></p>

<p>La règle est simple:</p>

<p><blockquote><p>Un fichier nommé <code>git-foo</code> sera vu par Git comme étant une de ses propres<br/>commandes, nommée <code>foo</code>.</p></blockquote></p>

<p>C'est possible grâce à l'auto complétion programmable de Bash, dont je
parlerais une prochaine fois. Si vous avez défini des alias un peu
complexe, vous auriez peut-être avantage à les placez dans un script pour
profiter de la coloration syntaxique.
Demain, je montrerais un script un
peu plus utile et étoffé que celui-ci :) En attendant, testez vos propres idées.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: complétion automatique et alias pour débutants]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/"/>
    <updated>2013-07-15T07:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Utilisez git en ligne de commande, c'est taper encore et encore les mêmes
commandes sur votre clavier. Si vous êtes comme moi, vous utilisez la
ligne de commande parce que vous savez que c'est ce qu'il y a de plus
rapide. C'est puissant, mais ça peut aussi finir par lasser. On va voir
comment accélerer encore les choses.</p>

<!-- more -->


<h2>Complétion automatique</h2>

<p>Il y a tout d'abord la complétion automatique, si votre système est
configuré pour. Si par exemple je tape <code>git c</code>, suivi de la touche
tabulation ([Tab]), voici ce qu'il se passe:</p>

<p><code>bash
xavier:~$ git c
checkout      cherry-pick   clean         clone         commit
cherry        ci            cleanup       co            config
xavier:~$ git c
</code></p>

<p>Je suis informé de toutes les commandes commençant par la lettre <code>c</code>. Et la
ligne de commande est reprise automatiquement sur une nouvelle ligne, prête à
être complétée. Si je tape <code>git chec</code> puis [Tab], la commande s'étends de suite
en <code>git checkout</code> puisqu'il n'y a plus d'ambiguités. C'est un bon moyen pour se
rafraichir la mémoire sur les différentes commandes disponibles, et ça accélère
un peu la frappe au clavier. Mais on doit pouvoir faire mieux.</p>

<h2>Les alias git</h2>

<p>Git permet de définir des alias (littéralement: pseudonyme ou nom d'emprunt) sur
ses commandes. Un classique du genre est <code>git co</code>, à la place de <code>git
checkout</code>. Pour faire ça, on utilise la commande <code>config</code> de git:</p>

<pre><code>git config --global alias.co 'checkout'
</code></pre>

<p>Maintenant, partout où vous utilisiez <code>checkout</code> vous pouvez vous contentez
de <code>co</code>, par exemple:</p>

<p>``` bash</p>

<h1>Grâce à son système d'alias, git transforme la ligne suivante</h1>

<h1>en &lsquo;git checkout master&rsquo;.</h1>

<p>git co master
```</p>

<p>Il faut noter que la complétion automatique fonctionne aussi sur le nom de
la branche. Ainsi <code>git co m[Tab]</code> sera étendu en <code>git co master</code> (si la
branche <code>master</code> est la seule commençant par la lettre <code>m</code>, bien entendu).</p>

<h2>Le fichier .gitconfig</h2>

<p>Git enregistre vos alias dans le fichier <code>~/.gitconfig</code>. Si vous vous sentez
à l'aise avec l'idée d'éditer ce fichier, vous pouvez le faire. Je trouve
que c'est plus simple que d'avoir à se souvenir de la syntaxe de la
commande <code>git config</code>. Voyons ce que ça donne avec notre alias <code>co</code>:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 1
[alias]</p>

<pre><code>co = checkout
</code></pre>

<p>```</p>

<p>Ajoutons un autre classique du genre, <code>ci</code> pour <code>commit</code>:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 2
[alias]</p>

<pre><code>co = checkout
ci = commit
</code></pre>

<p>```</p>

<p>Voilà, maintenant vous pouvez écrire:</p>

<pre><code>git ci -a ...
</code></pre>

<p>à la place de</p>

<pre><code>git commit -a ...
</code></pre>

<p>Les alias peuvent aussi contenir des options. Par exemple, pour afficher les
3 derniers commits, on peut ajouter un alias sur la commande <code>log</code> de cette
manière:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 3
[alias]</p>

<pre><code>co = checkout
ci = commit
</code></pre>

<p>  last = log -3
```</p>

<h2>Pour conclure</h2>

<p>Je vous ai présenté les fonctionnalités basiques des alias de git. On a vu
notamment deux manières de les créer. Les alias git
peuvent se révéler beaucoup plus puissants que ce que j'ai abordé dans
ce tutoriel d'introduction. En attendant un possible futur article sur
le sujet, si vous
cherchez un peu sur internet vous trouverez des tas de définitions
d'alias, certaines très utiles et d'autres moins. À vous de faire le tri
selon vos besoins.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro trois]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois/"/>
    <updated>2013-07-14T09:11:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/14/bien-debuter-avec-vim-conseil-numero-trois</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Ayez confiance dans le mode normal</h2>

<p>Ça ne vous aura pas échappé, Vim est un éditeur modal.  C'est à dire qu'il
possède plusieurs modes de fonctionnement, plusieurs manières de considérer les
choses.  Comme par exemple, le mode normal pour éditer du texte, ou bien le mode
commande pour lancer des fonctions, ou encore le mode insertion pour saisir du
nouveau texte, etc.  C'est une des grandes différences de Vim par rapport aux
éditeurs dits «classiques», qui restent la plupart du temps en insertion.</p>

<!-- more -->


<p>Il semblerait qu'une erreur courante chez les nouveaux utilisateurs de Vim soit
de rester en mode insertion, et de ne passer en mode normal que lorsque cela
s'avère absolument necessaire.  Si vous agissez de la sorte, vous passerez
totalement à côté de vim. Au contraire, vous devez rester le plus longtemps
possible en mode normal. Entrez dans un autre mode uniquement quand c'est
nécessaire et repassez en normal le plus tôt possible.</p>

<p><blockquote><p>La première chose que fait un Vimiste qui revient d'une pause café, c'est<br/>appuyer sur ESC pour être sûr d'être à la maison.</p></blockquote></p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro deux]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux/"/>
    <updated>2013-07-12T09:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Abandonnez la souris</h2>

<p>Moins utiliser la souris est une des principales motivations qui m'ont décidé à
passer sur Vim, il y a maintenant un an et demi. Histoire d'avoir moins de
crampe à la fin de la journée. Et le pari est réussi. En quelques mois, toutes
les douleurs que je ressentais systématiquement à l'épaule et au poignet en fin
de journée ont totalement disparues.</p>

<!-- more -->


<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Je suis même prêt à parier que dans quelques temps, vous chercherez
les moyens d'utiliser vos autres logiciels sans la souris …</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro un]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/09/bien-debuter-avec-vim-conseil-numero-un/"/>
    <updated>2013-07-09T09:12:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/09/bien-debuter-avec-vim-conseil-numero-un</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Soyez radical !</h2>

<p>De tous les conseils qu'on puisse donner pour bien débuter avec Vim, je pense
que celui-ci est clairement le plus important. Le number one des conseils,
quoi : <strong>Soyez radical</strong>. Autrement dit : n'utilisez plus que Vim et seulement
Vim. Exclusivement.</p>

<!-- more -->


<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
