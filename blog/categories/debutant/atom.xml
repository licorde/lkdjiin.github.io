<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-26T09:04:34+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quelques ressources libres pour Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir/"/>
    <updated>2013-08-24T11:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/24/quelques-ressources-libres-pour-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J'ai passé quelques semaines à tester/jouer avec le langage Elixir. Voici
une liste des ressources qui m'ont été très utiles.</p>

<!-- more -->


<h2>Le site officiel</h2>

<p>Tout commence ici: <a href="http://elixir-lang.org/">http://elixir-lang.org/</a>.
Plus spécifiquement, vous y trouverez une liste de
<a href="http://elixir-lang.org/getting_started/1.html">tutoriels</a>
bien foutus, quoique trop succints à mon goût.</p>

<h2>La documentation</h2>

<p>N'hésitez jamais à consulter la
<a href="http://elixir-lang.org/docs/stable/">documentation d'Elixir</a>. Elle est
claire et assez complète pour un jeune projet.</p>

<h2>Études for Elixir</h2>

<p><a href="http://chimera.labs.oreilly.com/books/1234000001642">Études for Elixir</a>
est un bouquin par O'Reilly en open-source. Il s'agit d'une série d'exercices
à réaliser, on apprend beaucoup. Si vous êtes coincés, les solutions se
trouvent
<a href="https://github.com/oreillymedia/etudes-for-elixir">ici</a>.</p>

<h2>La mailing list</h2>

<p>Si vous êtes perdus, la <a href="https://groups.google.com/forum/#!forum/elixir-lang-talk">mailing list</a>
d'Elixir est votre amie. L'auteur du langage, et d'autres passionnés/engagés,
vous répondent rapidement et poliment. Les réponses sont toujours pertinentes.
C'est vraiment une très bonne mailing list.</p>

<h2>Plugin vim</h2>

<p>Si vous utilisez Vim, ce qu'il vous faut pour la syntaxe, l'indentation, etc,
se trouve <a href="https://github.com/elixir-lang/vim-elixir">ici</a>.</p>

<p>Si vous utilisez le plugin Vim Snipmate, voici en bonus un fichier de
snippets pour Elixir que j'ai commencé. Il y en a peu, mais je pense que
c'est un bon départ, à vous ensuite de créer les votres:</p>

<p>``` vim
snippet case</p>

<pre><code>case ${1:var} do
    ${2:condition1} -&gt; ${3:action1}
    _ -&gt; ${4:other}
end
</code></pre>

<p>snippet cond</p>

<pre><code>cond do
    ${1:condition1} -&gt; ${2:action1}
    true -&gt; ${3:other}
end
</code></pre>

<p>snippet d</p>

<pre><code>def ${1:function} do
    ${2}
end
</code></pre>

<p>snippet dm</p>

<pre><code>defmodule ${1:ModuleName} do
    ${2}
end
</code></pre>

<p>snippet dp</p>

<pre><code>defp ${1:function} do
    ${2}
end
</code></pre>

<p>snippet map</p>

<pre><code>Enum.map(${1:list}, fn e -&gt; ${2:action} end)
</code></pre>

<p>snippet puts</p>

<pre><code>IO.puts ${1}
</code></pre>

<p>```</p>

<h2>Conclusion provisoire sur Elixir</h2>

<p>Apprendre les bases d'Elixir a été plaisant, mais je vais m'arrêter là,
du moins jusqu'à la sortie de la version 1.0.
Le gros avantage d'Elixir est d'utiliser la totalité de vos processeurs
gratuitement. Il n'y a rien à faire, rien à dire, rien à configurer. Ça
marche et c'est tout. J'ai moins aimé la syntaxe qui te fait croire que
tu es en terrain conquis si tu connais Ruby. Ça n'est pas le cas, les
deux langages sont vraiment différents. Le couplage avec Erlang ne
m'a pas convaincu. À un moment ou un autre (du moins quand j'écris ces
lignes) si on veut écrire quelque chose de conséquent, il faut apprendre
un minimum d'Erlang. Ça changera peut-être avec le temps.</p>

<p>Quoiqu'il en soit, la fréquence de nos processeurs n'augmentant plus, un
langage élégant qui sait <em>réellement</em> utiliser le multi-coeur simplement
et avec efficacité est sans conteste un langage sur lequel il faut
garder un oeil…</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash: ajouter une ligne à la fin de plusieurs fichiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers/"/>
    <updated>2013-08-23T11:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/23/bash-ajouter-une-ligne-a-la-fin-de-plusieurs-fichiers</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans l'article d'hier, je décrivais mon deuxième plugin pour Octopress.
Pour le mettre en place sur ce blog, je vais devoir ajouter une ligne de
texte à l'ensemble des articles. Il y en a presque une cinquantaine
maintenant, il est donc hors de question de le faire à la main.
Bash va me faire ça en quelques secondes.</p>

<!-- more -->


<p>J'ouvre une console dans le dossier où sont placés mes articles, et j'entre
ce qui suit:</p>

<p>``` console
[~/&hellip;/source/_posts]⇒ for file in *.markdown; do</p>

<blockquote><p>echo &lsquo;ligne à ajouter&rsquo; >> &ldquo;$file&rdquo;
done
```</p></blockquote>

<p>Tada ! C'est fini. Si vous n'êtes pas familier de Bash, voici une petite
description de ce qui s'est passé:</p>

<p>``` bash
for file in *.markdown; do</p>

<h1>&hellip;</h1>

<p>done
```</p>

<p><code>for - do - done</code> est une structure d'itération de Bash, en gros l'équivalent
d'une boucle <code>for</code> en C, Java, etc. On l'utilise généralement pour itérer
sur les arguments de la ligne de commande, ou bien, comme ici, sur les
fichiers du répertoire. Elle peut s'écrire aussi sur 3 lignes:</p>

<p><code>bash
for x in *
do
ma_commande
done
</code></p>

<p>Et même sur une seule ligne: <code>for x in *; do ma_commande ; done</code></p>

<p><code>bash
echo 'ligne à ajouter' &gt;&gt; "$file"
</code></p>

<p>La commande <code>echo</code> affiche normalement une chaîne de caractère sur
la console. Ici cette chaîne est redirigée avec <code>&gt;&gt;</code> dans le fichier
représenté par <code>"$file"</code>.</p>

<p><code>&gt;&gt;</code> permet d'ajouter en fin de fichier. et le <code>$</code> permet d'extraire le contenu
d'une variable.</p>

<h2>Pour conclure</h2>

<p>La syntaxe de Bash m'a toujours défrisé, mais quand il s'agit de traiter des
fichiers texte, c'est vraiment un outil puissant. Comme je suis curieux,
j'aimerais bien savoir ce que <em>toi</em>, lecteur, tu aurais utilisé pour
cette tâche. Bash, Perl, Sed, Awk, Ruby, autre chose ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un plugin Octopress pour les articles connexes]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes/"/>
    <updated>2013-08-22T15:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je cherchais un plugin Octopress pour embarquer une section d'articles
connexes (<em>related posts</em>) dans certains articles et, curieusement, je
n'en ai pas trouvé. C'est donc l'occasion d'écrire mon second plugin pour
Octopress.</p>

<!-- more -->


<p>Pour voir ce que fait ce plugin, il vous suffit de regarder la section
«Articles connexes» à la fin de cet article. Le code est sur Github:
<a href="https://github.com/lkdjiin/octopress-connexe">octopress-connexe</a>.</p>

<p>Je vais commenter quelques unes des méthodes:</p>

<p>``` ruby
def my_categories(context)
  context.environments.first[&ldquo;page&rdquo;][&ldquo;categories&rdquo;]
end</p>

<p>def my_url(context)
  context.environments.first[&ldquo;page&rdquo;][&ldquo;url&rdquo;]
end
```</p>

<p>J'ai séché un certain temps là-dessus. Pour connaitre les informations
relative à l'article courant, on se sert de
<code>context.environments.first["page"]</code>.</p>

<p>Et voici comment je fais la sélection des articles connexes:</p>

<p>``` ruby
def build_posts(context)
  remove_unrelated_posts
  remove_current_post(context)
  sort_posts
end</p>

<p>def remove_unrelated_posts
  @posts = @posts.select do |post|</p>

<pre><code>result = false
@categories.each do |category|
  result = true if post.categories.include?(category)
end
result
</code></pre>

<p>  end
end</p>

<p>def remove_current_post(context)
  @posts.delete_if {|post| post.url == my_url(context)}
end</p>

<p>def sort_posts
  @posts = @posts.map do |post|</p>

<pre><code>weight = 0
@categories.each do |category|
  weight += 1 if post.categories.include?(category)
end
[weight, post]
</code></pre>

<p>  end
  @posts = @posts.sort.reverse
end
```</p>

<p>Dans un premier temps, j'écarte les articles qui n'ont pas au moins
une catégorie commune avec l'article courant. C'est le rôle de la méthode
<code>remove_unrelated_posts</code>. Puis après avoir écarter de la liste l'article
courant, il ne reste plus qu'à trier avec la méthode <code>sort_posts</code>. Dans cette
méthode, j'attribue un poid à chaque article en fonction du nombre de
catégories communes. C'est ce poid qui sert de référence pour le tri.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: la touche Escape]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/"/>
    <updated>2013-08-15T10:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vim a été développé sur des machines dont les claviers avaient une
disposition des touches autres que celle de nos claviers modernes. Comme par
exemple le terminal ADM-3A:</p>

<p><img src="/images/KB_Terminal_ADM3A.png"></p>

<!-- more -->


<p>Le plus frappant c'est l'endroit de la touche <em>Escape</em> à l'époque. On pouvait
y accéder avec une simple extension du petit doigt gauche, sans avoir à
bouger la main. De nos jours, cette touche a été reléguée aux confins de
l'univers. Sachant que c'est une touche qu'on utilise sans cesse, y a de
quoi choper une tendinite. Je vais vous donner 3 trucs pour remédier à ce
problème, choisissez celui qui vous conviendra le mieux.</p>

<h2>Control c</h2>

<p>C'est le truc le plus simple, rien à configurer. La combinaison <code>&lt;Ctrl-c&gt;</code>
fonctionne naturellement comme une touche <em>Escape</em>. Il y a bien
quelques différences, et vous vous en rendrez compte à l'occasion, mais
la plupart du temps ça fonctionne. Commencez donc par là avant de vous
attaquer à d'autres trucs, celui-ci est peut être amplement suffisant.</p>

<h2>Une combinaison personnalisée</h2>

<p>Il semble que <code>jj</code> soit une combinaison de remplacement populaire en
mode insertion:</p>

<p><code>vim
inoremap jj &lt;Esc&gt;
</code></p>

<p>L'idée c'est d'utiliser une combinaison de deux caractères qui n'existe
pas dans votre langue/langage, et qui bien sûr soit simple et rapide a
taper. J'ai essayé pendant un moment ce genre de chose, mais je n'ai
jamais réussi à m'y faire.</p>

<h2>Échanger caps lock et esc</h2>

<p>Si pour vous la touche <em>caps lock</em> (verrou majuscule) est un mystère, voici
le truc qu'il vous faut. Mettez donc votre système d'exploitation à
contribution pour:</p>

<ul>
<li>soit échanger la touche <em>caps lock</em> et <em>esc</em></li>
<li>soit faire de <em>caps lock</em> une touche <em>esc</em> supplémentaire</li>
</ul>


<p>Quelque soit votre OS, vous devriez trouver ça dans un menu du genre
Système > Préférences > Clavier.</p>

<h2>Pour conclure</h2>

<p>Vous trouverez plein d'autres trucs sur internet, n'hesitez pas à en
essayer plusieurs avant d'adopter celui qui vous ressemblera.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro neuf]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf/"/>
    <updated>2013-08-08T08:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Apprenez à frapper en aveugle</h2>

<p>Ce conseil devrait plutôt s'appeler:</p>

<p><blockquote><p>Avant d'apprendre Vim, apprenez d'abord à frapper en aveugle.</p></blockquote></p>

<p>Mais si vous lisez cet article, il est certainement trop tard, vous avez
déjà commencé Vim.</p>

<!-- more -->


<p>Si vous regardez vos doigts pendant que vous tapez, votre tête suit le
mouvement, et passe constamment d'une sorte de position clavier à une
position écran. D'où fatigue musculaire, occulaire et perte de temps.</p>

<p>Apprendre à frapper en aveugle est un sacré défi, comme apprendre Vim.
Ça ne s'acquiert pas en 2 jours. Il faut du temps.</p>

<p>Dans quelques mois, quand vous serez
assez à l'aise avec vim, installez un logiciel d'apprentissage de la
dactylographie (il y en a plein de libre) et apprenez à écrire sans regarder
votre clavier. Vous aurez alors accès à toute la puissance de Vim.</p>

<p>À demain.
</p>
]]></content>
  </entry>
  
</feed>
