<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-21T09:12:43+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installer le langage Elixir]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir/"/>
    <updated>2013-07-21T08:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/21/installer-le-langage-elixir</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ça fait quelques jours que j'essaie de faire des petits programmes avec
Elixir. J'entends parler de ce nouveau langage depuis plusieurs mois déjà, et
je n'avais pas encore eu le temps de m'amuser un peu avec. C'est chose
faite. Elixir est un langage dynamique, fonctionnel, concurrent, immuable
et on dit qu'il ressemble beaucoup à Ruby. C'est l'occasion pour moi de
débuter une série d'articles consacrés à Elixir. Ça commence aujourd'hui
avec l'installation.</p>

<!-- more -->


<p><em>Je vais décrire l'installation pour Debian, mais ça ne semble pas être
bien différent sur d'autres OS.</em></p>

<h2>Installer d'abord Erlang</h2>

<p>Elixir est bati au-dessus du langage Erlang, il faut donc tout d'abord
installer le compilateur Erlang avant d'installer Elixir à proprement parler.
La version R16B minimum est requise.
La marche à suivre est indiqué sur la page
<a href="https://www.erlang-solutions.com/downloads/download-erlang-otp">download-erlang-otp</a>.
Pour résumer, on ajoute la ligne suivante au fichier <code>/etc/apt/sources.list</code>:</p>

<pre><code>deb http://binaries.erlang-solutions.com/debian squeeze contrib
</code></pre>

<p>Puis on installe la clé:</p>

<pre><code>wget -O - http://binaries.erlang-solutions.com/debian/erlang_solutions.asc \ 
| sudo apt-key add -
</code></pre>

<p>Après y-a-pu-ka:</p>

<pre><code>apt-get update
apt-get install esl-erlang
</code></pre>

<p>On s'assure que l'installation est bien réalisée:</p>

<p>``` bash
xavier:~$ erl
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Eshell V5.10.2  (abort with ^G)
1>
```</p>

<h2>Installer Elixir</h2>

<p>Voilà Erlang est installé, c'est maintenant au tour d'Elixir proprement dit.
Pas de chance, il n'y a pas de package pour Debian, je dois donc installer
à partir des <a href="https://github.com/elixir-lang/elixir/tags">sources</a>. C'est
aussi simple que de décompresser l'archive et de taper <code>make</code>. À ce moment
là j'ai quand même un petit doute: pas de dépendances, de lib à installer ?
Mais je comprends vite que c'est Erlang qui est en train de compiler Elixir.
Donc non, tout va bien et ça marche du premier coup. Un petit truc quand
même, Elixir étant installé en local, il faut modifier la variable <code>PATH</code>
du shell pour pas galérer:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.9.3/bin/
</code></p>

<p>Reste à voir si ça fonctionne vraiment:</p>

<p>``` bash
xavier:~$ iex
Erlang R16B01 (erts-5.10.2) [source-bdf5300] [smp:2:2] [async-threads:10] [hipe] [kernel-poll:false]</p>

<p>Interactive Elixir (0.9.3) &ndash; press Ctrl+C to exit (type h() ENTER for help)
iex(1)> 1+1
2
iex(2)>
```</p>

<p>Cool ! L'installation s'est déroulée à merveille, tout marche du premier
coup. C'est bon signe ou pas ?</p>

<h2>Mise à jour d'Elixir</h2>

<p>Il sort pratiquement une nouvelle version d'Elixir par mois ; je sens
que les mises à jour vont faire partie de ma vie d'elixiriste (oui je
l'ai inventé celui-là, comment vous diriez ? Elixirien ?)
En fait, en
écrivant cet article, je m'aperçois que la version 0.10.0 est sortie.
C'est donc ma première mise à jour. Après le téléchargement,
la décompression et le <code>make</code>, il suffit d'accommoder le <code>PATH</code>:</p>

<p><code>bash .bashrc
PATH=$PATH:/home/xavier/local/bin/elixir-0.10.0/bin/
</code></p>

<p>Et la nouvelle version est prête à l'emploi. Si Elixir est aussi sympa que son
installation, ça promet. Affaire à suivre.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro quatre]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/19/bien-debuter-avec-vim-conseil-numero-quatre/"/>
    <updated>2013-07-19T07:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/19/bien-debuter-avec-vim-conseil-numero-quatre</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Utilisez une version graphique</h2>

<p>Utilisez une version graphique de vim, comme gVim sous Linux et Windows, ou
MacVim sous MacOS, plutôt que la version pour terminal.  À ceci 3 raisons:</p>

<!-- more -->


<p>Tout d'abord, une version graphique de Vim vous permettra d'utiliser votre
police de caractère et votre jeu de couleur préféré sans problème. Dans un
terminal, c'est pas gagné.</p>

<p>Ensuite, une version graphique vous donnera accès à une classique barre
de menu. C'est tout bête, mais au début ça rassure.</p>

<p>Enfin, la barre d'outils fournit trois icônes très utiles pour les
débutants: copier, couper, coller. Pendant la phase d'apprentissage,
vous serez très heureux d'avoir ces icônes sous la main pour
échanger du texte depuis Vim vers une autre application et vice-versa. C'est
donc une exception à mon conseil numéro 2:
<a href="http://lkdjiin.github.io/blog/2013/07/12/bien-debuter-avec-vim-conseil-numero-deux/">Abandonnez la souris</a>.
Bien sûr, Vim possède des commandes au
clavier pour faire ça, mais son système de clipboard/buffer très puissant est
complexe et s'avère franchement déroutant pour le novice.
En temps que débutant vous aurez
bien assez de choses à apprendre comme ça sans vous en rajouter une couche.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts: la suite]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite/"/>
    <updated>2013-07-18T07:39:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/18/comment-etendre-git-avec-ses-propres-scripts-la-suite</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p><em>Hier j'ai montré comment ajouter une commande à Git à l'aide d'un script.
Aujourd'hui je fais quelque chose d'utile grâce à ce nouveau pouvoir.</em></p>

<p>Ce que je fais régulierement avec Git c'est:</p>

<ol>
<li>ajouter une fonctionnalité dans la branche <code>ma_branche</code></li>
<li>quand c'est terminé, passer sur la branche <code>master</code></li>
<li>fusionner <code>ma_branche</code> dans <code>master</code></li>
</ol>


<p>Comme je ne travaille jamais directement dans la branche master, ce genre
de <em>merge</em> n'offre jamais de conflits. J'aimerais regrouper les
étapes 2 et 3 en une seule commande: <code>git merge-me</code>.</p>

<!-- more -->


<h2>Trouver la branche courante</h2>

<p>La première étape consiste à retrouver
et retenir le nom de la branche courante. Étant un grand fan de Sed, je
procederais naturellement comme ça:</p>

<pre><code>git branch | sed -n '/\* /s///p'
</code></pre>

<p>Mais je sais que Sed n'a pas les faveurs de tout le monde. J'ai donc fais une
recherche sur StackOverflow pour trouver une autre manière d'obtenir le
même résultat:</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre>

<p>Je pense que cette seconde solution est meilleure puisque moins fragile, même
si il y a peu de chance que Git change la sortie de <code>git branch</code>. Pour
retenir le nom de la branche, on place la sortie de cette commande dans une
variable Bash:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
echo $BRANCH_TO_MERGE
```</p>

<p>Comme en Ruby, les backticks déclenchent la commande et retournent sa
sortie. Le résultat:</p>

<pre><code>xavier:~$ git merge-me
ma_branche
</code></pre>

<p>Maintenant que j'ai vu que ça fonctionnait bien, le reste est un jeu
d'enfant.</p>

<h2>Le script final</h2>

<p>On ajoute les deux commandes Git, ce qui donne:</p>

<p>``` bash git-merge-me</p>

<h1>!/bin/bash</h1>

<p>BRANCH_TO_MERGE=<code>git rev-parse --abbrev-ref HEAD</code>
git checkout master
git merge $BRANCH_TO_MERGE
```</p>

<p>Et voici le script en action:</p>

<pre><code>xavier:~$ git merge-me
Switched to branch 'master'
Updating 48540e6..c584593
Fast-forward
 TODO |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)
xavier:~$ git branch
* master
  ma_branche
</code></pre>

<p>Ma nouvelle commande fait bien le travail que je lui demande.</p>

<h2>Pour aller plus loin</h2>

<p>Vous n'êtes pas limité à l'utilisation de Bash. Vous pouvez utiliser le
langage que vous voulez. À titre d'exemple, voici l'équivalent du script
précédent, cette fois en Ruby.
Toutefois comme ce genre de script va utiliser beaucoup de commandes
système, Ruby n'est peut-être pas le mieux placé. À vous de voir.</p>

<p>``` ruby git-merge-me version Ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>branch_to_merge = <code>git rev-parse --abbrev-ref HEAD</code>
system &lsquo;git checkout master&rsquo;
system &ldquo;git merge #{branch_to_merge.chomp}&rdquo;
```</p>

<p>On peut aussi combiner script et alias. On donne un nom bien explicite
à notre fichier, comme <code>git-merge-me-into-master</code> et on crée un alias
<code>mm = merge-me-into-master</code>. Ainsi on a une commande rapide sous les
doigts et on peut facilement retrouver le fichier grâce à son nom quand
on doit le modifier.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment étendre Git avec ses propres scripts]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts/"/>
    <updated>2013-07-17T08:03:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/17/comment-etendre-git-avec-ses-propres-scripts</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Ces derniers jours j'ai montré comment étendre les fonctionnalités
de Git à l'aide des alias (voir les 2 articles précédents). Aujourd'hui
on passe à la suite logique avec la création de nos propres scripts pour
Git.</p>

<p><em>Ce qui suit fonctionne sur Linux et MacOS. Je ne sais pas si c'est
possible sur Windows.</em></p>

<!-- more -->


<p>Un exemple vaut parfois mieux qu'un long discours. Alors créez donc le fichier
<code>git-hello</code> suivant:</p>

<p>``` bash git-hello</p>

<h1>!/bin/bash</h1>

<p>echo Hello
```</p>

<p>Donnez lui les droits d'exécution (<code>chmod +x git-hello</code>) et placez le dans
votre PATH. Moi je le place dans <code>~/bin/</code> et j'ajoute la ligne suivante à
<code>~/.bashrc</code>:</p>

<p><code>bash
PATH=$PATH:/home/xavier/bin
</code></p>

<p>Si vous n'êtes pas sous Linux, vous devrez adapter ces directives pour
votre OS. Une fois que c'est fait, vérifiez si tout fonctionne
correctement:</p>

<pre><code>xavier:~$ git-hello 
Hello
</code></pre>

<p>Maintenant vous vous dites peut-être <em>«Bon d'accord, il vient d'écrire un
script bidon, et alors ? Je vois toujours pas le rapport avec Git !»</em>
Le fichier qu'on vient d'écrire n'est pas nommé n'importe comment. Il
commence par <code>git-</code>. C'est ce qui va permettre à la magie d'opérer:</p>

<pre><code>xavier:~$ git h[Tab]
hello   help    hist    
xavier:~$ git hello
Hello
</code></pre>

<p>La même chose en différé live &ndash;<em> c'est mon dixième article sur ce blog,
je fête ça avec mon tout premier gif, je m'amuse comme je veux…</em> &ndash;</p>

<p><img src="/images/2013-07-17-1.gif"></p>

<p>La règle est simple:</p>

<p><blockquote><p>Un fichier nommé <code>git-foo</code> sera vu par Git comme étant une de ses propres<br/>commandes, nommée <code>foo</code>.</p></blockquote></p>

<p>C'est possible grâce à l'auto complétion programmable de Bash, dont je
parlerais une prochaine fois. Si vous avez défini des alias un peu
complexe, vous auriez peut-être avantage à les placez dans un script pour
profiter de la coloration syntaxique.
Demain, je montrerais un script un
peu plus utile et étoffé que celui-ci :) En attendant, testez vos propres idées.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: complétion automatique et alias pour débutants]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants/"/>
    <updated>2013-07-15T07:50:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/15/git-completion-automatique-et-alias-pour-debutants</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Utilisez git en ligne de commande, c'est taper encore et encore les mêmes
commandes sur votre clavier. Si vous êtes comme moi, vous utilisez la
ligne de commande parce que vous savez que c'est ce qu'il y a de plus
rapide. C'est puissant, mais ça peut aussi finir par lasser. On va voir
comment accélerer encore les choses.</p>

<!-- more -->


<h2>Complétion automatique</h2>

<p>Il y a tout d'abord la complétion automatique, si votre système est
configuré pour. Si par exemple je tape <code>git c</code>, suivi de la touche
tabulation ([Tab]), voici ce qu'il se passe:</p>

<p><code>bash
xavier:~$ git c
checkout      cherry-pick   clean         clone         commit
cherry        ci            cleanup       co            config
xavier:~$ git c
</code></p>

<p>Je suis informé de toutes les commandes commençant par la lettre <code>c</code>. Et la
ligne de commande est reprise automatiquement sur une nouvelle ligne, prête à
être complétée. Si je tape <code>git chec</code> puis [Tab], la commande s'étends de suite
en <code>git checkout</code> puisqu'il n'y a plus d'ambiguités. C'est un bon moyen pour se
rafraichir la mémoire sur les différentes commandes disponibles, et ça accélère
un peu la frappe au clavier. Mais on doit pouvoir faire mieux.</p>

<h2>Les alias git</h2>

<p>Git permet de définir des alias (littéralement: pseudonyme ou nom d'emprunt) sur
ses commandes. Un classique du genre est <code>git co</code>, à la place de <code>git
checkout</code>. Pour faire ça, on utilise la commande <code>config</code> de git:</p>

<pre><code>git config --global alias.co 'checkout'
</code></pre>

<p>Maintenant, partout où vous utilisiez <code>checkout</code> vous pouvez vous contentez
de <code>co</code>, par exemple:</p>

<p>``` bash</p>

<h1>Grâce à son système d'alias, git transforme la ligne suivante</h1>

<h1>en &lsquo;git checkout master&rsquo;.</h1>

<p>git co master
```</p>

<p>Il faut noter que la complétion automatique fonctionne aussi sur le nom de
la branche. Ainsi <code>git co m[Tab]</code> sera étendu en <code>git co master</code> (si la
branche <code>master</code> est la seule commençant par la lettre <code>m</code>, bien entendu).</p>

<h2>Le fichier .gitconfig</h2>

<p>Git enregistre vos alias dans le fichier <code>~/.gitconfig</code>. Si vous vous sentez
à l'aise avec l'idée d'éditer ce fichier, vous pouvez le faire. Je trouve
que c'est plus simple que d'avoir à se souvenir de la syntaxe de la
commande <code>git config</code>. Voyons ce que ça donne avec notre alias <code>co</code>:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 1
[alias]</p>

<pre><code>co = checkout
</code></pre>

<p>```</p>

<p>Ajoutons un autre classique du genre, <code>ci</code> pour <code>commit</code>:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 2
[alias]</p>

<pre><code>co = checkout
ci = commit
</code></pre>

<p>```</p>

<p>Voilà, maintenant vous pouvez écrire:</p>

<pre><code>git ci -a ...
</code></pre>

<p>à la place de</p>

<pre><code>git commit -a ...
</code></pre>

<p>Les alias peuvent aussi contenir des options. Par exemple, pour afficher les
3 derniers commits, on peut ajouter un alias sur la commande <code>log</code> de cette
manière:</p>

<p>``` ini section [alias] de .gitconfig &ndash; exemple 3
[alias]</p>

<pre><code>co = checkout
ci = commit
</code></pre>

<p>  last = log -3
```</p>

<h2>Pour conclure</h2>

<p>Je vous ai présenté les fonctionnalités basiques des alias de git. On a vu
notamment deux manières de les créer. Les alias git
peuvent se révéler beaucoup plus puissants que ce que j'ai abordé dans
ce tutoriel d'introduction. En attendant un possible futur article sur
le sujet, si vous
cherchez un peu sur internet vous trouverez des tas de définitions
d'alias, certaines très utiles et d'autres moins. À vous de faire le tri
selon vos besoins.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
