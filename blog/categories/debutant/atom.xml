<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-01T14:41:01+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3/"/>
    <updated>2013-09-29T12:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui c'est dimanche, l'article sera court, on voit deux méthodes
utiles pour le débugage ou pour les fichiers
de log: <code>__method__</code> et <code>__dir__</code>.</p>

<!-- more -->


<h2><code>__method__</code></h2>

<p><code>__method__</code> renvoit le nom de la méthode courante comme un type Symbol:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def foo
<strong>method</strong>
end
nil
foo
:foo
```</p></blockquote></blockquote>

<p>Et si vous avez besoin de récupérer une chaîne de caractère:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def bar
<strong>method</strong>.to_s
end
nil
bar
&ldquo;bar&rdquo;
```</p></blockquote></blockquote>

<h2><code>__dir__</code></h2>

<p>Comme son nom l'indique presque, cette méthode renvoit le nom (complet)
du répértoire du fichier dans lequel la méthode est appelée:</p>

<p>``` ruby ~/test/dir.rb
def this_dir
  <strong>dir</strong>
end</p>

<p>puts this_dir
```</p>

<pre><code>[~/test]⇒ rvm use 2.0.0
Using /home/xavier/.rvm/gems/ruby-2.0.0-p247
[~/test]⇒ ruby dir.rb 
/home/xavier/test
</code></pre>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/28/ruby-les-methodes-du-module-kernel-2/"/>
    <updated>2013-09-28T13:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/28/ruby-les-methodes-du-module-kernel-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>On continue l'exploration du module Kernel avec quatre
autres méthodes de conversions, pour les nombres:</p>

<ul>
<li>Complex</li>
<li>Float</li>
<li>Integer</li>
<li>Rational</li>
</ul>


<!-- more -->


<p>Voyons d'abord <code>Integer</code>. On peut lui passer une chaîne de caractère:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Integer(&ldquo;123&rdquo;)
123
```</p></blockquote></blockquote>

<p>Ça fonctionne avec les préfixes. En octal, hexadécimal et binaire:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Integer(&ldquo;0123&rdquo;)
83
Integer(&ldquo;0x123&rdquo;)
291
Integer(&ldquo;0b111&rdquo;)
7
```</p></blockquote></blockquote>

<p>On peut aussi spécifier la base:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Integer(&ldquo;0123&rdquo;, 10)
123
```</p></blockquote></blockquote>

<p>On peut aussi passer en argument un objet répondant à <code>to_int</code> ou <code>to_i</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>class Foo
  def to_i</p>

<pre><code>123
</code></pre>

<p>  end
end
nil
Integer(Foo.new)
123
```</p></blockquote></blockquote>

<p>Passons maintenant à <code>Float(arg)</code> qui convertit un argument en type <code>Float</code>.
Soit l'argument est de type <code>Numeric</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Float(123)
123.0
Float(Rational(&ldquo;&frac12;&rdquo;))
0.5
```</p></blockquote></blockquote>

<p>Soit la méthode fait appel à <code>to_f</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>class Foo
  def to_f</p>

<pre><code>1.23
</code></pre>

<p>  end
end
nil
Float(Foo.new)
1.23
```</p></blockquote></blockquote>

<p>Au tour de la méthode <code>Rational</code> qui convertit son (ses) argument(s) en un
nombre rationnel (de classe <code>Rational</code>), autrement dit une fraction:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Rational(&ldquo;1/3&rdquo;)
1/3
Rational(1, 3)
1/3
x = Rational(&ldquo;1/3&rdquo;)
1/3
x + x
2/3
```</p></blockquote></blockquote>

<p>Reste la méthode <code>Complex</code>, qui convertit son (ses) argument(s) en un nombre
complexe. Je la signale pour être exhaustif, mais les nombres complexes
dépassent largement mes compétences en mathématique.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel/"/>
    <updated>2013-09-21T13:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Les méthodes définies dans le module Kernel de Ruby sont <em>à priori</em> des
méthodes très importantes. En effet le module Kernel est inclus d'office
dans la classe Object, et donc, ses méthodes sont toujours disponibles.
Elles s'utilisent directement sous la forme <code>method_name</code> et non pas
<code>object_name.method_name</code>. C'est cette différence de traitement qui
me donne à penser qu'elles sont importantes. Dans cette série d'articles,
je me propose de passer en revue chacune des méthodes du module Kernel
de Ruby version 2.0.</p>

<!-- more -->


<p>Aujourd'hui on voit les méthodes suivantes:</p>

<ul>
<li>Array(<em>arg</em>)</li>
<li>Hash(<em>arg</em>)</li>
<li>String(<em>arg</em>)</li>
</ul>


<p>Ce sont toutes les trois des méthodes de conversions. Elles transforment
respectivement l'argument en un type Array, Hash ou String. Pour effectuer
cette conversion elles utilisent la méthode <code>to_*</code> sur l'argument. Par
exemple <code>String(self)</code> utilise <code>self.to_s</code>:</p>

<p>``` irb
[~]⇒ irb</p>

<blockquote><blockquote><p>String(self)
&ldquo;main&rdquo;
self.to_s
&ldquo;main
```</p></blockquote></blockquote>

<p>La particularité de ces méthodes est que leur nom débutent par une majuscule,
ce qui va à l'encontre des conventions en Ruby et les fait ressembler un
peu comme à un constructeur en Java et consorts. D'un autre coté, le langage
n'empêche pas de nommer les méthodes ainsi:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def Foo(arg)
  puts arg
end
nil
Foo(&ldquo;hello&rdquo;)
hello
nil
```</p></blockquote></blockquote>

<p>J'imagine que si ces méthodes débutent par une majuscule, c'est pour
permettre aux développeurs d'utiliser <code>array</code>, <code>hash</code> et <code>string</code> comme
nom de variable. Par contre je n'arrive pas à trouver une utilité à
ces méthodes… Je veux dire pourquoi utiliser <code>String(arg)</code> plutôt que
<code>arg.to_s</code> ?</p>

<p>Si toi, Lecteur, tu as une réponse, n'hésite pas à laisser un commentaire ;&ndash;)</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: la commande point et le clavier Azerty]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty/"/>
    <updated>2013-09-14T09:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Tout Vimiste sait à quoi sert le <code>.</code>, cette commande répète le dernier
changement. Si vous venez de saisir <code>dap</code> pour supprimer un paragraphe,
il suffit de tapez <code>.</code> pour en supprimer un second. Très utile, c'est
ce que nous dit toute la littérature sur Vim. Y'aurait pas comme un petit
malaise quand même ?</p>

<!-- more -->


<p>Quand j'ai débuté sur Vim, je lisais ça partout: «Le <code>.</code> c'est génial» ou
encore «Préparez vous à utiliser <code>.</code> tout le temps», etc. Après un mois
à utiliser Vim, j'avais du utiliser cette commande 3 fois maximum… Je
sentais bien qu'il y avait un souci quelque part, mais pris dans
l'apprentissage de Vim je ne mettais pas le doigt dessus. J'ai presque fini par
l'oublier, ce <code>.</code>.</p>

<p>Et puis un jour, j'ai changé de clavier pour un Bépo. Et comme par magie je
me suis mis à utiliser le <code>.</code> tout le temps, sans même m'en rendre compte.</p>

<p>Voici un clavier Bépo et un clavier Qwerty:</p>

<p><img src="/images/clavier-bepo.png"></p>

<p><img src="/images/clavier-qwerty.png"></p>

<p>Sur Bépo et Qwerty, le point est une touche en accès direct. Au contraire
de l'Azerty où il faut combiner avec la touche Majuscule pour l'atteindre:</p>

<p><img src="/images/clavier-azerty.png"></p>

<p>Du coup je me demande si ça ne vaudrait pas le coup d'échanger le <code>.</code> et
le <code>;</code> pour les Vimistes qui utilisent un clavier Azerty. Je suis curieux
de savoir ce que vous en pensez. Avez vous déjà tenté cette manip et la
conseilleriez vous ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le système de fenêtrage de Vim]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim/"/>
    <updated>2013-09-07T09:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/07/le-systeme-de-fenetrage-de-vim</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je vous présente les combinaisons de touches que j'utilise
au quotidien pour travailler avec les fenêtres dans Vim.</p>

<!-- more -->


<p>Avant d'entrer dans le vif du sujet, je dois vous prévenir que
pour ouvrir un fichier dans une nouvelle fenêtre (ou dans un nouvel onglet)
j'utilise le plugin Ctrlp. Il n'y aura donc pas de commandes relatives
à l'ouverture d'un nouveau fichier.</p>

<h2>La base</h2>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
horizontale:</p>

<p><code>vim
:sp
</code></p>

<p><code>sp</code> est l'abréviation de <code>split</code>.</p>

<p>Pour ouvrir une copie de la fenêtre active dans une nouvelle fenêtre
verticale:</p>

<p><code>vim
:vs
</code></p>

<p><code>vs</code> est l'abréviation de <code>vsplit</code>.</p>

<h2>Un peu de mappage</h2>

<p>Pour faciliter les manipulations de fenêtres, j'utilise <code>w</code> comme
un Ctrl+w. Ctrl+w étant le préfixe de nombreuses commandes concernants
les fenêtres:</p>

<p><code>vim
noremap w &lt;C-w&gt;
noremap W &lt;C-w&gt;&lt;C-w&gt;
</code></p>

<p>En mode normal, les touches fléchées me servent à changer de fenêtre.</p>

<p><code>vim
nnoremap &lt;up&gt; &lt;C-w&gt;&lt;up&gt;
nnoremap &lt;down&gt; &lt;C-w&gt;&lt;down&gt;
nnoremap &lt;left&gt; &lt;C-w&gt;&lt;left&gt;
nnoremap &lt;right&gt; &lt;C-w&gt;&lt;right&gt;
</code></p>

<h2>Bouger et fermer</h2>

<p>Pour changer de fenêtre en cycle:</p>

<p><code>vim
ww
</code></p>

<p>Pour échanger deux fenêtres:</p>

<p><code>vim
wx
</code></p>

<p>Pour fermer la fenêtre active, deux solutions:</p>

<p><code>vim
:q
" ou bien
ZZ
</code></p>

<p>Pour fermer toutes les fenêtres sauf la courante:</p>

<p><code>vim
wo
</code></p>

<p>Pour basculer la fenêtre active dans un nouvel onglet:</p>

<p><code>vim
wT
</code></p>

<h2>Dimensions des fenêtres</h2>

<p>Pour un agencement de fenêtres un peu complexe, il est sûrement plus simple et
rapide d'utiliser la souris. Et oui, il arrive parfois (mais c'est rare, hein)
que le clavier ne soit pas le périphérique le mieux adapté.</p>

<p>Pour donner une taille identique à toutes les fenêtres:</p>

<p><code>vim
w=
</code></p>

<p>Pour redimensionner les fenêtres, j'utilise la touche <code>Control</code> combinée
avec les flèches:</p>

<p><code>vim
nnoremap &lt;C-up&gt; :resize +2&lt;cr&gt;
nnoremap &lt;C-down&gt; :resize -2&lt;cr&gt;
nnoremap &lt;C-right&gt; :vertical resize +2&lt;cr&gt;
nnoremap &lt;C-left&gt; :vertical resize -2&lt;cr&gt;
</code></p>

<p>Ainsi,
Ctrl + flèche vers le haut va augmenter la hauteur de la fenêtre active.
Ctrl + flèche vers le bas va diminuer la hauteur de la fenêtre active.
Ctrl + flèche vers la droite va augmenter la largeur de la fenêtre active.
Ctrl + flèche vers la gauche va diminuer la largeur de la fenêtre active.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
