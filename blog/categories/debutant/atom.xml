<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-29T09:05:23+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro six]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/29/bien-debuter-avec-vim-conseil-numero-six/"/>
    <updated>2013-07-29T08:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/29/bien-debuter-avec-vim-conseil-numero-six</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Ne mettez pas n'importe quoi dans votre .vimrc</h2>

<p>Le fichier <code>.vimrc</code> est LE fichier de configuration de Vim. C'est dans ce fichier
que vous personnaliserez votre Vim. C'est donc un fichier très important et on
peut être tenté d'utiliser celui de quelqu'un d'autre. Ne le faites surtout pas
!</p>

<!-- more -->


<p>Vim est un éditeur hautement configurable, paramétrable et personnalisable.
Je peux utiliser le Netbeans ou le Notepad++ de mon collègue mais
j'aurai du mal à utiliser son Vim, tellement il est différent du mien. C'est ce
qui fait la force de Vim, il fini par vous ressembler… À la fin du tutoriel
intégré, vous aurez un fichier <code>.vimrc</code> très suffisant pour commencer. Et vous
devriez suivre une règle simple :</p>

<p><blockquote><p>Ajoutez une ligne à votre .vimrc uniquement si vous comprenez cette ligne.</p></blockquote></p>

<p>Il y a bien sûr des exceptions. Par exemple, si votre clavier est loin
de la disposition <em>azerty</em> ou <em>qwerty</em> (comme moi qui suis en <em>bépo</em>) vous
serez bien
obligé de remapper un certain nombre de touches dès le début. Je vous conseille
aussi fortement de désactiver les touches fléchées. En effet leur usage est
tellement ancré dans nos têtes que vous les utiliserez sans vous en rendre
compte, ce qui ne pourrait que vous ralentir dans votre progression.
Pour cela, ajoutez les lignes suivantes dans votre <code>.vimrc</code> :</p>

<p><code>vim
" Les touches fléchées sont désactivées.
" Utile pour apprendre vim.
"
" En mode normal, vous pourrez les utiliser plus tard
" pour faire quelque chose d'utile.
nnoremap &lt;up&gt; &lt;nop&gt;
nnoremap &lt;down&gt; &lt;nop&gt;
nnoremap &lt;left&gt; &lt;nop&gt;
nnoremap &lt;right&gt; &lt;nop&gt;
" En mode insertion, vous pourrez enlever la
" désactivation dans quelques semaines.
inoremap &lt;up&gt; &lt;nop&gt;
inoremap &lt;down&gt; &lt;nop&gt;
inoremap &lt;left&gt; &lt;nop&gt;
inoremap &lt;right&gt; &lt;nop&gt;
</code></p>

<p>N'hésitez pas à consulter l'aide de vim pour bien comprendre ce que font ces
lignes de code <em>avant</em> de les ajouter dans votre <code>.vimrc</code> ;)</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern matching avec Elixir: une première approche]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche/"/>
    <updated>2013-07-28T13:32:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/28/pattern-matching-avec-elixir-une-premiere-approche</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Une tâche réccurente quand on utilise la récursivité pour résoudre un problème
est de séparer une liste en deux parties. La première partie étant le premier
élément de la liste et la seconde partie étant ce qui reste. Pour faire cela,
on peut utiliser le <em>pattern matching</em>, qu'on peut traduire par filtrage à
l'aide de motifs.</p>

<!-- more -->


<p>Voyons la syntaxe pour séparer une liste en deux:</p>

<p><code>elixir
[head | tail] = [1, 2, 3]
</code></p>

<p>Après ça, <code>head</code> (la tête) vaut 1 et <code>tail</code> (la queue) vaut [2, 3].
Maintenant les cas exceptionnels: Si on passe une liste d'un seul élément,
<code>tail</code> sera une liste vide ([]). Si on passe une liste vide, et bien c'est
une erreur. Voici une capture d'écran qui montre le résultat:</p>

<p><img src="/images/2013-07-28-1.jpg" width="890" height="577" title="pattern matching avec Elixir" ></p>

<p>Pour illustrer le <em>pattern matching</em> je vais écrire un module avec une fonction
<code>minimum</code> qui doit trouver le plus petit élément dans une liste de nombres
entiers.</p>

<p>``` elixir
defmodule Stats do
  def minimum([head|tail]) do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end</p>

<p>  defp minimum([], candidate) do</p>

<pre><code>candidate
</code></pre>

<p>  end</p>

<p>  defp minimum([head|tail], candidate) when head &lt; candidate do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end</p>

<p>  defp minimum([_|tail], candidate) do</p>

<pre><code>minimum tail, candidate
</code></pre>

<p>  end
end
```</p>

<p>On peut l'utiliser comme ceci:</p>

<p><code>elixir
IO.puts Stats.minimum([1, 2, -9, 3])
</code></p>

<p>Voici une explication des différentes fonctions:</p>

<p>``` elixir
  def minimum([head|tail]) do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end
```</p>

<p>Le <em>pattern matching</em> s'applique directement dans les arguments de la
fonction. Pour cette première passe, on considère que <code>head</code> est à priori
la plus petite valeur de la série.</p>

<p>``` elixir
  defp minimum([], candidate) do</p>

<pre><code>candidate
</code></pre>

<p>  end
```</p>

<p>Là, c'est la clause de sortie de la fonction <code>minimum</code>. Si la liste est
vide, c'est qu'on à trouvé la valeur minimum (<code>candidate</code>).</p>

<p>``` elixir
  defp minimum([head|tail], candidate) when head &lt; candidate do</p>

<pre><code>minimum tail, head
</code></pre>

<p>  end
```</p>

<p>Quand la liste est encore remplie, on compare la valeur de tête à notre
valeur candidate. Je rappelle que <code>candidate</code> est à ce moment la plus petite
valeur trouvée jusqu'ici. Si la valeur de <code>head</code> est plus petite que
la valeur de <code>candidate</code>, la première remplace la dernière.</p>

<p>``` elixir
  defp minimum([_|tail], candidate) do</p>

<pre><code>minimum tail, candidate
</code></pre>

<p>  end
```</p>

<p>Dans les autres cas, la valeur de tête n'a pas d'intérêt, ce que souligne
le caractère <code>_</code> dans <code>[_|tail]</code>. On remplace une variable par <code>_</code>
lorsque cette variable est inutilisée.</p>

<p>Nouveau venu en programmation fonctionnelle, je pense que je n'entrevois là
que la surface du <em>pattern matching</em>.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un plugin Octopress]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/"/>
    <updated>2013-07-27T12:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour mon blog Octopress, je voulais un repère visuel qui marque le niveau de
difficulté des articles. Un truc comme «Niveau : débutant» ou bien «Niveau :
confirmé» avec un peu de couleur. Rien de bien compliqué en fait. Si passer par
l'écriture d'un plugin pour obtenir ce genre d'effet n'est pas absolument
neccéssaire, ça rendra l'écriture des articles plus agréable et plus
rapide. Et puis je vais apprendre quelque chose de nouveau : comment écrire
un plugin pour Octopress ?</p>

<!-- more -->


<p>Tout d'abord, le site d'Octopress ne propose pas de documentation sur
l'écriture de plugins. Par contre, le wiki fournit
<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">une longue liste de plugins</a>
 dont les sources sont les bienvenues. Jekyll, le programme sur lequel est
construit Octopress, est assez spartiate en ce qui concerne
<a href="http://jekyllrb.com/docs/plugins/">l'écriture de plugin pour Jekyll</a>. Malgré
tout, ce lien peut s'avérer utile. J'ai trouvé que la meilleure source
d'information pour commencer est le contenu du dossier <code>plugin</code> de votre
blog Octopress.</p>

<p>Si vous voulez tout de suite jetez un coup d'oeil sur le
<a href="https://github.com/lkdjiin/octopress-level-tag/releases">code source du plugin</a>
terminé, vous pouvez le trouver sur Github, à la version 0.1.0.</p>

<p>Démarront avec le plugin le plus simple auquel je puisse penser. Créer un
fichier <code>plugins/level_tag.rb</code> et placez y le contenu suivant:</p>

<p>``` ruby plugins/level_tag.rb
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def render(context)
  "Niveau : facile"
end
</code></pre>

<p>  end
end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>Ensuite, dans un post, appelez le plugin de cette façon:</p>

<p><code>ruby
<div class='level-tag level-tag-'>Niveau : <span>unknown</span></div>
</code></p>

<p>Puis lancez Octopress:</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>Pointez votre navigateur sur <code>localhost:4000</code> et voilà. Un beau label
«Niveau : facile» apparait dans votre post. Voyons maintenant comment ça
marche.</p>

<p><code>ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag
</code></p>

<p>Un plugin pour Octopress est avant tout un plugin pour Jekyll.
Et Jekyll se sert du
<a href="http://rubydoc.info/gems/liquid">moteur de template Liquid</a>. Notre classe
<code>LevelTag</code> va donc hériter de <code>Liquid::Tag</code>, et être placée dans le
module Jekyll. La classe <code>Liquid::Tag</code> nous offre tout ce qu'il faut
pour générer du html, récupérer des arguments, etc.</p>

<p>``` ruby</p>

<pre><code>def render(context)
  "Niveau : facile"
end
</code></pre>

<p>```</p>

<p>La seule méthode de <code>Liquid::Tag</code> qu'il faut absolument implémenter est
<code>render</code>. C'est elle qui va produire le code html qui sera placé dans
notre article, à la place de l'appel du plugin.</p>

<p><code>ruby
Liquid::Template.register_tag('level', Jekyll::LevelTag)
</code></p>

<p>Finalement, il faut enregistrer notre plugin auprès de <code>Liquid::Template</code>.
Le premier argument passé à <code>register_tag</code> est le nom sous lequel nous
voulons appeler le plugin dans nos articles. Le second argument est la
classe de notre plugin.</p>

<p>Pour aller plus loin, il va falloir passer des arguments depuis l'appel du
plugin jusqu'à notre classe <code>LevelTag</code>. On change donc l'appel ainsi:</p>

<p><code>ruby
<div class='level-tag level-tag-facile'>Niveau : <span>unknown</span></div>
</code></p>

<p>Et on transforme le plugin de cette façon:</p>

<p>``` ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level
end

def render(context)
  "Niveau : #{@level}"
end
</code></pre>

<p>  end
end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>Voyons les changements en détails.</p>

<p>``` ruby</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level
end
</code></pre>

<p>```</p>

<p>La variable <code>level</code> va contenir l'argument passé lors de l'appel du
plugin (<code>facile</code>), donc <code>level == 'facile'</code>. On sauvegarde
cette valeur dans un membre pour pouvoir la réutiliser plus tard.</p>

<p>``` ruby</p>

<pre><code>def render(context)
  "Niveau : #{@level}"
end
</code></pre>

<p>```</p>

<p>Grâce à <code>@level</code> on a les moyens de faire sortir à <code>render</code> l'argument
passé lors de l'appel du plugin.</p>

<p>Comme certains voudront «Niveau : facile» et d'autres voudront
«Niveau : débutant», il va nous falloir un moyen de personnaliser tout ça.
C'est ce qu'on découvrira dans un prochain numéro.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro cinq]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/26/bien-debuter-avec-vim-conseil-numero-cinq/"/>
    <updated>2013-07-26T07:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/26/bien-debuter-avec-vim-conseil-numero-cinq</id>
    <content type="html"><![CDATA[<h2>Suivez le tutoriel intégré en prenant des notes</h2>

<p>La première chose à faire, quand vous décidez de passer sur vim,
c'est de suivre le tutoriel intégré de A à Z.
Ne vous contentez pas seulement de le lire, faites tout les exercices à fond.
Le tutoriel est progressif et très bien écrit.</p>

<!-- more -->


<p>Pour le lancer:</p>

<pre><code>vimtutor
</code></pre>

<p>En français:</p>

<pre><code>vimtutor fr
</code></pre>

<p>Vous voulez une version graphique (<a href="http://lkdjiin.github.io/blog/2013/07/19/bien-debuter-avec-vim-conseil-numero-quatre/">et vous auriez raison</a>):</p>

<pre><code>gvimtutor
</code></pre>

<p>Quelqu'un a écrit dans le tutoriel que celui-ci vous prendra 30 minutes. Soit
cette personne est un génie, soit nombre de leçons ont été ajoutées depuis.
Personnellement, j'ai souvenir d'y avoir passé une matinée complête, en faisant
consiencieusement chaque exercice et en prenant des notes à chaque étapes.</p>

<p>Je vous conseille vraiment de prendre des notes. J'ai trouvé que ça m'aidait
à apprendre plus rapidement de nouvelles commandes. Aujourd'hui encore, quand
j'installe un nouveau plugin, je note toutes les commandes que je trouve utiles
sur une feuille de papier. Cette feuille reste sur mon bureau le temps
qu'il faut pour que j'utilise ces commandes sans y penser.</p>

<p>Une fois le tutoriel fini, vous possédez les bases de vim … et une montagne
de notes qui vous seront utiles dans les semaines qui vont suivre.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: calculer la somme des n premiers entiers]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers/"/>
    <updated>2013-07-23T07:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/23/elixir-calculer-la-somme-des-n-premiers-entiers</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour illustrer la programmation récursive avec Elixir et montrer quelques
aspects sympathiques du langage, j'ai choisi un classique et très simple
problème mathématique: calculer la somme des n premiers entiers.
Par exemple:</p>

<pre><code>Somme des n premiers entiers si n vaut 5

5 + 4 + 3 + 2 + 1 = 15
</code></pre>

<p>Super simple. C'est comme la factorielle mais avec des additions. Pas de quoi
choper des boutons, même si on déteste les maths. C'est un bon problème pour
illustrer les fonctions récursives. En programmation procédurale on ferait
quelque chose dans ce genre là:</p>

<pre><code>somme = 0
for(i = n; i &gt; 0; i--) {
  somme += n
}
</code></pre>

<p>Ma première tentative avec Elixir donne le programme suivant:</p>

<!-- more -->


<p>``` elixir somme.exs version 1
defmodule Somme do</p>

<p>  def run(n, acc) do</p>

<pre><code>somme = n + acc
suivant = n - 1
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>IO.puts Somme.run(5, 0)
```</p>

<p>Vous le lancez comme ça:</p>

<pre><code>$ elixir somme.exs 
15
</code></pre>

<p><strong>Sachez dès maintenant que ce bout de code n'est pas dans l'esprit
Elixir.</strong>  J'ai cherché à décomposer toutes les étapes, pas à faire quelque chose
de beau, ou d'optimisé, ou de compact. Alors, que fais ce programme ?</p>

<p><code>elixir
def run(n, acc) do
</code></p>

<p>C'est la définition d'une méthode <code>run</code>. Le paramètre <code>acc</code> est le diminutif de
accumulator. Avoir un accumulateur est un truc très utilisé dans ce type de
fonction. On enregistre le résultat provisioire dans cet accumulateur, qui
est propagé tout au long de la pile d'appels.</p>

<p><code>elixir
somme = n + acc
suivant = n - 1
</code></p>

<p>Ici je calcule deux résultats temporaires. Dans <code>somme</code> je place la somme du
nombre n actuel et de l'accumulateur. Quant à <code>suivant</code>, il contient la
prochaine valeur du nombre n.</p>

<p><code>elixir
if suivant == 0 do
  somme
else
  run(suivant, somme)
end
</code></p>

<p>Dans une fonction récursive il faut évidemment un appel à cette même fonction.
Mais surtout il faut une
condition de sortie. Sans ce garde-fou, c'est la boucle infinie à tout les
coups. Ici la condition de sortie est <code>suivant == 0</code>. Quand le prochain nombre
à traiter atteint zéro, c'est le signe que la fonction a terminé son travail donc
je renvois le résultat actuel, qui est la somme de tous les nombres traités
jusqu'ici. Dans l'autre cas, c'est l'appel récursif: <code>run(suivant, somme)</code>.</p>

<p>Si vous avez du mal à comprendre la logique de ce programme, vous pouvez
ajouter un traçage:</p>

<p>``` elixir
defmodule Somme do
  def run(n, acc) do</p>

<pre><code>IO.puts "n: #{n} --- acc: #{acc}"
# ...
</code></pre>

<p>```</p>

<p>Ce qui donnera le résultat suivant:</p>

<pre><code>$ elixir somme.exs 
n: 5 --- acc: 0
n: 4 --- acc: 5
n: 3 --- acc: 9
n: 2 --- acc: 12
n: 1 --- acc: 14
15
</code></pre>

<p>La prochaine fois je transformerais ce programme afin qu'il soit dans
l'esprit Elixir.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
