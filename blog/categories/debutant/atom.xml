<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : débutant | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/debutant/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-03T10:59:31+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: un exemple de valeur par défaut pour un Hash]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash/"/>
    <updated>2013-10-03T10:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J'oublie régulièrement qu'un Hash peut renvoyer une valeur par défaut.
Du coup, je me retrouve souvent avec un code inutilement lourd.
Aujourd'hui je montre un exemple d'initialisation d'un Hash avec une
valeur par défaut et pourquoi c'est intéressant.</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">l'article d'hier</a>
(sur les algorithmes génétiques) je donnais un script de trois lignes sans
fournir d'explications, les voici.</p>

<h2>L'objectif</h2>

<p>J'ai un fichier (&ldquo;mots.txt&rdquo;) contenant un certain nombre de mots pouvant
apparaitre plusieurs fois:</p>

<pre><code>casserole
casserole
assiette
fourchette
casserole
fourchette
verre
...
</code></pre>

<p>Je veux connaitre le nombre d'occurence de chaque mot et produire une sortie
de ce genre:</p>

<pre><code>187 =&gt; casserole
 13 =&gt; assiette
  2 =&gt; fourchette
  1 =&gt; verre
</code></pre>

<h2>La classe Hash expliquée en 30 secondes</h2>

<p><em>Si vous savez déjà ce qu'est un hash, passez directement à la section
suivante.</em></p>

<p>Un <em>hash</em> peut contenir un nombre indeterminé de paires d'objets ; ces paires
étants organisées en clé/valeur. Ça marche comme un dictionnaire. Dans
d'autres langages, vous les connaissez peut-être sous le nom de dict, map,
tableau associatif, hashtable, etc. En Ruby, on peut créer un hash vide de
deux façons:</p>

<p><code>ruby
hash = {}
autre_hash = Hash.new
</code></p>

<p>On peut créer et remplir un hash en même temps:</p>

<p><code>ruby
hash = { "clef1" =&gt; 123, "clef2" =&gt; 456 }
</code></p>

<p>Pour connaitre la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<p><code>ruby
hash["clef1"]
</code></p>

<p>Pour modifier la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<p><code>ruby
hash["clef1"] = 0
</code></p>

<p>Pour ajouter une paire clé/valeur:</p>

<p><code>ruby
hash["nouvelle clef"] = 123546789
</code></p>

<p>Notez que les clés et leurs valeurs peuvent être de n'importe quel type.
On n'est pas limité à des chaînes de caractères et des nombres.</p>

<h2>Première version</h2>

<p>Mon premier jet a donné ceci:</p>

<p>``` ruby</p>

<h1>Version 1</h1>

<p>hash = Hash.new</p>

<p>File.open(&ldquo;mots.txt&rdquo;, &ldquo;r&rdquo;).each_line do |line|
  if hash.key?(line)</p>

<pre><code>hash[line] = hash[line] + 1
</code></pre>

<p>  else</p>

<pre><code>hash[line] = 1
</code></pre>

<p>  end
end</p>

<p>hash.each {|key, value| puts &ldquo;#{&rdquo;%3d" % value} => #{key}&ldquo; }
```</p>

<p>La première ligne crée un hash vide tandis que la dernière affiche
le contenu du hash, formaté comme je le veux. Au milieu, on itère sur
les lignes du fichier texte (les mots) pour remplir le hash,
c'est ça qui m'intéresse:</p>

<p>``` ruby
  if hash.key?(line)</p>

<pre><code>hash[line] = hash[line] + 1
</code></pre>

<p>  else</p>

<pre><code>hash[line] = 1
</code></pre>

<p>  end
```</p>

<p>C'est une construction classique à base de if/else. Si le hash possède
une clé identique à la ligne en cours (<code>if hash.key?(line)</code>) alors on
incrémente sa valeur associée. Sinon on crée cette clé, associée à la
valeur 1 puisque c'est la première fois qu'on rencontre ce mot
(<code>hash[line] = 1</code>).</p>

<h2>Deuxième version</h2>

<p>Ruby possède un opérateur ternaire (<em>ternary operator</em>) qui peut remplacer
un if/else simple comme le notre:</p>

<pre><code>condition ? oui : non
</code></pre>

<p>Si <code>condition</code> est vérifiée, on execute <code>oui</code>, sinon on execute <code>non</code>.
Dans notre cas on peut donc écrire:</p>

<p><code>ruby
File.open("mots.txt", "r").each_line do |line|
  hash[line] = hash.key?(line) ? hash[line] + 1 : 1
end
</code></p>

<p>Certains adorent ce genre de construction, d'autres détestent. <em>À priori</em> je
n'ai rien contre, mais il faut avouer que dans ce cas précis c'est tout
simplement illisible.</p>

<h2>Troisième version</h2>

<p>Ruby possède un opérateur sympa qu'on peut parfois utiliser quand on veut
initialiser une variable si elle n'existe pas où la modifier si elle
existe: <code>||=</code>. Il faut savoir qu'un hash renvoie la valeur <code>nil</code> quand on
lui fournit une clé inexistante:</p>

<p><code>ruby
File.open("result.txt", "r").each_line do |line|
  hash[line] ||= 0
  hash[line] += 1
end
</code></p>

<p><code>hash[line] ||= 0</code> va créer la clé et lui donner la valeur 0 si cette clé
n'existe pas, sinon la clé se voit affecter sa valeur. Ensuite la valeur de
la clé est incrémentée avec <code>hash[line] += 1</code>. Je trouve cela plus lisible
que la version avec l'opérateur ternaire, mais moins lisible que la version
avec le if/else, car cela fait appel à un «truc».</p>

<h2>Quatrième et dernière version</h2>

<p>Voici la <em>bonne</em> version (selon moi bien entendu). Il faut modifier
légerement la création du hash:</p>

<p><code>ruby
hash = Hash.new(0)
File.open("result.txt", "r").each_line do |line|
  hash[line] += 1
end
</code></p>

<p>Quand vous créer un hash, vous pouvez lui dire: «Je veux que tu renvois
telle valeur quand on te donne une clé inexistante». Dans notre cas, les
clés inexistantes renverront toujours zéro. Le tour est joué: une simple
incrémentation suffit maintenant, qu'une clé existe déjà ou non.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3/"/>
    <updated>2013-09-29T12:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui c'est dimanche, l'article sera court, on voit deux méthodes
utiles pour le débugage ou pour les fichiers
de log: <code>__method__</code> et <code>__dir__</code>.</p>

<!-- more -->


<h2><code>__method__</code></h2>

<p><code>__method__</code> renvoit le nom de la méthode courante comme un type Symbol:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def foo
<strong>method</strong>
end
nil
foo
:foo
```</p></blockquote></blockquote>

<p>Et si vous avez besoin de récupérer une chaîne de caractère:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def bar
<strong>method</strong>.to_s
end
nil
bar
&ldquo;bar&rdquo;
```</p></blockquote></blockquote>

<h2><code>__dir__</code></h2>

<p>Comme son nom l'indique presque, cette méthode renvoit le nom (complet)
du répértoire du fichier dans lequel la méthode est appelée:</p>

<p>``` ruby ~/test/dir.rb
def this_dir
  <strong>dir</strong>
end</p>

<p>puts this_dir
```</p>

<pre><code>[~/test]⇒ rvm use 2.0.0
Using /home/xavier/.rvm/gems/ruby-2.0.0-p247
[~/test]⇒ ruby dir.rb 
/home/xavier/test
</code></pre>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/28/ruby-les-methodes-du-module-kernel-2/"/>
    <updated>2013-09-28T13:59:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/28/ruby-les-methodes-du-module-kernel-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>On continue l'exploration du module Kernel avec quatre
autres méthodes de conversions, pour les nombres:</p>

<ul>
<li>Complex</li>
<li>Float</li>
<li>Integer</li>
<li>Rational</li>
</ul>


<!-- more -->


<p>Voyons d'abord <code>Integer</code>. On peut lui passer une chaîne de caractère:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Integer(&ldquo;123&rdquo;)
123
```</p></blockquote></blockquote>

<p>Ça fonctionne avec les préfixes. En octal, hexadécimal et binaire:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Integer(&ldquo;0123&rdquo;)
83
Integer(&ldquo;0x123&rdquo;)
291
Integer(&ldquo;0b111&rdquo;)
7
```</p></blockquote></blockquote>

<p>On peut aussi spécifier la base:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Integer(&ldquo;0123&rdquo;, 10)
123
```</p></blockquote></blockquote>

<p>On peut aussi passer en argument un objet répondant à <code>to_int</code> ou <code>to_i</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>class Foo
  def to_i</p>

<pre><code>123
</code></pre>

<p>  end
end
nil
Integer(Foo.new)
123
```</p></blockquote></blockquote>

<p>Passons maintenant à <code>Float(arg)</code> qui convertit un argument en type <code>Float</code>.
Soit l'argument est de type <code>Numeric</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Float(123)
123.0
Float(Rational(&ldquo;&frac12;&rdquo;))
0.5
```</p></blockquote></blockquote>

<p>Soit la méthode fait appel à <code>to_f</code>:</p>

<p>``` irb</p>

<blockquote><blockquote><p>class Foo
  def to_f</p>

<pre><code>1.23
</code></pre>

<p>  end
end
nil
Float(Foo.new)
1.23
```</p></blockquote></blockquote>

<p>Au tour de la méthode <code>Rational</code> qui convertit son (ses) argument(s) en un
nombre rationnel (de classe <code>Rational</code>), autrement dit une fraction:</p>

<p>``` irb</p>

<blockquote><blockquote><p>Rational(&ldquo;1/3&rdquo;)
1/3
Rational(1, 3)
1/3
x = Rational(&ldquo;1/3&rdquo;)
1/3
x + x
2/3
```</p></blockquote></blockquote>

<p>Reste la méthode <code>Complex</code>, qui convertit son (ses) argument(s) en un nombre
complexe. Je la signale pour être exhaustif, mais les nombres complexes
dépassent largement mes compétences en mathématique.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel/"/>
    <updated>2013-09-21T13:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/21/ruby-les-methodes-du-module-kernel</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Les méthodes définies dans le module Kernel de Ruby sont <em>à priori</em> des
méthodes très importantes. En effet le module Kernel est inclus d'office
dans la classe Object, et donc, ses méthodes sont toujours disponibles.
Elles s'utilisent directement sous la forme <code>method_name</code> et non pas
<code>object_name.method_name</code>. C'est cette différence de traitement qui
me donne à penser qu'elles sont importantes. Dans cette série d'articles,
je me propose de passer en revue chacune des méthodes du module Kernel
de Ruby version 2.0.</p>

<!-- more -->


<p>Aujourd'hui on voit les méthodes suivantes:</p>

<ul>
<li>Array(<em>arg</em>)</li>
<li>Hash(<em>arg</em>)</li>
<li>String(<em>arg</em>)</li>
</ul>


<p>Ce sont toutes les trois des méthodes de conversions. Elles transforment
respectivement l'argument en un type Array, Hash ou String. Pour effectuer
cette conversion elles utilisent la méthode <code>to_*</code> sur l'argument. Par
exemple <code>String(self)</code> utilise <code>self.to_s</code>:</p>

<p>``` irb
[~]⇒ irb</p>

<blockquote><blockquote><p>String(self)
&ldquo;main&rdquo;
self.to_s
&ldquo;main
```</p></blockquote></blockquote>

<p>La particularité de ces méthodes est que leur nom débutent par une majuscule,
ce qui va à l'encontre des conventions en Ruby et les fait ressembler un
peu comme à un constructeur en Java et consorts. D'un autre coté, le langage
n'empêche pas de nommer les méthodes ainsi:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def Foo(arg)
  puts arg
end
nil
Foo(&ldquo;hello&rdquo;)
hello
nil
```</p></blockquote></blockquote>

<p>J'imagine que si ces méthodes débutent par une majuscule, c'est pour
permettre aux développeurs d'utiliser <code>array</code>, <code>hash</code> et <code>string</code> comme
nom de variable. Par contre je n'arrive pas à trouver une utilité à
ces méthodes… Je veux dire pourquoi utiliser <code>String(arg)</code> plutôt que
<code>arg.to_s</code> ?</p>

<p>Si toi, Lecteur, tu as une réponse, n'hésite pas à laisser un commentaire ;&ndash;)</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim: la commande point et le clavier Azerty]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty/"/>
    <updated>2013-09-14T09:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/14/vim-la-commande-point-et-le-clavier-azerty</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Tout Vimiste sait à quoi sert le <code>.</code>, cette commande répète le dernier
changement. Si vous venez de saisir <code>dap</code> pour supprimer un paragraphe,
il suffit de tapez <code>.</code> pour en supprimer un second. Très utile, c'est
ce que nous dit toute la littérature sur Vim. Y'aurait pas comme un petit
malaise quand même ?</p>

<!-- more -->


<p>Quand j'ai débuté sur Vim, je lisais ça partout: «Le <code>.</code> c'est génial» ou
encore «Préparez vous à utiliser <code>.</code> tout le temps», etc. Après un mois
à utiliser Vim, j'avais du utiliser cette commande 3 fois maximum… Je
sentais bien qu'il y avait un souci quelque part, mais pris dans
l'apprentissage de Vim je ne mettais pas le doigt dessus. J'ai presque fini par
l'oublier, ce <code>.</code>.</p>

<p>Et puis un jour, j'ai changé de clavier pour un Bépo. Et comme par magie je
me suis mis à utiliser le <code>.</code> tout le temps, sans même m'en rendre compte.</p>

<p>Voici un clavier Bépo et un clavier Qwerty:</p>

<p><img src="/images/clavier-bepo.png"></p>

<p><img src="/images/clavier-qwerty.png"></p>

<p>Sur Bépo et Qwerty, le point est une touche en accès direct. Au contraire
de l'Azerty où il faut combiner avec la touche Majuscule pour l'atteindre:</p>

<p><img src="/images/clavier-azerty.png"></p>

<p>Du coup je me demande si ça ne vaudrait pas le coup d'échanger le <code>.</code> et
le <code>;</code> pour les Vimistes qui utilisent un clavier Azerty. Je suis curieux
de savoir ce que vous en pensez. Avez vous déjà tenté cette manip et la
conseilleriez vous ?</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
