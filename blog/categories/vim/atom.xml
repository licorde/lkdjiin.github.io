<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : vim | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-28T09:57:56+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: Recherche de texte]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte/"/>
    <updated>2013-08-27T10:14:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/27/bien-debuter-avec-vim-recherche-de-texte</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui je montre comment rechercher une chaîne de caractères dans un
fichier avec Vim: les commandes, les options et un petit truc en plus…</p>

<!-- more -->


<h2>Les commandes utiles</h2>

<p>Pour rechercher un texte dans le fichier, on utilise la commande <code>/</code> suivie
du texte à rechercher et de la touche entrée. Ainsi:</p>

<pre><code>/texte
</code></pre>

<p>va chercher toutes les occurences de «texte» dans le fichier.</p>

<p>Pour se déplacer parmi les occurences trouvées, on utilise <code>n</code> et <code>N</code>. <code>n</code>
va à l'occurence suivante tandis que <code>N</code> va à l'occurence précédente.</p>

<p>Attention, la commande de recherche <code>/</code> ne tient pas compte des <em>mots</em>.
Je m'explique: <code>/xxx</code> va trouver les 4 expressions suivantes.</p>

<ol>
<li>xxx</li>
<li>aaaxxx</li>
<li>xxxbbb</li>
<li>aaaxxxbbb</li>
</ol>


<p>Parfois c'est ce que l'on veut, parfois non. Pour modifier ce comportement
on utilise <code>\&lt;</code> et <code>\&gt;</code>, respectivement pour signifier le début et la fin
d'un mot. Ainsi <code>\&lt;xxx\&gt;</code> ne trouvera que l'expression n° 1. <code>\&lt;xxx</code> trouvera
la n° 1 et la n° 3. Quand à <code>/xxx\&gt;</code>, elle trouvera la n° 1 et la n° 2.</p>

<h2>Les options</h2>

<p>Voici quelques options à utiliser dans votre fichier .vimrc.</p>

<p><code>vim
set incsearch
</code></p>

<p>La recherche sera mise en évidence au fur et à mesure de la frappe clavier,
et non pas seulement après la touche entrée. <code>incsearch</code> signifie
<em>incremental search</em>.</p>

<p><code>vim
set ignorecase smartcase
</code></p>

<p>Ces deux options marchent souvent de pair. <code>ignorecase</code> permet d'ignorer la
différence minuscule/majuscule, ainsi <code>/texte</code> trouvera «texte», «TEXTE» et
«Texte». <code>smartcase</code> repassera en mode différenciation des
minuscules/majuscules si vous saisissez une majuscule, ainsi <code>/Texte</code> trouvera
«Texte» mais pas «TEXTE» ni «texte».</p>

<p><code>vim
set hlsearch
</code></p>

<p>Cette option sert à mettre en évidence la recherche, autrement dit à la
surligner.</p>

<h2>Supprimer la mise en évidence du texte après une recherche</h2>

<p>Une fois que vous avez fait ce que vous aviez à faire avec votre recherche,
celle-ci reste surlignée, ce qui devient vite très agaçant (pour rester poli).
Pour effacer le surlignage, on utilise la commande <code>nohlsearch</code>:</p>

<p><code>vim
:nohlsearch
</code></p>

<p>On aura évidemment intérêt à mapper cette commande, par exemple sur
<code>&lt;Leader&gt;h</code>:</p>

<p><code>vim
nnoremap &lt;Leader&gt;h :nohlsearch&lt;CR&gt;
</code></p>

<p>Personnellement, je n'ai pas de mappage pour cette commande: je ne m'en
sert tout simplement pas. Pour supprimer la mise en évidence de la
dernière recherche je tape juste <code>/xx</code>. Vous pouvez utiliser <code>/yy</code> ou <code>/ww</code>
ou tout ce qui tombe bien sous vos doigts. Le principe est de rechercher
une chaîne qui n'existe pas, ce qui a pour effet d'effacer la dernière
mise en évidence.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: la touche Escape]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape/"/>
    <updated>2013-08-15T10:45:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/15/bien-debuter-avec-vim-la-touche-escape</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Vim a été développé sur des machines dont les claviers avaient une
disposition des touches autres que celle de nos claviers modernes. Comme par
exemple le terminal ADM-3A:</p>

<p><img src="/images/KB_Terminal_ADM3A.png"></p>

<!-- more -->


<p>Le plus frappant c'est l'endroit de la touche <em>Escape</em> à l'époque. On pouvait
y accéder avec une simple extension du petit doigt gauche, sans avoir à
bouger la main. De nos jours, cette touche a été reléguée aux confins de
l'univers. Sachant que c'est une touche qu'on utilise sans cesse, y a de
quoi choper une tendinite. Je vais vous donner 3 trucs pour remédier à ce
problème, choisissez celui qui vous conviendra le mieux.</p>

<h2>Control c</h2>

<p>C'est le truc le plus simple, rien à configurer. La combinaison <code>&lt;Ctrl-c&gt;</code>
fonctionne naturellement comme une touche <em>Escape</em>. Il y a bien
quelques différences, et vous vous en rendrez compte à l'occasion, mais
la plupart du temps ça fonctionne. Commencez donc par là avant de vous
attaquer à d'autres trucs, celui-ci est peut être amplement suffisant.</p>

<h2>Une combinaison personnalisée</h2>

<p>Il semble que <code>jj</code> soit une combinaison de remplacement populaire en
mode insertion:</p>

<p><code>vim
inoremap jj &lt;Esc&gt;
</code></p>

<p>L'idée c'est d'utiliser une combinaison de deux caractères qui n'existe
pas dans votre langue/langage, et qui bien sûr soit simple et rapide a
taper. J'ai essayé pendant un moment ce genre de chose, mais je n'ai
jamais réussi à m'y faire.</p>

<h2>Échanger caps lock et esc</h2>

<p>Si pour vous la touche <em>caps lock</em> (verrou majuscule) est un mystère, voici
le truc qu'il vous faut. Mettez donc votre système d'exploitation à
contribution pour:</p>

<ul>
<li>soit échanger la touche <em>caps lock</em> et <em>esc</em></li>
<li>soit faire de <em>caps lock</em> une touche <em>esc</em> supplémentaire</li>
</ul>


<p>Quelque soit votre OS, vous devriez trouver ça dans un menu du genre
Système > Préférences > Clavier.</p>

<h2>Pour conclure</h2>

<p>Vous trouverez plein d'autres trucs sur internet, n'hesitez pas à en
essayer plusieurs avant d'adopter celui qui vous ressemblera.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro neuf]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf/"/>
    <updated>2013-08-08T08:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/08/bien-debuter-avec-vim-conseil-numero-neuf</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Apprenez à frapper en aveugle</h2>

<p>Ce conseil devrait plutôt s'appeler:</p>

<p><blockquote><p>Avant d'apprendre Vim, apprenez d'abord à frapper en aveugle.</p></blockquote></p>

<p>Mais si vous lisez cet article, il est certainement trop tard, vous avez
déjà commencé Vim.</p>

<!-- more -->


<p>Si vous regardez vos doigts pendant que vous tapez, votre tête suit le
mouvement, et passe constamment d'une sorte de position clavier à une
position écran. D'où fatigue musculaire, occulaire et perte de temps.</p>

<p>Apprendre à frapper en aveugle est un sacré défi, comme apprendre Vim.
Ça ne s'acquiert pas en 2 jours. Il faut du temps.</p>

<p>Dans quelques mois, quand vous serez
assez à l'aise avec vim, installez un logiciel d'apprentissage de la
dactylographie (il y en a plein de libre) et apprenez à écrire sans regarder
votre clavier. Vous aurez alors accès à toute la puissance de Vim.</p>

<p>À demain.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro huit]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/05/bien-debuter-avec-vim-conseil-numero-huit/"/>
    <updated>2013-08-05T08:53:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/05/bien-debuter-avec-vim-conseil-numero-huit</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>N'utilisez pas (encore) de plugins</h2>

<p><em>Ce conseil là, personne ne va le suivre…</em></p>

<p>Très vite, au bout de quelques heures, au mieux quelques jours, vous allez
vouloir installer des plugins. La raison principale est
que vous voudrez vous sentir à l'aise avec Vim.
Et pour cela vous chercherez a reproduire (voir simuler) le
comportement de votre ex éditeur/EDI.
C'est normal, c'est humain, mais à mon avis c'est une erreur.</p>

<!-- more -->


<p>Un plugin est fait pour pallier un manque dans une application, pour l'étendre.
Or en tant que débutant, on n'est pas à même de savoir ce que Vim peut ou ne
peut pas faire pour nous. C'est pourquoi vous devriez attendre au moins un
mois avant d'installer votre
premier plugin. Pendant ce temps là, si quelque chose vous manque, cherchez le
dans l'aide de vim ou avec google. La plupart du temps vous finirez par trouver
une façon de faire <em>à la vim</em>.</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<pre><code>^&lt;C-v&gt;}I#&lt;Esc&gt;
</code></pre>

<p>Et ça pour décommenter:</p>

<pre><code>^&lt;C-v&gt;}d&lt;Esc&gt;
</code></pre>

<p>Je vous accorde que ça n'est pas aussi agréable que d'utiliser un plugin,
mais ça marche. Et ça peut être utile quand on doit utiliser un Vim de base.</p>

<p>À demain.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bien débuter avec Vim: conseil numéro sept]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/31/bien-debuter-avec-vim-conseil-numero-sept/"/>
    <updated>2013-07-31T10:05:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/31/bien-debuter-avec-vim-conseil-numero-sept</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<h2>Lisez et utilisez la documentation</h2>

<p>La documentation de Vim est énorme. Elle comporte plusieurs
dizaines de chapitres répartis sur deux manuels: le manuel utilisateur
et le manuel de référence. On y accède avec la touche F1.
La documentation est complète et accessible pour tous les niveaux.
Dans l'idéal, vous devriez la lire entièrement…</p>

<!-- more -->


<p>Alors je ne suis pas naïf et
je sais bien que vous ne le ferez pas. Moi même je ne l'ai évidemment pas fait.
Je dis juste ce que devrait être l'idéal.</p>

<p>Pour rester réaliste, dans un premier
temps, parcourez la documentation entièrement mais en diagonale. Vite fait.
Simplement pour savoir où trouver quoi.
Donnez vous un objectif simple, comme un chapitre par jour.
N'apprenez rien par coeur. Prenez plutôt des notes
quand vous tombez sur un truc qui vous plait.
Parcourir un seul chapitre en diagonale tout en jetant quelques notes
sur une feuille de papier vous prendra entre 5 et 10 minutes.</p>

<p>Dans un second temps, essayez d'étudier à fond au moins les deux premières
parties du manuel utilisateur:
<em>Getting Started</em> et <em>Editing Effectively</em>.
Cette fois ci, il n'est plus question de lire en diagonale, mais bien
d'étudier la bête.</p>

<p>Lire, apprendre, comprendre et digérer la documentation de Vim vous prendra
beaucoup de temps. Certainement
des mois. Au minimum. C'est une bonne raison pour vous y mettre dès
aujourd'hui.</p>

<p>À demain.
</p>
]]></content>
  </entry>
  
</feed>
