<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-10-05T14:58:58+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gem Ruby: Tracez vos fonctions et données en 2D avec ctioga2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/05/gem-ruby-tracez-vos-fonctions-et-donnees-en-2d-avec-ctioga2/"/>
    <updated>2013-10-05T14:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/05/gem-ruby-tracez-vos-fonctions-et-donnees-en-2d-avec-ctioga2</id>
    <content type="html"><![CDATA[<p>Je cherchais un programme simple à prendre en main pour tracer des
ensembles de données depuis un fichier et des fonctions mathématiques
et je suis tombé sur la gem <a href="http://ctioga2.rubyforge.org/index.html">ctioga2</a>.</p>

<p><img src="/images/ctioga2.png"></p>

<p>Voici une introduction rapide à ce programme de traçage.</p>

<!-- more -->


<h2>Installation</h2>

<p>Il faut d'abord installer les outils nécessaires à la génération de document
pdf. Sur Linux c'est texlive, pour les autres OS voyez la
<a href="http://ctioga2.rubyforge.org/install.html">page d'installation</a> de ctioga2.
Ensuite on installe la gem comme d'habitude:</p>

<pre><code>gem install ctioga2
</code></pre>

<h2>Le fichier de données</h2>

<p>Un commentaire commence par un <code>#</code>. La première colonne est la coordonnée <code>x</code> et
la seconde colonne est la coordonnée <code>y</code>. Difficile de faire plus simple.
Un exemple:</p>

<pre><code># Fichier data.dat
# x y
0 -0.9
1 -0.4
2 -0.1
3 0.1
4 0.4
5 0.9
</code></pre>

<h2>Les scripts</h2>

<p>Voici un script minimal pour générer un fichier pdf:</p>

<pre><code># Fichier test.ct2
xpdf
plot data.dat
title 'Test'
</code></pre>

<p>Ce script va générer un fichier au format pdf à partir de notre fichier
de données, avec le titre <code>Test</code>. On le lance ainsi:</p>

<pre><code>ctioga2 -f test.ct2
</code></pre>

<p><strong>Note</strong> j'ai trouvé que seuls les caractères ascii fonctionnaient pour le
titre.</p>

<p>Si notre fichier de données possèdent plusieurs colonnes, on peut tracer
plusieurs courbes ainsi:</p>

<pre><code># Fichier test.ct2
xpdf
plot data.dat
plot data.dat@1:3
title 'Test'
</code></pre>

<p>Par défaut les <code>x</code> proviennent de la 1ère colonne et les <code>y</code> de la seconde.
La ligne <code>plot data.dat@1:3</code> trace une seconde courbe avec les <code>y</code> venant
de la 3ème colonne.</p>

<p>On peut aussi fournir des expressions Ruby:</p>

<pre><code>plot data2.dat@'$2:$3**2'
</code></pre>

<p>Ici la seconde colonne est utilisée pour les <code>x</code> et les <code>y</code> proviennent de
la troisième colonne, dont les données sont élevées à la puissance 2.</p>

<p>Plein d'autres choses sont possibles, comme produire du format png ou
svg, spécifier la portée des coordonnées x et y, utiliser le programme
en ligne de commande, etc.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 28]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28/"/>
    <updated>2013-10-04T18:43:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/04/les-algorithmes-genetiques-demystifies-28</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans le <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">dernier article</a> on a vu quelle forme concrete prenait un extremum
local dans nos algorithmes génétiques: les chromosomes tendent à devenir
identiques. On doit maintenant comprendre pourquoi on bloque sur un
extremum local dans ce problème particulier des 8 dames, alors qu'on avait
bien supprimé ce souci dans le <a href="http://lkdjiin.github.io/blog/2013/09/08/les-algorithmes-genetiques-demystifies-8-le-paradoxe-du-singe-savant/">paradoxe du singe savant</a>.</p>

<!-- more -->


<p>On reprend <a href="http://lkdjiin.github.io/blog/2013/09/18/les-algorithmes-genetiques-demystifies-17-oriente-objet/">le code</a> pour le paradoxe du singe savant et on modifie
la méthode <code>run</code> de la classe <code>GeneticAlgorithm</code> pour inspecter l'état des
chromosomes une fois la solution trouvée:</p>

<p>``` ruby
  def run</p>

<pre><code>@generations.times do |generation|
  Evaluator.new(@search_value, @population).evaluate
  best = @population.best
  # display(generation, best)
  # exit if best.score == @search_value.size
  if best.score == @search_value.size
    @population.each {|i| p i.chromosome}
    exit
  end
  next_generation
end
</code></pre>

<p>  end
```</p>

<p>En se servant du <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">petit script d'analyse</a> du dernier article, vous vous
apercevrez que pratiquement chaque chromosome est unique. Pourquoi cela
fonctionne ici et pas là ?</p>

<p>Lorsque, dans le paradoxe du singe savant, on mute une phrase, chaque
mutation a une chance réelle d'améliorer la phrase. Bien sûr, pour améliorer
la phrase, il faut que toutes les conditions soit réunies. Il faut
premièrement, que le gène qui mute soit un «mauvais» gène et deuxièmement,
que le remplaçant soit un «bon» gène. Par contre, quelque soit le gène
mutant, les autres gènes n'entrent pas en ligne de compte. Dans la phrase,
chaque gène est totalement indépendant des autres. Voici un exemple pour
clarifier mon propos. On cherche la phrase &ldquo;bonjour&rdquo; et on a pour l'instant
ceci:</p>

<pre><code>xxxxxxx
</code></pre>

<p>Cette phrase n'a que des mauvais gènes, son score est de zéro. Si on mute
le premier gène en &ldquo;b&rdquo;:</p>

<pre><code>bxxxxxx
</code></pre>

<p>La phrase s'est améliorée, son score a augmenté. Vous remarquez que quelque soit
les autres gènes, bons ou mauvais, le score augmente de toutes manières de 1.
C'est ce que j'appelle des <em>gènes indépendants</em>.</p>

<p>Dans le problème des 8 dames, c'est très différent. Il me manque malheureusement
les outils mathématiques et/ou statistiques pour conceptualiser tout ça mais
je vais néanmoins essayer d'expliquer. Lorsqu'on déplace une dame sur le
plateau, c'est à dire quand un gène mute, son déplacement à un effet
potentiel sur les autres dames, elle peut entrer en conflit avec une ou
plusieurs. Donc dans le problème des 8 dames les gènes sont dépendants les
uns des autres. On ne peut pas en muter un sans affecter <em>potentiellement</em>
les autres. Ça signifie qu'il doit y avoir certains chromosomes pour lequels
la mutation d'un seul gène, quel qu'il soit (ou même de plusieurs en
augmentant la taille de l'échiquier), ne peut pas améliorer ce chromosome.
Comme le taux de mutation doit être petit pour permettre
<a href="http://lkdjiin.github.io/blog/2013/10/01/les-algorithmes-genetiques-demystifies-exploration-vs-exploitation/">l'exploitation</a> des chromosomes, la probabilité qu'un chromosome voit
suffisament de ses gènes mutés comme il faut est infime, quasi-inexistante.</p>

<p>J'espère avoir été suffisament clair, n'hésitez pas à me demander des précisions
le cas échéant, je ferais de mon mieux pour y répondre. Je vous proposerais
une solution dans le prochain article.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: un exemple de valeur par défaut pour un Hash]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash/"/>
    <updated>2013-10-03T10:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>J'oublie régulièrement qu'un Hash peut renvoyer une valeur par défaut.
Du coup, je me retrouve souvent avec un code inutilement lourd.
Aujourd'hui je montre un exemple d'initialisation d'un Hash avec une
valeur par défaut et pourquoi c'est intéressant.</p>

<!-- more -->


<p>Dans <a href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/">l'article d'hier</a>
(sur les algorithmes génétiques) je donnais un script de trois lignes sans
fournir d'explications, les voici.</p>

<h2>L'objectif</h2>

<p>J'ai un fichier (&ldquo;mots.txt&rdquo;) contenant un certain nombre de mots pouvant
apparaitre plusieurs fois:</p>

<pre><code>casserole
casserole
assiette
fourchette
casserole
fourchette
verre
...
</code></pre>

<p>Je veux connaitre le nombre d'occurence de chaque mot et produire une sortie
de ce genre:</p>

<pre><code>187 =&gt; casserole
 13 =&gt; assiette
  2 =&gt; fourchette
  1 =&gt; verre
</code></pre>

<h2>La classe Hash expliquée en 30 secondes</h2>

<p><em>Si vous savez déjà ce qu'est un hash, passez directement à la section
suivante.</em></p>

<p>Un <em>hash</em> peut contenir un nombre indeterminé de paires d'objets ; ces paires
étants organisées en clé/valeur. Ça marche comme un dictionnaire. Dans
d'autres langages, vous les connaissez peut-être sous le nom de dict, map,
tableau associatif, hashtable, etc. En Ruby, on peut créer un hash vide de
deux façons:</p>

<p><code>ruby
hash = {}
autre_hash = Hash.new
</code></p>

<p>On peut créer et remplir un hash en même temps:</p>

<p><code>ruby
hash = { "clef1" =&gt; 123, "clef2" =&gt; 456 }
</code></p>

<p>Pour connaitre la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<p><code>ruby
hash["clef1"]
</code></p>

<p>Pour modifier la valeur associée à la clé &ldquo;clef1&rdquo;:</p>

<p><code>ruby
hash["clef1"] = 0
</code></p>

<p>Pour ajouter une paire clé/valeur:</p>

<p><code>ruby
hash["nouvelle clef"] = 123546789
</code></p>

<p>Notez que les clés et leurs valeurs peuvent être de n'importe quel type.
On n'est pas limité à des chaînes de caractères et des nombres.</p>

<h2>Première version</h2>

<p>Mon premier jet a donné ceci:</p>

<p>``` ruby</p>

<h1>Version 1</h1>

<p>hash = Hash.new</p>

<p>File.open(&ldquo;mots.txt&rdquo;, &ldquo;r&rdquo;).each_line do |line|
  if hash.key?(line)</p>

<pre><code>hash[line] = hash[line] + 1
</code></pre>

<p>  else</p>

<pre><code>hash[line] = 1
</code></pre>

<p>  end
end</p>

<p>hash.each {|key, value| puts &ldquo;#{&rdquo;%3d" % value} => #{key}&ldquo; }
```</p>

<p>La première ligne crée un hash vide tandis que la dernière affiche
le contenu du hash, formaté comme je le veux. Au milieu, on itère sur
les lignes du fichier texte (les mots) pour remplir le hash,
c'est ça qui m'intéresse:</p>

<p>``` ruby
  if hash.key?(line)</p>

<pre><code>hash[line] = hash[line] + 1
</code></pre>

<p>  else</p>

<pre><code>hash[line] = 1
</code></pre>

<p>  end
```</p>

<p>C'est une construction classique à base de if/else. Si le hash possède
une clé identique à la ligne en cours (<code>if hash.key?(line)</code>) alors on
incrémente sa valeur associée. Sinon on crée cette clé, associée à la
valeur 1 puisque c'est la première fois qu'on rencontre ce mot
(<code>hash[line] = 1</code>).</p>

<h2>Deuxième version</h2>

<p>Ruby possède un opérateur ternaire (<em>ternary operator</em>) qui peut remplacer
un if/else simple comme le notre:</p>

<pre><code>condition ? oui : non
</code></pre>

<p>Si <code>condition</code> est vérifiée, on execute <code>oui</code>, sinon on execute <code>non</code>.
Dans notre cas on peut donc écrire:</p>

<p><code>ruby
File.open("mots.txt", "r").each_line do |line|
  hash[line] = hash.key?(line) ? hash[line] + 1 : 1
end
</code></p>

<p>Certains adorent ce genre de construction, d'autres détestent. <em>À priori</em> je
n'ai rien contre, mais il faut avouer que dans ce cas précis c'est tout
simplement illisible.</p>

<h2>Troisième version</h2>

<p>Ruby possède un opérateur sympa qu'on peut parfois utiliser quand on veut
initialiser une variable si elle n'existe pas où la modifier si elle
existe: <code>||=</code>. Il faut savoir qu'un hash renvoie la valeur <code>nil</code> quand on
lui fournit une clé inexistante:</p>

<p><code>ruby
File.open("result.txt", "r").each_line do |line|
  hash[line] ||= 0
  hash[line] += 1
end
</code></p>

<p><code>hash[line] ||= 0</code> va créer la clé et lui donner la valeur 0 si cette clé
n'existe pas, sinon la clé se voit affecter sa valeur. Ensuite la valeur de
la clé est incrémentée avec <code>hash[line] += 1</code>. Je trouve cela plus lisible
que la version avec l'opérateur ternaire, mais moins lisible que la version
avec le if/else, car cela fait appel à un «truc».</p>

<h2>Quatrième et dernière version</h2>

<p>Voici la <em>bonne</em> version (selon moi bien entendu). Il faut modifier
légerement la création du hash:</p>

<p><code>ruby
hash = Hash.new(0)
File.open("result.txt", "r").each_line do |line|
  hash[line] += 1
end
</code></p>

<p>Quand vous créer un hash, vous pouvez lui dire: «Je veux que tu renvois
telle valeur quand on te donne une clé inexistante». Dans notre cas, les
clés inexistantes renverront toujours zéro. Le tour est joué: une simple
incrémentation suffit maintenant, qu'une clé existe déjà ou non.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 27]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27/"/>
    <updated>2013-10-02T12:06:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/10/02/les-algorithmes-genetiques-demystifies-27</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Maintenant qu'on a vu ce qu'était <em>en théorie</em> un extremum local, on
regarde <em>en pratique</em> comment il se manifeste dans les algorithmes
génétiques.</p>

<!-- more -->


<h2>Comment un extremum local se manifeste dans les algorithmes génétiques ?</h2>

<p>On va reprendre le <a href="http://lkdjiin.github.io/blog/2013/09/27/les-algorithmes-genetiques-demystifies-24/">dernier code</a>
sur le problème des 8 dames et modifier deux ou trois petites choses.
D'abord on s'assure d'avoir des soucis en passant la taille de l'échiquier
à 16, et on réduit le nombre de générations pour ne pas avoir à attendre
trop longtemps, 200 semble un bon compromis:</p>

<p><code>ruby
generations = 200
board_size = 16
</code></p>

<p>Puis on modifie la méthode <code>run</code> de la classe <code>GeneticAlgorithm</code> de cette
manière:</p>

<p>``` ruby
def run
  @generations.times do |generation|</p>

<pre><code>Evaluator.new(@board_size, @population).evaluate
best = @population.best
# display(generation, best)
if best.score &gt; 1.0
  best.display
  exit
end
next_generation
</code></pre>

<p>  end
  @population.each {|individual| p individual.chromosome }
end
```</p>

<p>La nouveauté est la ligne suivante:</p>

<p><code>ruby
  @population.each {|individual| p individual.chromosome }
</code></p>

<p>Ainsi, au bout de 200 générations, on affiche la liste des chromosomes.
Pour ceux qui ne connaisse pas Ruby, <code>p x</code> est un raccourci pour
<code>puts x.inspect</code>.</p>

<p>J'ai aussi pris soin de commenter la ligne <code>display(generation, best)</code>
pour pouvoir enregistrer plus tard le résultat dans un fichier sans que
celui-ci soit pollué par des données inutiles.</p>

<p>Quand on lance le programme, on obtient quelque chose comme ça:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 14, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 11, 3]
[10, 8, 5, 11, 2, 0, 15, 12, 9, 13, 1, 4, 14, 7, 14, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 11, 3]
[10, 8, 5, 11, 2, 0, 15, 6, 9, 13, 1, 4, 14, 7, 14, 3]
...
</code></pre>

<p>Les chromosomes sont tous identiques, ou presque ! Pour savoir à quel
point ils sont identiques, on peut les compter à la main (!?) où écrire
un petit script de trois lignes:</p>

<p><code>ruby 8_queens_stat.rb
hash = Hash.new(0)
File.open(ARGV.first, "r").each_line {|line| hash[line] += 1 }
hash.each {|key, value| puts "#{"%3d" % value} =&gt; #{key}" }
</code></p>

<p><strong>Edit 3 octobre 2013</strong> Si vous ne comprenez pas le script ci-dessus,
voici <a href="http://lkdjiin.github.io/blog/2013/10/03/ruby-un-exemple-de-valeur-par-defaut-pour-un-hash/">une explication</a>.</p>

<p>L'explication de ce script dépasse le cadre de cet article, l'objectif
étant de savoir combien de chromosomes sont identiques. Pour cela on
refait tourner notre algorithme génétique en enregistrant le résultat
(c'est à dire la liste des chromosomes après 200 générations) dans un
fichier:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens.rb &gt; result.txt
</code></pre>

<p>Puis on fait travailler notre script sur ce fichier:</p>

<pre><code>[~/genetic]⇒ ruby 8_queens_stat.rb result.txt
971 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 2, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 8, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 12, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 0]
  2 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 9, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 13, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  3 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 6]
  8 =&gt; [3, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 2, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 14]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 3, 4]
  1 =&gt; [1, 7, 13, 3, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 5, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 13, 10, 2, 4]
  1 =&gt; [1, 7, 14, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 3, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  2 =&gt; [1, 7, 13, 11, 4, 15, 5, 14, 2, 0, 8, 6, 12, 10, 2, 4]
  1 =&gt; [1, 7, 13, 11, 9, 15, 5, 14, 2, 0, 8, 6, 12, 14, 2, 4]
</code></pre>

<p>971 chromosomes sur 1000 sont identiques ! Question diversité génétique
on repassera… Voilà donc comment un extremum local se manifeste dans
un algorithme génétique: toutes les solutions convergent vers un même
point. L'algorithme ne peut plus produire de nouvelles solutions originales,
il patauge. Les quelques chromosomes différents, 29 sur 1000 dans ce cas là
(ou encore 2,9%) s'expliquent en grande partie par la mutation.</p>

<p>Si vous étudiez en détail le résultat ci-dessus, vous verrez que chaque
chromosome différent ne diffère du chromosome majoritaire que par un
seul de ses gènes. C'est la clé pour comprendre pourquoi la mutation
semble impuissante à nous aider dans ce problème des 8 dames, alors que
tout avait bien fonctionné avec le paradoxe du singe savant. On verra
ça dans le prochain article.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Les méthodes du module Kernel 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3/"/>
    <updated>2013-09-29T12:51:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/09/29/ruby-les-methodes-du-module-kernel-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Aujourd'hui c'est dimanche, l'article sera court, on voit deux méthodes
utiles pour le débugage ou pour les fichiers
de log: <code>__method__</code> et <code>__dir__</code>.</p>

<!-- more -->


<h2><code>__method__</code></h2>

<p><code>__method__</code> renvoit le nom de la méthode courante comme un type Symbol:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def foo
<strong>method</strong>
end
nil
foo
:foo
```</p></blockquote></blockquote>

<p>Et si vous avez besoin de récupérer une chaîne de caractère:</p>

<p>``` irb</p>

<blockquote><blockquote><p>def bar
<strong>method</strong>.to_s
end
nil
bar
&ldquo;bar&rdquo;
```</p></blockquote></blockquote>

<h2><code>__dir__</code></h2>

<p>Comme son nom l'indique presque, cette méthode renvoit le nom (complet)
du répértoire du fichier dans lequel la méthode est appelée:</p>

<p>``` ruby ~/test/dir.rb
def this_dir
  <strong>dir</strong>
end</p>

<p>puts this_dir
```</p>

<pre><code>[~/test]⇒ rvm use 2.0.0
Using /home/xavier/.rvm/gems/ruby-2.0.0-p247
[~/test]⇒ ruby dir.rb 
/home/xavier/test
</code></pre>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
