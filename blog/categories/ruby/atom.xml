<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-31T12:01:02+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 12]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12/"/>
    <updated>2013-08-31T11:02:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/31/un-langage-sur-parrot-partie-12</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans le dernier épisode, j'utilisais un AST pour capturer la grammaire
de Naam, et le code n'était pas très propre. Cette fois je nettoie un peu
tout ça en mettant les règles de grammaire dans leur propres classes.</p>

<!-- more -->


<p>De ce fait, le syntaxer a beaucoup maigri puisqu'il se contente
maintenant de lancer la première règle:</p>

<p>``` ruby
module Naam</p>

<p>  # Public: Here we transform a list of lexical units in an AST.
  class Syntaxer</p>

<pre><code>def initialize
  @ast = AST.new "ast"
end

# Public: Compile lexical units from a Naam program in an AST.
#
# units - Array of LexicalUnits
#
# Returns the AST.
def run units
  ProgramRule.new(units, @ast).apply!
  @ast
end
</code></pre>

<p>  end
end
```</p>

<p>Voici la règle de base:</p>

<p>``` ruby
module Naam
  class BaseRule</p>

<pre><code>def initialize(units, ast_node)
  @units = units
  @ast_node = ast_node
  @series = []
end

def apply!
  raise NotImplementedError
end

private

def accept(type, value = '')
  unit = @units.slice!(0)
  @series &lt;&lt; unit
  raise Error unless unit.type == type
  if value != ''
    raise Error unless unit.value == value
  end
end

def accept_series(*args)
  args.each {|arg| accept(arg) }
end
</code></pre>

<p>  end
end
```</p>

<p>Reste à écrire une classe par règle de grammaire. Voici par exemple la
règle pour la <code>else clause</code>:</p>

<p>``` ruby
module Naam
  class ElseClauseRule &lt; BaseRule</p>

<pre><code>def apply!
  accept(:int)
  accept(:keyword, 'else')
  accept(:eol)
  else_node = ElseClauseAST.new
  else_node.add_child(ReturnValueAST.new(@series[0].value))
  @ast_node.add_child(else_node)
end
</code></pre>

<p>  end
end
```</p>

<p>La prochaine étape sera de sortir le code PIR à partir de l'AST.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 3]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3/"/>
    <updated>2013-08-30T09:52:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/30/les-algorithmes-genetiques-demystifies-3</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>On termine ce qu'on a commencé
<a href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/">hier</a>,
à savoir l'évaluation de la population et on s'occupe aussi
de la sélection, en vue de la reproduction.</p>

<!-- more -->


<p>Il est temps de noter la population entière:</p>

<p>``` ruby
def score_population
  @population = @population.map do |individual|</p>

<pre><code>genes = chromosome_to_gene(individual)
individual[0] = evaluation(genes)
individual
</code></pre>

<p>  end
end
```</p>

<p>La fonction <code>score_population</code> itère sur chaque individu,
calcule son score et modifie
l'individu pour qu'il reflète ce score. On peut voir ce que donne
notre code jusqu'ici en ajoutant ces quelques lignes:</p>

<p><code>ruby
@search_value = 987
@population = make_population
score_population
@population = @population.sort
@population.each {|individual| puts individual.inspect}
</code></p>

<p>Si vous ne connaissez pas trop Ruby, sachez que <code>sort</code> va trier
la population sur le premier élément de chaque individu, soit son score.
Et voici un résultat possible:</p>

<pre><code>[4, "001100111010111110010010100011111010111100110000"]
[198, "101000011111001000010011110100101010011110001000"]
[331, "011011101110010101101101011100000110001110000100"]
[524, "111011100101011010100010011010101110001110000001"]
[666, "001100101110000111011000100001010101011000000001"]
[735, "101000101111100001001110101101100010101000110000"]
[895, "100111110011101101000110110000110101110100101111"]
[932, "001100010100000111000101011111011000010111110100"]
...
[999999999999, "111100001100101011100000001011111110101110001100"]
[999999999999, "111100101001110111110101101101101101000111101010"]
</code></pre>

<p>Vous pouvez vous amuser à décrypter quelques chromosomes à la main si
ça vous amuse (ou bien si vous êtes sceptique).</p>

<p>On en a maintenant fini avec l'évaluation. Il faut savoir que cette partie est
toujours spécifique à un problème donné. C'est à dire que pour chaque
problème il faut trouver:</p>

<ul>
<li>comment représenter/crypter un gène, un chromosome</li>
<li>comment les décrypter</li>
<li>comment évaluer une solution</li>
<li>comment classer la population</li>
</ul>


<h2>La sélection</h2>

<p>Maintenant on peut passer à l'étape de selection. Ça va être très rapide.
Je vais m'inspirer de la selection artificielle, et non pas naturelle:</p>

<p><code>ruby
def selection
  @selected = @population[0...50].shuffle
end
</code></p>

<p>Simple, non ? Je conserve les 50 premiers individus. Au passage, <code>shuffle</code> sert
à mélanger au hasard. Demain, nous ferons se reproduire ces 50 solutions qui
sont les meilleures de leur génération.</p>

<p><strong>Attention :</strong> si ce type de sélection a le mérite
d'être simple, il n'en est pas moins radical. C'est de l'élitisme, voir
limite de l'eugénisme
(heureusement ce n'est que de l'informatique). Il y a un tas
d'autres façons d'opérer une sélection, et j'en parlerais sûrement plus en
détails plus tard. D'ici là, cette méthode élitiste devrait convenir assez
bien pour notre petit problème (il est possible qu'elle nous cause
quelques soucis quand même… suspens…).</p>

<h2>Un mot sur le code</h2>

<p>J'utilise Ruby pour présenter les algorithmes génétiques car je trouve que
c'est un langage assez facile à comprendre même pour ceux qui ne le
maitrise pas. J'utilise aussi un style volontairement très simple et
procédural pour que chacun puisse l'adapter le plus facilement possible
à son propre paradigme/langage. Si vous voulez voir ce que donne le code
de l'article d'hier d'une manière orienté objet,
<a href="https://twitter.com/PagedeGeek">@Sam</a>
(de <a href="http://www.pagedegeek.com/">Page de Geek</a>)
a eu la gentillesse de s'y coller et a pondu
<a href="https://gist.github.com/PagedeGeek/6378269">ce code</a>
très bien écrit.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les algorithmes génétiques démystifiés 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2/"/>
    <updated>2013-08-29T09:29:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/29/les-algorithmes-genetiques-demystifies-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans cette seconde partie, on commence à coder…</p>

<p>J'ai choisi un problème simple: trouver une expression qui vaut 987 en
mélangeant les chiffres de 0 à 9 et les symboles +, &ndash;, / et %, respectivement
pour addition, soustraction, division entière et reste de la division.
L'expression comportera 12 caractères/symboles maximum. Par exemple:</p>

<ul>
<li>&ldquo;987&rdquo;</li>
<li>&ldquo;900+87&rdquo;</li>
<li>&ldquo;2000/2-13&rdquo;</li>
</ul>


<p>sont différentes solutions possibles au problème posé.</p>

<!-- more -->


<p>Je n'utilise pas la multiplication pour éviter d'avoir des nombres trop
grands (<code>**</code> est l'opérateur de puissance en Ruby, comme dans certains
autres langages).</p>

<p>La première chose à faire est de définir comment on va coder les gènes.
Traditionnellement, ils sont représentés sous la forme d'une chaîne de bits.
Comme on a 14 symboles (10 chiffres et 4 opérateurs mathématiques) à
coder, 4 bits sont suffisants. Les 2 derniers encodages sont des gènes qui
ne font rien:</p>

<pre><code>0000 0
0001 1
0010 2
0011 3
0100 4
0101 5
0110 6
0111 7
1000 8
1001 9
1010 +
1011 -
1100 /
1101 %
1110 ne rien faire
1111 ne rien faire
</code></pre>

<p>L'expression recherchée devant faire au maximum 12 caractères de long, nos
chromosomes mesureront 48 bits (12 caractères multiplié par 4 bits).</p>

<p>Le problème est posé,
c'est parti pour le code. Il est en Ruby mais je vais faire en sorte
qu'il soit compréhensible par tous et facilement transposable dans
votre langage de prédilection.</p>

<p>On doit pouvoir créer un chromosome au hasard:</p>

<p><code>ruby
def make_chromosome
  value = ""
  48.times { value += rand(0..1).to_s }
  [nil, value]
end
</code></p>

<p>Cette fonction renvoie une liste avec <code>nil</code>, qui sera plus tard utilisé
pour mémoriser l'évaluation du chromosome (son score) et une chaîne de
48 caractères au hasard parmi &ldquo;1&rdquo; et &ldquo;0&rdquo;.</p>

<p>On peut maintenant fabriquer une population complète:</p>

<p><code>ruby
def make_population
  population = []
  100.times { population &lt;&lt; make_chromosome }
  population
end
</code></p>

<p>La fonction <code>make_population</code> renvoie une liste de 100 chromosomes.</p>

<p>On peut voir ce que ça donne avec <code>make_population.each {|x| puts x.inspect}</code>:</p>

<pre><code>[nil, "110111010010111000000001011001111000100010101111"]
[nil, "101100010001001000011000111011000001100010000000"]
...
[nil, "111110110011110111111110110000010100100100000100"]
[nil, "000010101001000010011001101010101110011100010010"]
</code></pre>

<p>Maintenant qu'on a créé une population de 100 solutions potentielles, il
faut pouvoir évaluer chaque solution. Pour cela, il faut d'abord être en
mesure de séparer une suite de 48 bits (le chromosome) en 12 parties de
4 bits (les gènes):</p>

<p><code>ruby
def chromosome_to_gene(chromosome)
  chromosome.last.scan /.{4}/
end
</code></p>

<p>La fonction <code>chromosome_to_gene</code> prend en entrée un chromosome (créé avec
<code>make_chromosome</code>) et renvoie une liste des 12 gènes qui le compose.</p>

<p>Pour décrypter l'expression composée par les 12 gènes, il faut tout
d'abord décrypter un seul gène:</p>

<p><code>ruby
def gene_to_operand(gene)
  case gene
  when "0000" then 0
  when "0001" then 1
  when "0010" then 2
  when "0011" then 3
  when "0100" then 4
  when "0101" then 5
  when "0110" then 6
  when "0111" then 7
  when "1000" then 8
  when "1001" then 9
  when "1010" then "+"
  when "1011" then "-"
  when "1100" then "/"
  when "1101" then "%"
  end
end
</code></p>

<p>On peut maintenant decrypter la formule complète (l'expression):</p>

<p><code>ruby
def genes_to_formula(genes)
  formula = []
  genes.each {|gene| formula &lt;&lt; gene_to_operand(gene) }
  formula.join
end
</code></p>

<p><code>genes_to_formula</code> prend en entrée la liste des 12 gènes d'un chromosome
et renvoie l'expression sous la forme d'une chaîne de caractères.</p>

<p>L'évaluation proprement dite se passe ainsi:</p>

<p>``` ruby
def evaluation(genes)
  formula = genes_to_formula(genes)
  begin</p>

<pre><code>result = (@search_value - eval(formula)).abs
</code></pre>

<p>  rescue Exception</p>

<pre><code>result = 999_999_999_999
</code></pre>

<p>  end
  result = 999_999_999_999 unless result.is_a?(Integer)
  result
end
```</p>

<p>Cette fonction mérite quelques d'explications. L'expression (<code>formula</code>)
est évaluée avec <code>eval</code>. En ruby, <code>eval</code> evalue une chaîne de caractères
comme si c'était du code source (comme en Javascript, etc).
On ôte ce résultat de <code>@search_value</code>, qui
contient le nombre qu'on cherche (notre problème) et on garde la valeur
absolue. Ainsi zéro signifie une solution et plus on s'éloigne de zéro,
plus on est loin d'une solution. On pourra donc facilement classer nos
individus. Si <code>eval</code> provoque une exception (à cause d'une formule/expression
incompréhensible), on place une grande valeur
comme résultat puisqu'on est très loin de la solution. On peut voir
le nombre 999.999.999.999 comme étant l'infini. Enfin je regarde si
le résultat de <code>eval</code> est bien un nombre et dans le cas contraire, je
change le résultat pour refleter ce souci. Qu'est ce que ça peut être
d'autre qu'un nombre ? En ruby, une chaîne placée entre <code>/</code> est une
expression régulière. Voilà pour aujourd'hui.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un langage sur Parrot - partie 11: Arbre syntaxique abstrait]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait/"/>
    <updated>2013-08-26T08:48:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/26/un-langage-sur-parrot-partie-11-arbre-syntaxique-abstrait</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Dans le dernier épisode, je me suis rendu compte que j'aurais intéret
à utiliser un arbre syntaxique abstrait pour mon petit langage. En
voici une première implémentation.</p>

<!-- more -->


<p>Un arbre syntaxique abstrait (<em>Abstract Syntax Tree</em> en anglais, ou AST)
est avant tout une manière de structurer des données:</p>

<pre><code>    A
   / \
  B   C
 / \   \
D   E   F
   /
  G
</code></pre>

<p>On part d'un noeud racine (ici <code>A</code>) et on ajoute des branches qui mènent à
d'autres noeuds. On peut distinguer les noeuds terminaux (<code>D</code>, <code>F</code> et <code>G</code>) des
noeuds non-terminaux.
Les noeuds terminaux, aussi appelés feuilles, contiennent une valeur. Les noeuds
non-terminaux contiennent d'autres noeuds.
C'est une manière pratique de représenter un code source,
l'AST étant (assez) facilement manipulable. Il est dit abstrait dans le sens
où il ne contient pas chaque éléments du langage source. Par exemple, les
parenthèses, les virgules, ou encore les débuts et fins de blocs sont
souvent absents de l'AST. Si vous voulez en savoir plus sur les AST:
<a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">http://en.wikipedia.org/wiki/Abstract_syntax_tree</a>.</p>

<p>Le code qui suit est sur <a href="https://github.com/lkdjiin/naam">Github</a>,
à la version 0.0.5.</p>

<p>L'objectif est de créer l'AST et de le visualiser ainsi:</p>

<pre><code>program
  function definition
    header
      name ::= sign
      argument ::= n
    if clause
      return value ::= 1
      test
        left value ::= n
        operator value ::= &gt;
        right value ::= 0
    if clause
      return value ::= -1
      test
        left value ::= n
        operator value ::= &lt;
        right value ::= 0
    else clause
      return value ::= 0
  print statement ::= sign(4)
</code></pre>

<p>Voici la classe de base de l'AST:</p>

<p>``` ruby
module Naam::AST
  class Node</p>

<pre><code>def initialize name
  @name = name
  @children = []
end

attr_reader :children, :name

def add_child child; @children &lt;&lt; child; end

def leaf?; @children.empty?; end

def display(indent = 0)
  print " " * indent + @name
  print " ::= #{@value}" if leaf?
  puts
  @children.each {|child| child.display(indent + 2) }
end
</code></pre>

<p>  end
end
```</p>

<p>Elle permet entre autres d'ajouter un noeud enfant avec <code>add_child</code> et de
déterminer si un noeud est une feuille avec <code>leaf?</code>. La méthode <code>display</code>,
appliquée sur le noeud racine permettra d'afficher l'arbre complet.</p>

<p>Un noeud non-terminal ressemblera à ça:</p>

<p>``` ruby
module Naam::AST
  class Program &lt; Node</p>

<pre><code>def initialize
  super("program")
end
</code></pre>

<p>  end
end
```</p>

<p>Pour un noeud terminal (une feuille), on ajoutera simplement une valeur:</p>

<p>``` ruby
module Naam::AST
  class Argument &lt; Node</p>

<pre><code>def initialize value
  super("argument")
  @value = value
end
</code></pre>

<p>  end
end
```</p>

<p>Comment appliquer tout ça ? Directement dans le <em>syntaxer</em>. En voici
quelques extraits:</p>

<p>``` ruby
module Naam::Parser
  class Syntaxer</p>

<pre><code>def initialize
  # ...
  @ast = Naam::AST::Program.new
end

# ...

def function_def
  node = Naam::AST::FunctionDef.new
  @ast.add_child node
  function_header(node)
  if_clause(node) while if_clause?
  else_clause(node)
end

def function_header(node)
  @series = []
  accept_series(:word, :paro, :word, :parc, :affect, :eol)
  f_header = Naam::AST::FunctionHeader.new
  f_header.add_child(Naam::AST::Name.new(@series[0].value))
  f_header.add_child(Naam::AST::Arg.new(@series[2].value))
  node.add_child(f_header)
end

# ...
</code></pre>

<p>  end
end
```</p>

<p>L'AST va me permettre de faire un truc plus propre (même si cette classe
<code>Syntaxer</code> demande toujours un gros <em>refactoring</em>) et de manipuler plus
aisement le code source.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un plugin Octopress pour les articles connexes]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes/"/>
    <updated>2013-08-22T15:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/22/un-plugin-octopress-pour-les-articles-connexes</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Je cherchais un plugin Octopress pour embarquer une section d'articles
connexes (<em>related posts</em>) dans certains articles et, curieusement, je
n'en ai pas trouvé. C'est donc l'occasion d'écrire mon second plugin pour
Octopress.</p>

<!-- more -->


<p>Pour voir ce que fait ce plugin, il vous suffit de regarder la section
«Articles connexes» à la fin de cet article. Le code est sur Github:
<a href="https://github.com/lkdjiin/octopress-connexe">octopress-connexe</a>.</p>

<p>Je vais commenter quelques unes des méthodes:</p>

<p>``` ruby
def my_categories(context)
  context.environments.first[&ldquo;page&rdquo;][&ldquo;categories&rdquo;]
end</p>

<p>def my_url(context)
  context.environments.first[&ldquo;page&rdquo;][&ldquo;url&rdquo;]
end
```</p>

<p>J'ai séché un certain temps là-dessus. Pour connaitre les informations
relative à l'article courant, on se sert de
<code>context.environments.first["page"]</code>.</p>

<p>Et voici comment je fais la sélection des articles connexes:</p>

<p>``` ruby
def build_posts(context)
  remove_unrelated_posts
  remove_current_post(context)
  sort_posts
end</p>

<p>def remove_unrelated_posts
  @posts = @posts.select do |post|</p>

<pre><code>result = false
@categories.each do |category|
  result = true if post.categories.include?(category)
end
result
</code></pre>

<p>  end
end</p>

<p>def remove_current_post(context)
  @posts.delete_if {|post| post.url == my_url(context)}
end</p>

<p>def sort_posts
  @posts = @posts.map do |post|</p>

<pre><code>weight = 0
@categories.each do |category|
  weight += 1 if post.categories.include?(category)
end
[weight, post]
</code></pre>

<p>  end
  @posts = @posts.sort.reverse
end
```</p>

<p>Dans un premier temps, j'écarte les articles qui n'ont pas au moins
une catégorie commune avec l'article courant. C'est le rôle de la méthode
<code>remove_unrelated_posts</code>. Puis après avoir écarter de la liste l'article
courant, il ne reste plus qu'à trier avec la méthode <code>sort_posts</code>. Dans cette
méthode, j'attribue un poid à chaque article en fonction du nombre de
catégories communes. C'est ce poid qui sert de référence pour le tri.</p>

<p>À demain.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
