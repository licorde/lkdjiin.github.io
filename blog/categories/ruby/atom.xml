<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-19T15:10:49+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 9: la syntaxe]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/"/>
    <updated>2013-08-18T08:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe</id>
    <content type="html"><![CDATA[<p>Après avoir écrit un
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">tokenizer</a>,
avoir produit les <a href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/">unités lexicales</a>
et avoir défini
<a href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/">une grammaire</a>
pour le langage Naam, je passe maintenant à la vérification de la syntaxe.</p>

<!-- more -->


<p>La vérification de la syntaxe se passe dans la classe <code>Compiler</code>. <em>&ndash; C'est pas
le meilleur choix de nom et ça changera par la suite &ndash;</em>. Basiquement, cette
classe ne fait que suivre la logique de la grammaire.</p>

<p>``` ruby lib/naam/compiler.rb
class Compiler</p>

<p>  # units &ndash; Array of LexicalUnits
  def compile units</p>

<pre><code>@units = units
program
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def program</p>

<pre><code>while @units.size &gt; 0
  case @units.first.type
  when :eol then accept(:eol)
  else
    instruction
  end
end
</code></pre>

<p>  end</p>

<p>  def instruction</p>

<pre><code>case @units.first.type
when :keyword then print_statement
when :word then function_def
else
  raise Error
end
</code></pre>

<p>  end</p>

<p>  def print_statement</p>

<pre><code>accept(:keyword, 'print')
accept_series(:word, :paro, :int, :parc, :eol)
</code></pre>

<p>  end</p>

<p>  def function_def</p>

<pre><code>accept_series(:word, :paro, :word, :parc, :affect, :eol)
if_clause while if_clause?
else_clause
</code></pre>

<p>  end</p>

<p>  def if_clause</p>

<pre><code>accept(:int)
accept(:keyword, 'if')
test
accept(:eol)
</code></pre>

<p>  end</p>

<p>  def else_clause</p>

<pre><code>accept(:int)
accept(:keyword, 'else')
accept(:eol)
</code></pre>

<p>  end</p>

<p>  def test</p>

<pre><code>accept_series(:word, :op, :int)
</code></pre>

<p>  end</p>

<p>  def accept(type, value = &lsquo;&rsquo;)</p>

<pre><code>unit = @units.slice!(0)
raise Error unless unit.type == type
if value != ''
  raise Error unless unit.value == value
end
</code></pre>

<p>  end</p>

<p>  def accept_series(*args)</p>

<pre><code>args.each {|arg| accept(arg) }
</code></pre>

<p>  end</p>

<p>  def if_clause?</p>

<pre><code>@units[1].type == :keyword &amp;&amp; @units[1].value == 'if'
</code></pre>

<p>  end
end
```</p>

<p>Quelques commentaires sur ce code:</p>

<p>``` ruby
def instruction
  # &hellip;
  else</p>

<pre><code>raise Error
</code></pre>

<p>  end
end
```</p>

<p>Plusieurs fois j'utilise la classe <code>Error</code>, qui n'existe pas. C'est parce que
je ne veux pas encore réfléchir à la gestion des erreurs. Les seuls cas qui
m'intéressent pour l'instant sont ceux où ça fonctionne.</p>

<p>`&ldquo; ruby
def accept(type, value = &rdquo;)
  unit = @units.slice!(0)
  raise Error unless unit.type == type
  if value != &lsquo;&rsquo;</p>

<pre><code>raise Error unless unit.value == value
</code></pre>

<p>  end
end
```</p>

<p>C'est la méthode <code>accept</code>, toute simple, qui effectue la vérification
de la syntaxe en comparant l'unité lexicale attendue avec celle réellement
disponible. On constate que les unités lexicales (représentées par <code>@units</code>)
sont détruites au fur et à mesure de leur consommation.</p>

<p>La prochaine, il sera enfin temps d'émettre le code PIR.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un DSL en Ruby facilement avec Docile]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile/"/>
    <updated>2013-08-14T10:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je suis en train de lire «<a href="http://www.wolframscience.com/">A new kind of science</a>» de Stephen Wolfram
et ça me donne envie de me replonger dans les <a href="https://fr.wikipedia.org/wiki/Automate_cellulaire">automates cellulaires</a>.
Le jeu de la vie est sûrement le programme que j'ai écrit le plus souvent,
mais curieusement jamais en Ruby.</p>

<!-- more -->


<p>J'ai commencé à écrire un
<a href="https://github.com/lkdjiin/cellula">framework pour automate cellulaire</a>,
qui n'aboutira peut-être pas faute de temps. Quoiqu'il en soit, je voudrais
que ce framework soit utilisable par des non-développeurs, d'où le recours
à un DSL (Domain Specific Language). Et pour développer mon DSL, je n'ai
pas trouver plus simple que la gem
<a href="https://github.com/ms-ati/docile">docile</a>.</p>

<p>Voici le DSL que je voudrais:</p>

<p><code>ruby my_automaton.rb
automaton "Test Automaton" do
  dimensions       2
  type             :elementary
  width            100
  height           100
  rule             :b36s26
  pattern          :random
  live_probability 0.1789
end
</code></p>

<p>Docile encourage l'utilisation du design pattern builder. Alors allons-y
pour une classe builder qui va contenir les valeurs par défaut de notre
futur Automaton:</p>

<p>``` ruby automaton_builder.rb
class AutomatonBuilder
  def initialize(name)</p>

<pre><code>@name = name
@dimensions = 2
@type = :elementary
@width = 0
@height = 0
@rule = :b3s23
@pattern = :random
@live_probability = 0.5
</code></pre>

<p>  end</p>

<p>  def dimensions(val); @dimensions = val; self; end
  def type(val); @type = val; self; end
  def width(val); @width = val; self; end
  def height(val); @height = val; self; end
  def rule(val); @rule = val; self; end
  def pattern(val); @pattern = val; self; end
  def live_probability(val); @live_probability = val; self; end</p>

<p>  def build</p>

<pre><code>Automaton.new(@name, @dimensions, @type, @width, @height,
              @rule, @pattern, @live_probability)
</code></pre>

<p>  end
end
```</p>

<p>Il nous faut maintenant une classe Automaton:</p>

<p>``` ruby automaton.rb
class Automaton
  def initialize(name, dimensions, type, width, height, rule,</p>

<pre><code>            pattern, live_probability)
@name = name
@dimensions = dimensions
@type = type
@width = width
@height = height
@rule = rule
@pattern = pattern
@live_probability = live_probability
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code>puts "#{@name} running"
</code></pre>

<p>  end
end
```</p>

<p>Et pour finir, on demande à Docile d'évaluer notre DSL puis on charge le
fichier <code>my_automaton.rb</code>. Il ne reste plus qu'à lancer la machine:</p>

<p>``` ruby main.rb
require &lsquo;docile&rsquo;
require &lsquo;./automaton_builder&rsquo;
require &lsquo;./automaton&rsquo;</p>

<p>def automaton(name, &amp;block)
  @auto = Docile.dsl_eval(AutomatonBuilder.new(name), &amp;block).build
end</p>

<p>load ARGV[0]</p>

<p>@auto.run
```</p>

<p>La boucle est bouclée. Vous remarquerez que la méthode <code>automaton</code> définie
dans <code>main.rb</code> ci-dessus est celle qui est utilisée dans le DSL
(<code>my_automaton.rb</code>).</p>

<pre><code>$ ruby ./main.rb my_automaton.rb 
Test Automaton running
</code></pre>

<p>Et voilà. C'est presque trop facile d'écrire un DSL avec Docile…</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 7: le lexer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/"/>
    <updated>2013-08-13T10:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir vu
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">la tokenisation</a>,
on continue aujourd'hui l'analyse
lexicale avec la production des lexèmes.</p>

<!-- more -->


<h2>Qu'est-ce qu'un lexème ?</h2>

<p>Si vous avez le temps, lisez <a href="http://fr.wikipedia.org/wiki/Lex%C3%A8me">l'article de wikipédia</a>.
Sinon voici ma définition pour le domaine qui nous intéresse:</p>

<p><blockquote><p>Un lexème (unité lexicale) est un token auquel on attache un type<br/>très basique.</p></blockquote></p>

<p>Par exemple, la phrase «Je mange.» donnerait:</p>

<pre><code>mot:         Je
mot:         mange
ponctuation: .
</code></pre>

<p>On pourrait produire un <em>lexer</em> plus intelligent qui donnerait:</p>

<pre><code>mot:         Je
verbe:       mange
ponctuation: .
</code></pre>

<p>Les langages informatiques étant beaucoup moins complexe que les
langages humains, écrire un <em>lexer</em> est souvent une formalité.</p>

<h2>Objectif</h2>

<p>L'objectif d'aujourd'hui est d'obtenir quelque chose comme ça:</p>

<p>``` console
[~/devel/ruby/naam]$ bin/naam spec/fixtures/sign.naam</p>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca2f8 @type=:word, @value=&ldquo;sign&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca258 @type=:paro, @value=&ldquo;(&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca0b4 @type=:word, @value=&ldquo;n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9fec @type=:parc, @value=&ldquo;)&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9ee8 @type=:affect, @value=&ldquo;=&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9de4 @type=:eol, @value=&ldquo;\n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9b8c @type=:int, @value=&ldquo;1&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc99d4 @type=:keyword, @value=&ldquo;if&rdquo;></h1>

<p>&hellip;
```</p>

<h2>Le code</h2>

<p>Le code source du projet est sur Github, à la
<a href="https://github.com/lkdjiin/naam/tree/v0.0.2">version 0.0.2</a>.</p>

<p>Bien souvent l'étape de tokenisation et de lexification peuvent être
regroupées en une seule et même étape. Là, j'ai choisi de les séparer pour
avoir un code plus simple à montrer. Tout d'abord, voici la classe
<code>lexical_unit</code>:</p>

<p>``` ruby lib/naam/parser/lexical_unit.rb
module Naam::Parser</p>

<p>  # A container for lexical units.
  class LexicalUnit</p>

<pre><code>private_class_method :new

attr_reader :type, :value

# type  - Symbol
# value - String
def initialize type, value
  @type = type
  @value = value
end

def self.int value ; new(:int, value) ; end
def self.word value ; new(:word, value) ; end
def self.keyword value ; new(:keyword, value) ; end
def self.op value ; new(:op, value) ; end
def self.paro ; new(:paro, "(") ; end
def self.parc ; new(:parc, ")") ; end
def self.eol ; new(:eol, "\n") ; end
def self.affect ; new(:affect, "=") ; end
</code></pre>

<p>  end
end
```</p>

<p>J'ai beau chercher, je ne trouve rien à dire d'intelligent sur cette classe.
J'avais prévenu: c'est très simple. Et ça continue, on passe maintenant au
<em>lexer</em> proprement dit, qui est tout aussi simple:</p>

<p>``` ruby lib/naam/parser/lexer.rb
module Naam::Parser
  class Lexer</p>

<pre><code>def from_token(token)
  if token == '('
    LexicalUnit.paro()
  elsif token == ')'
    LexicalUnit.parc()
  elsif token == "\n"
    LexicalUnit.eol()
  elsif token == '='
    LexicalUnit.affect()
  elsif token == '&lt;'
    LexicalUnit.op(token)
  elsif token == '&gt;'
    LexicalUnit.op(token)
  elsif token == 'if'
    LexicalUnit.keyword(token)
  elsif token == 'else'
    LexicalUnit.keyword(token)
  elsif token =~ /[+|-]?\d+/
    LexicalUnit.int(token)
  else
    LexicalUnit.word(token)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Voilà, on a fini l'analyse lexicale, c'est à dire la première phase
de l'écriture d'un compilateur. La prochaine fois je parlerais de la
grammaire de Naam, ce qui enclenchera la phase d'analyse syntaxique.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liste des abréviations de langages pour Pygments]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/04/liste-des-abreviations-de-langages-pour-pygments/"/>
    <updated>2013-08-04T09:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/04/liste-des-abreviations-de-langages-pour-pygments</id>
    <content type="html"><![CDATA[<p>La bibliothèque <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a>
est un <em>wrapper</em> Ruby pour
<a href="http://pygments.org/">pygments</a>,
un <em>syntax highlighter</em> écrit en Python. J'ai cherché une liste des
abréviations supportées par l'application, sans la trouver. Je suis étonné
qu'une telle liste n'existe pas. J'ai peut-être mal cherché… Quoiqu'il en
soit voici cette liste, elle sera peut-être utile à quelqu'un d'autre:</p>

<!-- more -->


<pre><code>ABAP                      ["abap"]
ANTLR                     ["antlr"]
ANTLR With ActionScript Target ["antlr-as", "antlr-actionscript"]
ANTLR With C# Target      ["antlr-csharp", "antlr-c#"]
ANTLR With CPP Target     ["antlr-cpp"]
ANTLR With Java Target    ["antlr-java"]
ANTLR With ObjectiveC Target ["antlr-objc"]
ANTLR With Perl Target    ["antlr-perl"]
ANTLR With Python Target  ["antlr-python"]
ANTLR With Ruby Target    ["antlr-ruby", "antlr-rb"]
ActionScript              ["as", "actionscript"]
ActionScript 3            ["as3", "actionscript3"]
Ada                       ["ada", "ada95ada2005"]
ApacheConf                ["apacheconf", "aconf", "apache"]
AppleScript               ["applescript"]
AspectJ                   ["aspectj"]
Asymptote                 ["asy", "asymptote"]
Awk                       ["awk", "gawk", "mawk", "nawk"]
BBCode                    ["bbcode"]
BUGS                      ["bugs", "winbugs", "openbugs"]
Base Makefile             ["basemake"]
Bash                      ["bash", "sh", "ksh"]
Bash Session              ["console"]
Batchfile                 ["bat"]
Befunge                   ["befunge"]
BlitzMax                  ["blitzmax", "bmax"]
Boo                       ["boo"]
Brainfuck                 ["brainfuck", "bf"]
Bro                       ["bro"]
C                         ["c"]
C#                        ["csharp", "c#"]
C++                       ["cpp", "c++"]
CFEngine3                 ["cfengine3", "cf3"]
CMake                     ["cmake"]
CSS                       ["css"]
CSS+Django/Jinja          ["css+django", "css+jinja"]
CSS+Genshi Text           ["css+genshitext", "css+genshi"]
CSS+Lasso                 ["css+lasso"]
CSS+Mako                  ["css+mako"]
CSS+Myghty                ["css+myghty"]
CSS+PHP                   ["css+php"]
CSS+Ruby                  ["css+erb", "css+ruby"]
CSS+Smarty                ["css+smarty"]
CUDA                      ["cuda", "cu"]
Ceylon                    ["ceylon"]
Cheetah                   ["cheetah", "spitfire"]
Clojure                   ["clojure", "clj"]
CoffeeScript              ["coffee-script", "coffeescript"]
Coldfusion HTML           ["cfm"]
Common Lisp               ["common-lisp", "cl"]
Coq                       ["coq"]
Croc                      ["croc"]
Cython                    ["cython", "pyx"]
D                         ["d"]
DTD                       ["dtd"]
Darcs Patch               ["dpatch"]
Dart                      ["dart"]
Debian Control file       ["control"]
Debian Sourcelist         ["sourceslist", "sources.list"]
Delphi                    ["delphi", "pas", "pascal", "objectpascal"]
Diff                      ["diff", "udiff"]
Django/Jinja              ["django", "jinja"]
Duel                      ["duel", "Duel Engine", "Duel View", "JBST", "jbst", "JsonML+BST"]
Dylan                     ["dylan"]
ECL                       ["ecl"]
ERB                       ["erb"]
Elixir                    ["elixir", "ex", "exs"]
Elixir iex session        ["iex"]
Embedded Ragel            ["ragel-em"]
Erlang                    ["erlang"]
Erlang erl session        ["erl"]
Evoque                    ["evoque"]
FSharp                    ["fsharp"]
Factor                    ["factor"]
Fancy                     ["fancy", "fy"]
Fantom                    ["fan"]
Felix                     ["felix", "flx"]
Fortran                   ["fortran"]
GAS                       ["gas"]
GLSL                      ["glsl"]
Genshi                    ["genshi", "kid", "xml+genshi", "xml+kid"]
Genshi Text               ["genshitext"]
Gettext Catalog           ["pot", "po"]
Gherkin                   ["Cucumber", "cucumber", "Gherkin", "gherkin"]
Gnuplot                   ["gnuplot"]
Go                        ["go"]
GoodData-CL               ["gooddata-cl"]
Gosu                      ["gosu"]
Gosu Template             ["gst"]
Groff                     ["groff", "nroff", "man"]
Groovy                    ["groovy"]
HTML                      ["html"]
HTML+Cheetah              ["html+cheetah", "html+spitfire"]
HTML+Django/Jinja         ["html+django", "html+jinja"]
HTML+Evoque               ["html+evoque"]
HTML+Genshi               ["html+genshi", "html+kid"]
HTML+Lasso                ["html+lasso"]
HTML+Mako                 ["html+mako"]
HTML+Myghty               ["html+myghty"]
HTML+PHP                  ["html+php"]
HTML+Smarty               ["html+smarty"]
HTML+Velocity             ["html+velocity"]
HTTP                      ["http"]
Haml                      ["haml", "HAML"]
Haskell                   ["haskell", "hs"]
Hybris                    ["hybris", "hy"]
INI                       ["ini", "cfg"]
IRC logs                  ["irc"]
Io                        ["io"]
Ioke                      ["ioke", "ik"]
JAGS                      ["jags"]
JSON                      ["json"]
Jade                      ["jade", "JADE"]
Java                      ["java"]
Java Server Page          ["jsp"]
JavaScript                ["js", "javascript"]
JavaScript+Cheetah        ["js+cheetah", "javascript+cheetah", "js+spitfire", "javascript+spitfire"]
JavaScript+Django/Jinja   ["js+django", "javascript+django", "js+jinja", "javascript+jinja"]
JavaScript+Genshi Text    ["js+genshitext", "js+genshi", "javascript+genshitext", "javascript+genshi"]
JavaScript+Lasso          ["js+lasso", "javascript+lasso"]
JavaScript+Mako           ["js+mako", "javascript+mako"]
JavaScript+Myghty         ["js+myghty", "javascript+myghty"]
JavaScript+PHP            ["js+php", "javascript+php"]
JavaScript+Ruby           ["js+erb", "javascript+erb", "js+ruby", "javascript+ruby"]
JavaScript+Smarty         ["js+smarty", "javascript+smarty"]
Julia                     ["julia", "jl"]
Julia console             ["jlcon"]
Kconfig                   ["kconfig", "menuconfig", "linux-config", "kernel-config"]
Koka                      ["koka"]
Kotlin                    ["kotlin"]
LLVM                      ["llvm"]
Lasso                     ["lasso", "lassoscript"]
Lighttpd configuration file ["lighty", "lighttpd"]
Literate Haskell          ["lhs", "literate-haskell"]
LiveScript                ["live-script", "livescript"]
Logtalk                   ["logtalk"]
Lua                       ["lua"]
MAQL                      ["maql"]
MOOCode                   ["moocode"]
MXML                      ["mxml"]
Makefile                  ["make", "makefile", "mf", "bsdmake"]
Mako                      ["mako"]
Mason                     ["mason"]
Matlab                    ["matlab"]
Matlab session            ["matlabsession"]
MiniD                     ["minid"]
Modelica                  ["modelica"]
Modula-2                  ["modula2", "m2"]
MoinMoin/Trac Wiki markup ["trac-wiki", "moin"]
Monkey                    ["monkey"]
MoonScript                ["moon", "moonscript"]
Mscgen                    ["mscgen", "msc"]
MuPAD                     ["mupad"]
MySQL                     ["mysql"]
Myghty                    ["myghty"]
NASM                      ["nasm"]
Nemerle                   ["nemerle"]
NewLisp                   ["newlisp"]
Newspeak                  ["newspeak"]
Nginx configuration file  ["nginx"]
Nimrod                    ["nimrod", "nim"]
NumPy                     ["numpy"]
OCaml                     ["ocaml"]
Objective-C               ["objective-c", "objectivec", "obj-c", "objc"]
Objective-J               ["objective-j", "objectivej", "obj-j", "objj"]
Octave                    ["octave"]
Ooc                       ["ooc"]
Opa                       ["opa"]
OpenEdge ABL              ["openedge", "abl", "progress"]
PHP                       ["php", "php3", "php4", "php5"]
PL/pgSQL                  ["plpgsql"]
POVRay                    ["pov"]
Perl                      ["perl", "pl"]
PostScript                ["postscript"]
PostgreSQL SQL dialect    ["postgresql", "postgres"]
PostgreSQL console (psql) ["psql", "postgresql-console", "postgres-console"]
PowerShell                ["powershell", "posh", "ps1"]
Prolog                    ["prolog"]
Properties                ["properties"]
Protocol Buffer           ["protobuf"]
PyPy Log                  ["pypylog", "pypy"]
Python                    ["python", "py", "sage"]
Python 3                  ["python3", "py3"]
Python 3.0 Traceback      ["py3tb"]
Python Traceback          ["pytb"]
Python console session    ["pycon"]
RConsole                  ["rconsole", "rout"]
REBOL                     ["rebol"]
RHTML                     ["rhtml", "html+erb", "html+ruby"]
Racket                    ["racket", "rkt"]
Ragel                     ["ragel"]
Ragel in C Host           ["ragel-c"]
Ragel in CPP Host         ["ragel-cpp"]
Ragel in D Host           ["ragel-d"]
Ragel in Java Host        ["ragel-java"]
Ragel in Objective C Host ["ragel-objc"]
Ragel in Ruby Host        ["ragel-ruby", "ragel-rb"]
Raw token data            ["raw"]
Rd                        ["rd"]
Redcode                   ["redcode"]
RobotFramework            ["RobotFramework", "robotframework"]
Ruby                      ["rb", "ruby", "duby"]
Ruby irb session          ["rbcon", "irb"]
Rust                      ["rust"]
S                         ["splus", "s", "r"]
SCSS                      ["scss"]
SQL                       ["sql"]
Sass                      ["sass", "SASS"]
Scala                     ["scala"]
Scalate Server Page       ["ssp"]
Scaml                     ["scaml", "SCAML"]
Scheme                    ["scheme", "scm"]
Scilab                    ["scilab"]
Smali                     ["smali"]
Smalltalk                 ["smalltalk", "squeak"]
Smarty                    ["smarty"]
Snobol                    ["snobol"]
SourcePawn                ["sp"]
SquidConf                 ["squidconf", "squid.conf", "squid"]
Stan                      ["stan"]
Standard ML               ["sml"]
Tcl                       ["tcl"]
Tcsh                      ["tcsh", "csh"]
TeX                       ["tex", "latex"]
Tea                       ["tea"]
Text only                 ["text"]
Treetop                   ["treetop"]
UrbiScript                ["urbiscript"]
VB.net                    ["vb.net", "vbnet"]
VGL                       ["vgl"]
Vala                      ["vala", "vapi"]
Velocity                  ["velocity"]
VimL                      ["vim"]
XML                       ["xml"]
XML+Cheetah               ["xml+cheetah", "xml+spitfire"]
XML+Django/Jinja          ["xml+django", "xml+jinja"]
XML+Evoque                ["xml+evoque"]
XML+Lasso                 ["xml+lasso"]
XML+Mako                  ["xml+mako"]
XML+PHP                   ["xml+php"]
XML+Ruby                  ["xml+erb", "xml+ruby"]
XML+Smarty                ["xml+smarty"]
XML+Velocity              ["xml+velocity"]
XQuery                    ["xquery", "xqy", "xq", "xql", "xqm"]
XSLT                      ["xslt"]
Xtend                     ["xtend"]
YAML                      ["yaml"]
aspx-cs                   ["aspx-cs"]
aspx-vb                   ["aspx-vb"]
autohotkey                ["ahk"]
c-objdump                 ["c-objdump"]
cfstatement               ["cfs"]
cpp-objdump               ["cpp-objdump", "c++-objdumb", "cxx-objdump"]
d-objdump                 ["d-objdump"]
dg                        ["dg"]
eC                        ["ec"]
haXe                      ["hx", "haXe"]
objdump                   ["objdump"]
reStructuredText          ["rst", "rest", "restructuredtext"]
reg                       []
sqlite3con                ["sqlite3"]
systemverilog             ["sv"]
verilog                   ["v"]
vhdl                      ["vhdl"]
</code></pre>

<p>Et pour les curieux, voici comment l'obtenir:</p>

<p>```ruby
require &lsquo;pygments&rsquo;</p>

<p>Pygments.lexers.sort.each do |e|
  puts &ldquo;%-25s &rdquo; % e[1][:name] + &ldquo;#{e[1][:aliases]}&rdquo;
end
```</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un plugin Octopress - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/30/comment-ecrire-un-plugin-octopress-partie-2/"/>
    <updated>2013-07-30T08:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/30/comment-ecrire-un-plugin-octopress-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/">la première partie</a>,
je m'étais arrêté sur le code suivant:</p>

<p>``` ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level
end

def render(context)
  "Niveau : #{@level}"
end
</code></pre>

<p>  end
end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>Aujourd'hui je montre comment permettre à l'utilisateur de personnaliser
le contenu du code Html produit.</p>

<!-- more -->


<p>Tout d'abord, voici le code du plugin terminé. Je vous rappelle que vous
pouvez trouver <a href="https://github.com/lkdjiin/octopress-level-tag">ce plugin sur Github</a>.</p>

<p>``` ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level.strip
end

def render(context)
  config = context.registers[:site].config
  label = config['level_tag_level'] || "Level: "
  level = case @level
  when "1" then config['level_tag_level_1'] || "easy"
  when "2" then config['level_tag_level_2'] || "medium"
  when "3" then config['level_tag_level_3'] || "hard"
  else
    "unknown"
  end
  classes = "class='level-tag level-tag-#{@level}'"
  "&lt;div #{classes}&gt;#{label}&lt;span&gt;#{level}&lt;/span&gt;&lt;/div&gt;"
end
</code></pre>

<p>  end</p>

<p>end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>L'appel du plugin dans les articles sera maintenant réalisé comme ceci:</p>

<p><code>ruby
<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>
</code></p>

<p>Par rapport à la première version, la méthode <code>render</code> a bien enflée. &ndash;
<em>Je trouve qu'il y a trop de code dedans, mais ce sera peut-être le sujet
d'un prochain article sur le refactoring.</em> &ndash; C'est cette méthode qui fait
tout le travail, voici les explications:</p>

<p>``` ruby</p>

<pre><code>def render(context)
  config = context.registers[:site].config
  label = config['level_tag_level'] || "Level: "
</code></pre>

<p>```</p>

<p>C'est l'objet <code>context</code> qui va permettre de récupérer les informations
nécéssaires dans le fichier de configuration <code>_config.yml</code>. Voici par
exemple ce que j'ai ajouté dans mon <code>_config.yml</code>:</p>

<p>``` yaml</p>

<h1>LevelTag plugin</h1>

<p>level_tag_level: &ldquo;Niveau : &rdquo;
level_tag_level_1: &ldquo;facile&rdquo;
level_tag_level_2: &ldquo;intermédiaire&rdquo;
level_tag_level_3: &ldquo;avancé&rdquo;
```</p>

<p>La ligne suivante:</p>

<pre><code>label = config['level_tag_level'] || "Level: "
</code></pre>

<p>initialise la
variable <code>label</code> avec le contenu de <code>level_tag_level</code>, trouvé dans le
<code>_config.yml</code>. La partie du code <code>|| "Level: "</code> est là pour s'assurer que
si <code>level_tag_level</code> n'existe pas dans le fichier de configuration, <code>label</code>
sera bien initialisé avec une valeur par défaut.</p>

<p>``` ruby</p>

<pre><code>  level = case @level
  when "1" then config['level_tag_level_1'] || "easy"
  when "2" then config['level_tag_level_2'] || "medium"
  when "3" then config['level_tag_level_3'] || "hard"
  else
    "unknown"
  end
</code></pre>

<p>```</p>

<p>C'est la même logique que précédement. La variable <code>level</code> sera initialisée
avec du contenu trouvé dans <code>_config.yml</code> ou bien, avec une valeur par
défaut.</p>

<p>``` ruby</p>

<pre><code>  classes = "class='level-tag level-tag-#{@level}'"
  "&lt;div #{classes}&gt;#{label}&lt;span&gt;#{level}&lt;/span&gt;&lt;/div&gt;"
</code></pre>

<p>```</p>

<p>Finalement, comme dans <a href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/">la première partie</a>,
on retrouve en fin de méthode la production du code Html.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
