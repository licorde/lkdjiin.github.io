<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-21T14:54:11+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code propre: Non aux abréviations]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/21/code-propre-non-aux-abreviations/"/>
    <updated>2013-08-21T14:46:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/21/code-propre-non-aux-abreviations</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour l'écriture du
<a href="http://lkdjiin.github.io/blog/2013/08/01/implementer-un-langage-sur-la-machine-virtuelle-parrot-partie-1/">langage Naam</a>,
je cherchais une implémentation toute
prête de l'algorithme
<a href="http://en.wikipedia.org/wiki/Shunting_yard_algorithm">Shunting Yard</a>
en Ruby. Je suis tombé sur
<a href="http://www.hokstad.com/operator-precedence-parser">cet article</a>
qui a retenu mon attention car l'auteur propose en plus
la sortie dans un arbre syntaxique. Ce qui est exactement ce que je voulais.
Par contre le code est une horreur à lire. Ça m'a donné l'idée d'une série
d'articles sur le refactoring (et ce que je pense être un code propre),
à partir d'exemples réels.</p>

<!-- more -->


<h2>Une abréviation ne veut pas forcement dire ce que vous pensez</h2>

<p>Du moins 99 fois sur 100 une abréviation est ambigue. Voyez le code suivant:</p>

<p><code>ruby
Oper = Struct.new(:pri,:sym,:type)
</code></p>

<p>Une seule ligne de code et trois abréviations (même quatre en comptant le
<code>Struct</code>, mais là dessus je n'ai pas la main). Que peut bien vouloir dire
<code>Oper</code> ? Operator, Operand, Operation ? Et que veut dire <code>pri</code> ? Primary,
priority, private ? Et pour <code>sym</code>, est-ce symbol ou symlink ou autre chose ?</p>

<p>Comparez avec la version suivante:</p>

<p><code>ruby
Operator = Struct.new(:priority, :symbol, :type)
</code></p>

<p>Laquelle vous semble la plus lisible ?  De prime abord on peut penser qu'il est
simple de déduire la signification d'un nom grâce au contexte. Mais je suis
persuadé du contraire.</p>

<p>D'abord, penser au contexte demande au lecteur de fournir un effort
intellectuel. Et cette énergie serait mieux utilisée à résoudre un
problème, à étendre le code, plutôt qu'à le décrypter.
Un code est souvent assez complexe par lui-même, pourquoi
demander un effort supplémentaire inutile au lecteur ?</p>

<p>Ensuite ça n'est pas seulement une question de contexte, mais aussi
de personne. Pour untel, oper est clairement l'abréviation d'operand, alors
que pour tel autre c'est clairement l'abréviation d'operator. Tout dépend
du vécu de la personne en question. Pourquoi mettre de l'ambiguité dans
nos codes ?</p>

<p>Voici un autre exemple:</p>

<p><code>ruby
o = @ostack.pop
if o.type == :lp
  @ostack &lt;&lt; o if pri &gt; 0
  return
end
@out.oper(o)
</code></p>

<p>Qu'est-ce que <code>o</code>, <code>lp</code>, <code>ostack</code> ? Imaginez le temps que prendra
la compréhension d'une trentaine de lignes comme celles-ci. Et maintenant
comparez avec ce qui suit:</p>

<p><code>ruby
an_operator = @operators.pop
if an_operator.type == :left_parenthesis
  @operators &lt;&lt; an_operator if priority &gt; 0
  return
end
@output.operator(an_operator)
</code></p>

<p>C'est plus verbeux, mais même si vous ne connaissez pas Ruby, une simple
lecture suffit pour comprendre ce que fait le code. Remarquez que j'ai
seulement supprimé les abréviations, il y aurait d'autres choses à dire
sur le refactoring de ce code mais ce sera pour un autre article.</p>

<p>J'espère avoir convaincu les sceptiques.
Pour finir je dois faire mon meaculpa: je me rends compte que j'utilise
bien trop d'abréviations dans mon code. À partir d'aujourd'hui, j'arrête ;)</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 10: émettre le code assembleur]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/20/implementer-un-langage-sur-parrot-partie-10-emettre-le-code-assembleur/"/>
    <updated>2013-08-20T10:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/20/implementer-un-langage-sur-parrot-partie-10-emettre-le-code-assembleur</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Maintenant qu'on a
<a href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/">vérifié la syntaxe</a>
de notre petit programme, on peut sortir le code assembleur PIR:</p>

<p><code>ruby lib/naam/main.rb
def self.run(filename)
  # ...
  comp = Compiler.new
  comp.compile(units.dup)
end
</code></p>

<!-- more -->


<p>Voici le module Emitter:</p>

<p>``` ruby lib/naam/emitter.rb
module Naam
  module Emitter</p>

<pre><code># Output the main procedure.
#
# series - An Array of String.
#
# Examples
#
#   Emitter.main(["foo(4)", "bar(-1)"]
#   # =&gt; .sub main :main
#   # =&gt;     .local int f
#   # =&gt;     f = foo(4)
#   # =&gt;     say f
#   # =&gt;     f = bar(-1)
#   # =&gt;     say f
#   # =&gt; .end
#
# Returns nothing.
def self.main(series)
  unless series.empty?
    puts
    puts ".sub main :main"
    puts "    .local int f"
    series.each do |str|
      puts "    f = #{str}"
      puts "    say f"
    end
    puts ".end"
  end
end

# Dispatch different kind of emit message.
#
# type   - A Symbol in :function_header, :function_footer,
#          :if_clause, :else_clause and :label.
# series - An Array of LexicalUnit.
# label  - Hash like { label: "NAME", value: "123" }. Could be nil.
#
# Returns nothing.
def self.emit(type, series, label)
  case type
  when :function_header then function_header(series)
  when :function_footer then function_footer
  when :if_clause then if_clause(series, label)
  when :else_clause then else_clause(series)
  when :label then label(series, label)
  else
    raise Error
  end
end

def self.function_header(series)
  puts ".sub " + series[0].value
  puts "    .param int " + series[2].value
  puts "    .local int result"
  puts
end

def self.function_footer
  puts "RETURN:"
  puts "    .return(result)"
  puts ".end"
end

def self.if_clause(series, label)
  puts "    if #{series[2].value} #{series[3].value} #{series[4].value} " +
       "goto #{label[:label]}"
end

def self.else_clause(series)
  puts "    result = #{series[0].value}"
  puts "    goto RETURN"
end

def self.label(series, label)
  puts label[:label] + ":"
  puts "    result = #{label[:value]}"
  puts "    goto RETURN"
end
</code></pre>

<p>  end
end
```</p>

<p>Et voilà quelques morceaux choisis dans la class Compiler pour montrer
son utilisation:</p>

<p>``` ruby lib/naam/compiler.rb
module Naam</p>

<p>  # Public: Here we transform a list of lexical units in a PIR source
  # code. At least this is the goal.
  #
  # The logic of this class try follow the grammar of Naam (see the file
  # grammar.md).
  class Compiler</p>

<pre><code>def initialize
  @series = []
  @current_label = "LABEL0000"
  @labels = []
  @main = []
end

# Public: Compile lexical units from a Naam program in a PIR
# program.
#
# units - Array of LexicalUnits
#
# Returns nothing.
def compile units
  @units = units
  program
end

private

# This is the entry rule.
#
# Returns nothing.
def program
  while @units.size &gt; 0
    @series = []
    case @units.first.type
    when :eol then accept(:eol)
    else
      instruction
    end
  end
  @labels.each {|lbl| emit(:label, lbl) }
  emit(:function_footer)
  Emitter.main(@main)
end

# ...

# Returns nothing.
def function_def
  accept_series(:word, :paro, :word, :parc, :affect, :eol)
  emit(:function_header)
  if_clause while if_clause?
  else_clause
end

# ...

# Send a message to Emitter module.
#
# type  - A Symbol (see Emitter).
# label - A Hash composed of:
#         :label - The label name as a String.
#         :value - The String value that will be returned by
#                  PIR instructions for this label.
#         By default, label is nil and unused.
#
# Returns nothing.
def emit(type, label = nil)
  Emitter.emit(type, @series, label)
  @series = []
end

# Get a label.
#
# value - String value associated to the label.
#
# Examples
#
#   next_label("123")
#   # =&gt; { label: "LABEL0000", value: "123" }
#   next_label("-9")
#   # =&gt; { label: "LABEL0001", value: "-9" }
#
# Returns the Hash label.
def next_label(value)
  temp = { label: @current_label, value: value }
  @labels &lt;&lt; temp
  @current_label = @current_label.next
  temp
end
</code></pre>

<p>  end
end
```</p>

<p>Maintenant que je le montre, je me rends compte que ce code n'est pas
terrible. Bien que le fichier source à compiler soit extremement simple,
je suis déjà obligé de faire un tas de contorsions, notamment pour sortir
la procédure main. Je pensais que c'était une bonne idée de méler
vérification de la syntaxe et production du code assembleur pour montrer
les relations entre ces deux phases, mais visiblement ça n'aide pas
à la clarté du code. La meilleure solution pour m'en sortir est, je pense,
de me servir d'un AST (Arbre syntaxique abstrait). La prochaine fois je
parlerais donc de l'AST.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 9: la syntaxe]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe/"/>
    <updated>2013-08-18T08:01:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/18/implementer-un-langage-sur-parrot-partie-9-la-syntaxe</id>
    <content type="html"><![CDATA[<p>Après avoir écrit un
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">tokenizer</a>,
avoir produit les <a href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/">unités lexicales</a>
et avoir défini
<a href="http://lkdjiin.github.io/blog/2013/08/17/implementer-un-langage-sur-parrot-partie-8-la-grammaire/">une grammaire</a>
pour le langage Naam, je passe maintenant à la vérification de la syntaxe.</p>

<!-- more -->


<p>La vérification de la syntaxe se passe dans la classe <code>Compiler</code>. <em>&ndash; C'est pas
le meilleur choix de nom et ça changera par la suite &ndash;</em>. Basiquement, cette
classe ne fait que suivre la logique de la grammaire.</p>

<p>``` ruby lib/naam/compiler.rb
class Compiler</p>

<p>  # units &ndash; Array of LexicalUnits
  def compile units</p>

<pre><code>@units = units
program
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def program</p>

<pre><code>while @units.size &gt; 0
  case @units.first.type
  when :eol then accept(:eol)
  else
    instruction
  end
end
</code></pre>

<p>  end</p>

<p>  def instruction</p>

<pre><code>case @units.first.type
when :keyword then print_statement
when :word then function_def
else
  raise Error
end
</code></pre>

<p>  end</p>

<p>  def print_statement</p>

<pre><code>accept(:keyword, 'print')
accept_series(:word, :paro, :int, :parc, :eol)
</code></pre>

<p>  end</p>

<p>  def function_def</p>

<pre><code>accept_series(:word, :paro, :word, :parc, :affect, :eol)
if_clause while if_clause?
else_clause
</code></pre>

<p>  end</p>

<p>  def if_clause</p>

<pre><code>accept(:int)
accept(:keyword, 'if')
test
accept(:eol)
</code></pre>

<p>  end</p>

<p>  def else_clause</p>

<pre><code>accept(:int)
accept(:keyword, 'else')
accept(:eol)
</code></pre>

<p>  end</p>

<p>  def test</p>

<pre><code>accept_series(:word, :op, :int)
</code></pre>

<p>  end</p>

<p>  def accept(type, value = &lsquo;&rsquo;)</p>

<pre><code>unit = @units.slice!(0)
raise Error unless unit.type == type
if value != ''
  raise Error unless unit.value == value
end
</code></pre>

<p>  end</p>

<p>  def accept_series(*args)</p>

<pre><code>args.each {|arg| accept(arg) }
</code></pre>

<p>  end</p>

<p>  def if_clause?</p>

<pre><code>@units[1].type == :keyword &amp;&amp; @units[1].value == 'if'
</code></pre>

<p>  end
end
```</p>

<p>Quelques commentaires sur ce code:</p>

<p>``` ruby
def instruction
  # &hellip;
  else</p>

<pre><code>raise Error
</code></pre>

<p>  end
end
```</p>

<p>Plusieurs fois j'utilise la classe <code>Error</code>, qui n'existe pas. C'est parce que
je ne veux pas encore réfléchir à la gestion des erreurs. Les seuls cas qui
m'intéressent pour l'instant sont ceux où ça fonctionne.</p>

<p>`&ldquo; ruby
def accept(type, value = &rdquo;)
  unit = @units.slice!(0)
  raise Error unless unit.type == type
  if value != &lsquo;&rsquo;</p>

<pre><code>raise Error unless unit.value == value
</code></pre>

<p>  end
end
```</p>

<p>C'est la méthode <code>accept</code>, toute simple, qui effectue la vérification
de la syntaxe en comparant l'unité lexicale attendue avec celle réellement
disponible. On constate que les unités lexicales (représentées par <code>@units</code>)
sont détruites au fur et à mesure de leur consommation.</p>

<p>La prochaine, il sera enfin temps d'émettre le code PIR.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Écrire un DSL en Ruby facilement avec Docile]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile/"/>
    <updated>2013-08-14T10:41:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/14/ecrire-un-dsl-en-ruby-facilement-avec-docile</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Je suis en train de lire «<a href="http://www.wolframscience.com/">A new kind of science</a>» de Stephen Wolfram
et ça me donne envie de me replonger dans les <a href="https://fr.wikipedia.org/wiki/Automate_cellulaire">automates cellulaires</a>.
Le jeu de la vie est sûrement le programme que j'ai écrit le plus souvent,
mais curieusement jamais en Ruby.</p>

<!-- more -->


<p>J'ai commencé à écrire un
<a href="https://github.com/lkdjiin/cellula">framework pour automate cellulaire</a>,
qui n'aboutira peut-être pas faute de temps. Quoiqu'il en soit, je voudrais
que ce framework soit utilisable par des non-développeurs, d'où le recours
à un DSL (Domain Specific Language). Et pour développer mon DSL, je n'ai
pas trouver plus simple que la gem
<a href="https://github.com/ms-ati/docile">docile</a>.</p>

<p>Voici le DSL que je voudrais:</p>

<p><code>ruby my_automaton.rb
automaton "Test Automaton" do
  dimensions       2
  type             :elementary
  width            100
  height           100
  rule             :b36s26
  pattern          :random
  live_probability 0.1789
end
</code></p>

<p>Docile encourage l'utilisation du design pattern builder. Alors allons-y
pour une classe builder qui va contenir les valeurs par défaut de notre
futur Automaton:</p>

<p>``` ruby automaton_builder.rb
class AutomatonBuilder
  def initialize(name)</p>

<pre><code>@name = name
@dimensions = 2
@type = :elementary
@width = 0
@height = 0
@rule = :b3s23
@pattern = :random
@live_probability = 0.5
</code></pre>

<p>  end</p>

<p>  def dimensions(val); @dimensions = val; self; end
  def type(val); @type = val; self; end
  def width(val); @width = val; self; end
  def height(val); @height = val; self; end
  def rule(val); @rule = val; self; end
  def pattern(val); @pattern = val; self; end
  def live_probability(val); @live_probability = val; self; end</p>

<p>  def build</p>

<pre><code>Automaton.new(@name, @dimensions, @type, @width, @height,
              @rule, @pattern, @live_probability)
</code></pre>

<p>  end
end
```</p>

<p>Il nous faut maintenant une classe Automaton:</p>

<p>``` ruby automaton.rb
class Automaton
  def initialize(name, dimensions, type, width, height, rule,</p>

<pre><code>            pattern, live_probability)
@name = name
@dimensions = dimensions
@type = type
@width = width
@height = height
@rule = rule
@pattern = pattern
@live_probability = live_probability
</code></pre>

<p>  end</p>

<p>  def run</p>

<pre><code>puts "#{@name} running"
</code></pre>

<p>  end
end
```</p>

<p>Et pour finir, on demande à Docile d'évaluer notre DSL puis on charge le
fichier <code>my_automaton.rb</code>. Il ne reste plus qu'à lancer la machine:</p>

<p>``` ruby main.rb
require &lsquo;docile&rsquo;
require &lsquo;./automaton_builder&rsquo;
require &lsquo;./automaton&rsquo;</p>

<p>def automaton(name, &amp;block)
  @auto = Docile.dsl_eval(AutomatonBuilder.new(name), &amp;block).build
end</p>

<p>load ARGV[0]</p>

<p>@auto.run
```</p>

<p>La boucle est bouclée. Vous remarquerez que la méthode <code>automaton</code> définie
dans <code>main.rb</code> ci-dessus est celle qui est utilisée dans le DSL
(<code>my_automaton.rb</code>).</p>

<pre><code>$ ruby ./main.rb my_automaton.rb 
Test Automaton running
</code></pre>

<p>Et voilà. C'est presque trop facile d'écrire un DSL avec Docile…</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 7: le lexer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/"/>
    <updated>2013-08-13T10:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir vu
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">la tokenisation</a>,
on continue aujourd'hui l'analyse
lexicale avec la production des lexèmes.</p>

<!-- more -->


<h2>Qu'est-ce qu'un lexème ?</h2>

<p>Si vous avez le temps, lisez <a href="http://fr.wikipedia.org/wiki/Lex%C3%A8me">l'article de wikipédia</a>.
Sinon voici ma définition pour le domaine qui nous intéresse:</p>

<p><blockquote><p>Un lexème (unité lexicale) est un token auquel on attache un type<br/>très basique.</p></blockquote></p>

<p>Par exemple, la phrase «Je mange.» donnerait:</p>

<pre><code>mot:         Je
mot:         mange
ponctuation: .
</code></pre>

<p>On pourrait produire un <em>lexer</em> plus intelligent qui donnerait:</p>

<pre><code>mot:         Je
verbe:       mange
ponctuation: .
</code></pre>

<p>Les langages informatiques étant beaucoup moins complexe que les
langages humains, écrire un <em>lexer</em> est souvent une formalité.</p>

<h2>Objectif</h2>

<p>L'objectif d'aujourd'hui est d'obtenir quelque chose comme ça:</p>

<p>``` console
[~/devel/ruby/naam]$ bin/naam spec/fixtures/sign.naam</p>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca2f8 @type=:word, @value=&ldquo;sign&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca258 @type=:paro, @value=&ldquo;(&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca0b4 @type=:word, @value=&ldquo;n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9fec @type=:parc, @value=&ldquo;)&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9ee8 @type=:affect, @value=&ldquo;=&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9de4 @type=:eol, @value=&ldquo;\n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9b8c @type=:int, @value=&ldquo;1&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc99d4 @type=:keyword, @value=&ldquo;if&rdquo;></h1>

<p>&hellip;
```</p>

<h2>Le code</h2>

<p>Le code source du projet est sur Github, à la
<a href="https://github.com/lkdjiin/naam/tree/v0.0.2">version 0.0.2</a>.</p>

<p>Bien souvent l'étape de tokenisation et de lexification peuvent être
regroupées en une seule et même étape. Là, j'ai choisi de les séparer pour
avoir un code plus simple à montrer. Tout d'abord, voici la classe
<code>lexical_unit</code>:</p>

<p>``` ruby lib/naam/parser/lexical_unit.rb
module Naam::Parser</p>

<p>  # A container for lexical units.
  class LexicalUnit</p>

<pre><code>private_class_method :new

attr_reader :type, :value

# type  - Symbol
# value - String
def initialize type, value
  @type = type
  @value = value
end

def self.int value ; new(:int, value) ; end
def self.word value ; new(:word, value) ; end
def self.keyword value ; new(:keyword, value) ; end
def self.op value ; new(:op, value) ; end
def self.paro ; new(:paro, "(") ; end
def self.parc ; new(:parc, ")") ; end
def self.eol ; new(:eol, "\n") ; end
def self.affect ; new(:affect, "=") ; end
</code></pre>

<p>  end
end
```</p>

<p>J'ai beau chercher, je ne trouve rien à dire d'intelligent sur cette classe.
J'avais prévenu: c'est très simple. Et ça continue, on passe maintenant au
<em>lexer</em> proprement dit, qui est tout aussi simple:</p>

<p>``` ruby lib/naam/parser/lexer.rb
module Naam::Parser
  class Lexer</p>

<pre><code>def from_token(token)
  if token == '('
    LexicalUnit.paro()
  elsif token == ')'
    LexicalUnit.parc()
  elsif token == "\n"
    LexicalUnit.eol()
  elsif token == '='
    LexicalUnit.affect()
  elsif token == '&lt;'
    LexicalUnit.op(token)
  elsif token == '&gt;'
    LexicalUnit.op(token)
  elsif token == 'if'
    LexicalUnit.keyword(token)
  elsif token == 'else'
    LexicalUnit.keyword(token)
  elsif token =~ /[+|-]?\d+/
    LexicalUnit.int(token)
  else
    LexicalUnit.word(token)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Voilà, on a fini l'analyse lexicale, c'est à dire la première phase
de l'écriture d'un compilateur. La prochaine fois je parlerais de la
grammaire de Naam, ce qui enclenchera la phase d'analyse syntaxique.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
