<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-07-13T11:35:57+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Je veux mon blog Octopress en français]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais/"/>
    <updated>2013-07-13T07:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais</id>
    <content type="html"><![CDATA[<p>Octopress n'est pas prévu pour être internationnalisé et localisé. C'est
comme ça. Je ne pense pas que ça change avant un moment, si jamais ça
change. Suite à une
<a href="https://twitter.com/lkdjiin/status/355699071895343105">conversation sur twitter</a>
avec @octopress, on m'a
conseillé de regarder du coté de Jekyll. Je le ferais surement, mais plus
tard. Je ne connais pas du tout Jekyll et je veux mon blog Octopress en
français maintenant. (Ok, je fais un caprice)</p>

<!-- more -->


<p>Je vais vous montrer comment j'ai fait pour internationnalisé Octopress.
Si vous en avez envie vous aussi, vous pourrez suivre cette procédure
pour ne pas vous prendre la tête à chercher vous-même.</p>

<h2>Les titres</h2>

<p>Les titres des articles (aussi dans le volet à droite) sont capitalisés à
l'extrème. Chaque première lettre d'un mot est en majuscule.  Alors,
capitaliser chaque mot d'un titre, ça fait cool en anglais, mais en français
c'est juste horrible et illisible. Pour arranger ça, on change la méthode
<code>titlecase</code> dans <code>plugins/titlecase.rb</code>.</p>

<p><code>ruby plugins/titlecase.rb
def titlecase
  capitalize
end
</code></p>

<h2>Les dates</h2>

<p>Je veux les dates en français, bien sûr. Les changements sont à faire
dans <code>plugins/date.rb</code>, et je vais vraiment y aller avec mes gros sabots.
Tout d'abord il faut modifier la méthode <code>ordinalize</code> ainsi:</p>

<p>``` ruby méthode ordinalize dans plugins/date.rb</p>

<h1>Returns an ordinal date eg 1 juillet 2007 &ndash;> 1er juillet 2007</h1>

<p>def ordinalize(date)
  date = datetime(date)
  &ldquo;#{ordinal(date.strftime(&lsquo;%e&rsquo;).to_i)} &rdquo; +
  &ldquo;#{french_month(date.strftime(&lsquo;%-m&rsquo;))} &rdquo; +
  &ldquo;#{date.strftime(&lsquo;%Y&rsquo;)}&rdquo;
end
```</p>

<p>Puis on modifie la méthode <code>ordinal</code> de cette façon:</p>

<p>``` ruby méthode ordinal dans plugins/date.rb</p>

<h1>Returns an ordinal number. 1 &ndash;> 1er.</h1>

<p>def ordinal(number)
  if number.to_i == 1</p>

<pre><code>"#{number}&lt;span&gt;er&lt;/span&gt;"
</code></pre>

<p>  else</p>

<pre><code>"#{number}"
</code></pre>

<p>  end
end
```</p>

<p>Et enfin il faut ajouter la méthode <code>french_month</code>. C'est très basique, mais ça
fonctionne:</p>

<p>``` ruby méthode french_month dans plugins/date.rb</p>

<h1>Returns a string french month. 1 &ndash;> janvier, 2 &ndash;> février, etc.</h1>

<p>def french_month(number)
  case number.to_i
  when 1; &ldquo;janvier&rdquo;
  when 2; &ldquo;février&rdquo;
  when 3; &ldquo;mars&rdquo;
  when 4; &ldquo;avril&rdquo;
  when 5; &ldquo;mai&rdquo;
  when 6; &ldquo;juin&rdquo;
  when 7; &ldquo;juillet&rdquo;
  when 8; &ldquo;août&rdquo;
  when 9; &ldquo;septembre&rdquo;
  when 10; &ldquo;octobre&rdquo;
  when 11; &ldquo;novembre&rdquo;
  when 12; &ldquo;décembre&rdquo;
  end
end
```</p>

<p>Si vous êtes en Ruby 1.9.3, il ne faut pas oublier de mettre un encodage
au début du fichier, à cause des caractères accentués :</p>

<p>``` ruby 1ère ligne de plugins/date.rb</p>

<h1>&ndash;<em>&ndash; encoding: utf-8 &ndash;</em>&ndash;</h1>

<p>```</p>

<h2>Les chaînes de caractères embarquées</h2>

<p>Rien de bien intéressant pour cette partie, il suffit de remplacer une
chaîne par une autre. Je vais donc me contenter de dresser la liste.</p>

<ul>
<li>&ldquo;Read on&rdquo; : <code>_config.yml</code></li>
<li>&ldquo;Recent Posts&rdquo; : <code>source/_includes/aside/recent_posts.html</code></li>
<li>&ldquo;Search&rdquo; : <code>source/_includes/navigation.html</code></li>
<li>&ldquo;Posted by&rdquo; : <code>source/_includes/post/author.html</code></li>
<li>&ldquo;posted in&rdquo; : <code>source/_includes/archive_post.html</code></li>
</ul>


<h3>Category:</h3>

<p>Pour remplacer «Category: » par «Catégorie : », c'est un peu différent.
Il faut <em>ajouter</em> la ligne suivante dans <code>_config.yml</code>:</p>

<p><code>
category_title_prefix: "Catégorie : "
</code></p>

<h2>Conclusion</h2>

<p>Alors voilà, j'ai bien conscience que certaines modifications risquent ne plus
fonctionner après une mise à jour d'Octopress… Mais c'est tout ce que j'ai
trouver pour faire ça dans l'heure.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby et les eigenclass]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/11/ruby-et-les-eigenclass/"/>
    <updated>2013-07-11T10:24:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/11/ruby-et-les-eigenclass</id>
    <content type="html"><![CDATA[<p>Dans l'
<a href="http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe/">article d'hier</a>,
je cherchais un intérêt à <code>class &lt;&lt; self</code> dans la
définition d'une classe, et je n'en ai pas trouvé.
Aujourd'hui je vais appronfondir le sujet et parler des eigenclass(es) en Ruby.
Il se trouve que Ruby est un langage orienté objet, contrairement à…
(au hasard) Java…</p>

<!-- more -->


<p>Ok, c'est pour rire. Bien sûr que Java est un langage OO. Mais quand même,
par rapport à Ruby je dirais plutôt que Java est un langage orienté classe.
Avec Ruby, tout est objet, même les classes ! Je re-dis ça autrement
pour que ce soit
bien clair : en Ruby les classes sont des objets comme les autres.
Voyons comment ça fonctionne, au travers des eigenclass(es):</p>

<p>``` ruby
class Engin
  def roule</p>

<pre><code>"Je roule"
</code></pre>

<p>  end
end</p>

<p>voiture = Engin.new
moto = Engin.new</p>

<p>voiture.roule</p>

<h1>=> &ldquo;Je roule&rdquo;</h1>

<p>moto.roule</p>

<h1>=> &ldquo;Je roule&rdquo;</h1>

<p>```</p>

<p>On a créé une classe <code>Engin</code> et instancié deux objets à partir de cette
classe, <code>voiture</code> et <code>moto</code>. La classe a joué le rôle d'un moule, à partir
duquel les deux objets ont été fabriqués et leurs comportements sont
identiques. Maintenant, si on veut spécialiser le comportement de <code>moto</code>,
on pourrait utiliser l'héritage ou les mixins. Ce qui serait très bien si
on devait gérer des dizaines d'objets au comportement similaire. Mais si on
a un seul objet qui diffère, devoir écrire une nouvelle classe pour un seul
objet est un peu lourd. Grâce au eigenclass(es), Ruby permet de changer le
comportement d'un objet pendant l'execution.</p>

<p>``` ruby
class &lt;&lt; moto
  def wheeling</p>

<pre><code>"Wahooo"
</code></pre>

<p>  end
end
```</p>

<p>Ou bien avec la syntaxe suivante, qui fait la même chose:</p>

<p><code>ruby
def moto.wheeling
  "Wahooo"
end
</code></p>

<p>On vient d'ajouter une méthode à l'objet <code>moto</code> de classe <code>Engin</code>, mais pas
à l'objet <code>voiture</code>, pourtant lui aussi de classe <code>Engin</code>. Pour vérifier:</p>

<p>``` ruby
moto.wheeling</p>

<h1>=> &ldquo;Wahooo&rdquo;</h1>

<p>voiture.wheeling</p>

<h1>=> NoMethodError: undefined method `wheeling'</h1>

<p>voiture.class == moto.class</p>

<h1>=> true</h1>

<p>```</p>

<p>Comment Ruby gère ce système ? C'est surprenant de simplicité. Ruby interpose
une nouvelle classe, anonyme, entre l'objet et sa hiérarchie de classes. C'est
cette nouvelle classe, qu'on appelle eigenclass.
L'eigenclass ne comprend que les comportements ajoutés à «son» objet.  Dans
notre exemple, l'eigenclass de <code>moto</code> ne comporte que la méthode <code>wheeling</code>.
Le système de classe de Ruby est complexe, mais pour la partie qui nous
intéresse ici cela donne ça:</p>

<pre><code>moto &lt; eigenclass &lt; Engin &lt; Object
</code></pre>

<p>À la place de «eigenclass», on peut lire et entendre parfois «singleton» ou
«metaclass», c'est la même chose. D'ailleurs, pour obtenir la liste des
méthodes de la «ghost class» (encore un autre nom) on peut utiliser la
méthode <code>singleton_methods</code>:</p>

<p>``` ruby
moto.singleton_methods</p>

<h1>=> [</h1>

<h1>=>   [0] wheeling() #&lt;Engin:0xa05585c></h1>

<h1>=> ]</h1>

<p>```</p>

<p>J'ai dit au début qu'une classe est un objet comme un autre. Donc ce qui
fonctionne pour <code>moto</code> doit aussi fonctionner pour <code>Engin</code>:</p>

<p>``` ruby
def Engin.definition
  &ldquo;Un truc qui roule&rdquo;
end</p>

<p>Engin.definition</p>

<h1>=> &ldquo;un truc qui roule&rdquo;</h1>

<p>Engin.singleton_methods</p>

<h1>=> [</h1>

<h1>=>     [0] definition() Engin</h1>

<h1>=> ]</h1>

<p>```</p>

<p>Tout pareil ! <code>definition</code> a été ajouté à l'eigenclass de <code>Engin</code>.
Autrement dit, quand vous ajouter une méthode de classe à une classe, en fait
vous l'ajouter à son eigenclass.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quel est l'intérêt de cette syntaxe ?]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe/"/>
    <updated>2013-07-10T09:04:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/10/quel-est-linteret-de-cette-syntaxe</id>
    <content type="html"><![CDATA[<p>En googlant sur <code>ruby design pattern factory</code> je suis tombé sur un
<a href="http://blog.rubybestpractices.com/posts/gregory/059-issue-25-creational-design-patterns.html">post intéressant</a>.
Non, je ne vais pas vous parler de design pattern dans cet article. L'exemple
qui m'a plus particulierment intrigué est le suivant:</p>

<p>``` ruby Exemple original
class AdjacencyMatrix<br/>
  class &lt;&lt; self</p>

<pre><code>def undirected(data)  
  new(data)  
end  

def directed(data)  
  new(data,true)  
end  

private :new  
</code></pre>

<p>  end</p>

<p>  def initialize(data, directed=false)</p>

<pre><code>#...  
</code></pre>

<p>  end<br/>
end</p>

<p>undirected_matrix = AdjacencyMatrix.undirected(data) <br/>
directed_matrix   = AdjacencyMatrix.directed(data)
```</p>

<p>Pourquoi cet exemple m'a intrigué ? Pas parce qu'il parle de matrice, je vous
rassure. Je ne comprends pas grand chose aux matrices, et je n'ai jamais
entendu parler d'«adjacency matrix». Si cet exemple m'intrigue, c'est parce que
je ne comprends pas, <em>à priori</em>, l'intérêt du <code>class &lt;&lt; self</code>.  Il me semble
que je peux réécrire ça sans <code>class &lt;&lt; self</code> et que le résultat serait le même.</p>

<!-- more -->


<p>Alors allons y. Voilà le nouveau bout de code qui fait la même chose que
le précédent:</p>

<p>``` ruby Seconde version
class AdjacencyMatrix<br/>
  def self.undirected(data)</p>

<pre><code>new(data)  
</code></pre>

<p>  end</p>

<p>  def self.directed(data)</p>

<pre><code>new(data,true)  
</code></pre>

<p>  end</p>

<p>  private_class_method :new</p>

<p>  def initializedata, directed=false)</p>

<pre><code>#...  
</code></pre>

<p>  end
end</p>

<p>undirected_matrix = AdjacencyMatrix.undirected(data)
directed_matrix   = AdjacencyMatrix.directed(data)
```</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Surround your pullquote like this {" text to be quoted "}</p>

<h2>Quel est l'intérêt de <code>class &lt;&lt; self</code> ?</h2>

<p>Quoi qu'il en soit, je n'ai toujours pas de réponse à ma première question:
«quel est l'intérêt de <code>class &lt;&lt; self</code>» dans cet exemple précis.
Il est possible que dans une ancienne
version de Ruby, il n'y avait pas moyen de faire autrement et qu'on ai gardé
l'habitude ? Peut-être qu'il n'y a aucune réponse ? Je vais donc aller faire un
tour du coté de la divinité StackOverflow pour tenter d'y voir plus clair. Je
vous tient au courant dans un futur article si je trouve quelque chose.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
