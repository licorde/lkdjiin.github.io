<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : ruby | lkdjiin's blog]]></title>
  <link href="http://lkdjiin.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lkdjiin.github.io/"/>
  <updated>2013-08-13T10:33:08+02:00</updated>
  <id>http://lkdjiin.github.io/</id>
  <author>
    <name><![CDATA[Xavier Nayrac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implémenter un langage sur Parrot - partie 7: le lexer]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer/"/>
    <updated>2013-08-13T10:27:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/13/implementer-un-langage-sur-parrot-partie-7-le-lexer</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-2'>Niveau : <span>intermédiaire</span></div></p>

<p>Après avoir vu
<a href="http://lkdjiin.github.io/blog/2013/08/12/parrot-6-ecrire-le-tokenizer/">la tokenisation</a>,
on continue aujourd'hui l'analyse
lexicale avec la production des lexèmes.</p>

<!-- more -->


<h2>Qu'est-ce qu'un lexème ?</h2>

<p>Si vous avez le temps, lisez <a href="http://fr.wikipedia.org/wiki/Lex%C3%A8me">l'article de wikipédia</a>.
Sinon voici ma définition pour le domaine qui nous intéresse:</p>

<p><blockquote><p>Un lexème (unité lexicale) est un token auquel on attache un type<br/>très basique.</p></blockquote></p>

<p>Par exemple, la phrase «Je mange.» donnerait:</p>

<pre><code>mot:         Je
mot:         mange
ponctuation: .
</code></pre>

<p>On pourrait produire un <em>lexer</em> plus intelligent qui donnerait:</p>

<pre><code>mot:         Je
verbe:       mange
ponctuation: .
</code></pre>

<p>Les langages informatiques étant beaucoup moins complexe que les
langages humains, écrire un <em>lexer</em> est souvent une formalité.</p>

<h2>Objectif</h2>

<p>L'objectif d'aujourd'hui est d'obtenir quelque chose comme ça:</p>

<p>``` console
[~/devel/ruby/naam]$ bin/naam spec/fixtures/sign.naam</p>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca2f8 @type=:word, @value=&ldquo;sign&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca258 @type=:paro, @value=&ldquo;(&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fca0b4 @type=:word, @value=&ldquo;n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9fec @type=:parc, @value=&ldquo;)&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9ee8 @type=:affect, @value=&ldquo;=&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9de4 @type=:eol, @value=&ldquo;\n&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc9b8c @type=:int, @value=&ldquo;1&rdquo;></h1>

<h1>&lt;Naam::Parser::LexicalUnit:0x8fc99d4 @type=:keyword, @value=&ldquo;if&rdquo;></h1>

<p>&hellip;
```</p>

<h2>Le code</h2>

<p>Le code source du projet est sur Github, à la
<a href="https://github.com/lkdjiin/naam/tree/v0.0.2">version 0.0.2</a>.</p>

<p>Bien souvent l'étape de tokenisation et de lexification peuvent être
regroupées en une seule et même étape. Là, j'ai choisi de les séparer pour
avoir un code plus simple à montrer. Tout d'abord, voici la classe
<code>lexical_unit</code>:</p>

<p>``` ruby lib/naam/parser/lexical_unit.rb
module Naam::Parser</p>

<p>  # A container for lexical units.
  class LexicalUnit</p>

<pre><code>private_class_method :new

attr_reader :type, :value

# type  - Symbol
# value - String
def initialize type, value
  @type = type
  @value = value
end

def self.int value ; new(:int, value) ; end
def self.word value ; new(:word, value) ; end
def self.keyword value ; new(:keyword, value) ; end
def self.op value ; new(:op, value) ; end
def self.paro ; new(:paro, "(") ; end
def self.parc ; new(:parc, ")") ; end
def self.eol ; new(:eol, "\n") ; end
def self.affect ; new(:affect, "=") ; end
</code></pre>

<p>  end
end
```</p>

<p>J'ai beau chercher, je ne trouve rien à dire d'intelligent sur cette classe.
J'avais prévenu: c'est très simple. Et ça continue, on passe maintenant au
<em>lexer</em> proprement dit, qui est tout aussi simple:</p>

<p>``` ruby lib/naam/parser/lexer.rb
module Naam::Parser
  class Lexer</p>

<pre><code>def from_token(token)
  if token == '('
    LexicalUnit.paro()
  elsif token == ')'
    LexicalUnit.parc()
  elsif token == "\n"
    LexicalUnit.eol()
  elsif token == '='
    LexicalUnit.affect()
  elsif token == '&lt;'
    LexicalUnit.op(token)
  elsif token == '&gt;'
    LexicalUnit.op(token)
  elsif token == 'if'
    LexicalUnit.keyword(token)
  elsif token == 'else'
    LexicalUnit.keyword(token)
  elsif token =~ /[+|-]?\d+/
    LexicalUnit.int(token)
  else
    LexicalUnit.word(token)
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Voilà, on a fini l'analyse lexicale, c'est à dire la première phase
de l'écriture d'un compilateur. La prochaine fois je parlerais de la
grammaire de Naam, ce qui enclenchera la phase d'analyse syntaxique.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liste des abréviations de langages pour Pygments]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/08/04/liste-des-abreviations-de-langages-pour-pygments/"/>
    <updated>2013-08-04T09:26:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/08/04/liste-des-abreviations-de-langages-pour-pygments</id>
    <content type="html"><![CDATA[<p>La bibliothèque <a href="https://github.com/tmm1/pygments.rb">pygments.rb</a>
est un <em>wrapper</em> Ruby pour
<a href="http://pygments.org/">pygments</a>,
un <em>syntax highlighter</em> écrit en Python. J'ai cherché une liste des
abréviations supportées par l'application, sans la trouver. Je suis étonné
qu'une telle liste n'existe pas. J'ai peut-être mal cherché… Quoiqu'il en
soit voici cette liste, elle sera peut-être utile à quelqu'un d'autre:</p>

<!-- more -->


<pre><code>ABAP                      ["abap"]
ANTLR                     ["antlr"]
ANTLR With ActionScript Target ["antlr-as", "antlr-actionscript"]
ANTLR With C# Target      ["antlr-csharp", "antlr-c#"]
ANTLR With CPP Target     ["antlr-cpp"]
ANTLR With Java Target    ["antlr-java"]
ANTLR With ObjectiveC Target ["antlr-objc"]
ANTLR With Perl Target    ["antlr-perl"]
ANTLR With Python Target  ["antlr-python"]
ANTLR With Ruby Target    ["antlr-ruby", "antlr-rb"]
ActionScript              ["as", "actionscript"]
ActionScript 3            ["as3", "actionscript3"]
Ada                       ["ada", "ada95ada2005"]
ApacheConf                ["apacheconf", "aconf", "apache"]
AppleScript               ["applescript"]
AspectJ                   ["aspectj"]
Asymptote                 ["asy", "asymptote"]
Awk                       ["awk", "gawk", "mawk", "nawk"]
BBCode                    ["bbcode"]
BUGS                      ["bugs", "winbugs", "openbugs"]
Base Makefile             ["basemake"]
Bash                      ["bash", "sh", "ksh"]
Bash Session              ["console"]
Batchfile                 ["bat"]
Befunge                   ["befunge"]
BlitzMax                  ["blitzmax", "bmax"]
Boo                       ["boo"]
Brainfuck                 ["brainfuck", "bf"]
Bro                       ["bro"]
C                         ["c"]
C#                        ["csharp", "c#"]
C++                       ["cpp", "c++"]
CFEngine3                 ["cfengine3", "cf3"]
CMake                     ["cmake"]
CSS                       ["css"]
CSS+Django/Jinja          ["css+django", "css+jinja"]
CSS+Genshi Text           ["css+genshitext", "css+genshi"]
CSS+Lasso                 ["css+lasso"]
CSS+Mako                  ["css+mako"]
CSS+Myghty                ["css+myghty"]
CSS+PHP                   ["css+php"]
CSS+Ruby                  ["css+erb", "css+ruby"]
CSS+Smarty                ["css+smarty"]
CUDA                      ["cuda", "cu"]
Ceylon                    ["ceylon"]
Cheetah                   ["cheetah", "spitfire"]
Clojure                   ["clojure", "clj"]
CoffeeScript              ["coffee-script", "coffeescript"]
Coldfusion HTML           ["cfm"]
Common Lisp               ["common-lisp", "cl"]
Coq                       ["coq"]
Croc                      ["croc"]
Cython                    ["cython", "pyx"]
D                         ["d"]
DTD                       ["dtd"]
Darcs Patch               ["dpatch"]
Dart                      ["dart"]
Debian Control file       ["control"]
Debian Sourcelist         ["sourceslist", "sources.list"]
Delphi                    ["delphi", "pas", "pascal", "objectpascal"]
Diff                      ["diff", "udiff"]
Django/Jinja              ["django", "jinja"]
Duel                      ["duel", "Duel Engine", "Duel View", "JBST", "jbst", "JsonML+BST"]
Dylan                     ["dylan"]
ECL                       ["ecl"]
ERB                       ["erb"]
Elixir                    ["elixir", "ex", "exs"]
Elixir iex session        ["iex"]
Embedded Ragel            ["ragel-em"]
Erlang                    ["erlang"]
Erlang erl session        ["erl"]
Evoque                    ["evoque"]
FSharp                    ["fsharp"]
Factor                    ["factor"]
Fancy                     ["fancy", "fy"]
Fantom                    ["fan"]
Felix                     ["felix", "flx"]
Fortran                   ["fortran"]
GAS                       ["gas"]
GLSL                      ["glsl"]
Genshi                    ["genshi", "kid", "xml+genshi", "xml+kid"]
Genshi Text               ["genshitext"]
Gettext Catalog           ["pot", "po"]
Gherkin                   ["Cucumber", "cucumber", "Gherkin", "gherkin"]
Gnuplot                   ["gnuplot"]
Go                        ["go"]
GoodData-CL               ["gooddata-cl"]
Gosu                      ["gosu"]
Gosu Template             ["gst"]
Groff                     ["groff", "nroff", "man"]
Groovy                    ["groovy"]
HTML                      ["html"]
HTML+Cheetah              ["html+cheetah", "html+spitfire"]
HTML+Django/Jinja         ["html+django", "html+jinja"]
HTML+Evoque               ["html+evoque"]
HTML+Genshi               ["html+genshi", "html+kid"]
HTML+Lasso                ["html+lasso"]
HTML+Mako                 ["html+mako"]
HTML+Myghty               ["html+myghty"]
HTML+PHP                  ["html+php"]
HTML+Smarty               ["html+smarty"]
HTML+Velocity             ["html+velocity"]
HTTP                      ["http"]
Haml                      ["haml", "HAML"]
Haskell                   ["haskell", "hs"]
Hybris                    ["hybris", "hy"]
INI                       ["ini", "cfg"]
IRC logs                  ["irc"]
Io                        ["io"]
Ioke                      ["ioke", "ik"]
JAGS                      ["jags"]
JSON                      ["json"]
Jade                      ["jade", "JADE"]
Java                      ["java"]
Java Server Page          ["jsp"]
JavaScript                ["js", "javascript"]
JavaScript+Cheetah        ["js+cheetah", "javascript+cheetah", "js+spitfire", "javascript+spitfire"]
JavaScript+Django/Jinja   ["js+django", "javascript+django", "js+jinja", "javascript+jinja"]
JavaScript+Genshi Text    ["js+genshitext", "js+genshi", "javascript+genshitext", "javascript+genshi"]
JavaScript+Lasso          ["js+lasso", "javascript+lasso"]
JavaScript+Mako           ["js+mako", "javascript+mako"]
JavaScript+Myghty         ["js+myghty", "javascript+myghty"]
JavaScript+PHP            ["js+php", "javascript+php"]
JavaScript+Ruby           ["js+erb", "javascript+erb", "js+ruby", "javascript+ruby"]
JavaScript+Smarty         ["js+smarty", "javascript+smarty"]
Julia                     ["julia", "jl"]
Julia console             ["jlcon"]
Kconfig                   ["kconfig", "menuconfig", "linux-config", "kernel-config"]
Koka                      ["koka"]
Kotlin                    ["kotlin"]
LLVM                      ["llvm"]
Lasso                     ["lasso", "lassoscript"]
Lighttpd configuration file ["lighty", "lighttpd"]
Literate Haskell          ["lhs", "literate-haskell"]
LiveScript                ["live-script", "livescript"]
Logtalk                   ["logtalk"]
Lua                       ["lua"]
MAQL                      ["maql"]
MOOCode                   ["moocode"]
MXML                      ["mxml"]
Makefile                  ["make", "makefile", "mf", "bsdmake"]
Mako                      ["mako"]
Mason                     ["mason"]
Matlab                    ["matlab"]
Matlab session            ["matlabsession"]
MiniD                     ["minid"]
Modelica                  ["modelica"]
Modula-2                  ["modula2", "m2"]
MoinMoin/Trac Wiki markup ["trac-wiki", "moin"]
Monkey                    ["monkey"]
MoonScript                ["moon", "moonscript"]
Mscgen                    ["mscgen", "msc"]
MuPAD                     ["mupad"]
MySQL                     ["mysql"]
Myghty                    ["myghty"]
NASM                      ["nasm"]
Nemerle                   ["nemerle"]
NewLisp                   ["newlisp"]
Newspeak                  ["newspeak"]
Nginx configuration file  ["nginx"]
Nimrod                    ["nimrod", "nim"]
NumPy                     ["numpy"]
OCaml                     ["ocaml"]
Objective-C               ["objective-c", "objectivec", "obj-c", "objc"]
Objective-J               ["objective-j", "objectivej", "obj-j", "objj"]
Octave                    ["octave"]
Ooc                       ["ooc"]
Opa                       ["opa"]
OpenEdge ABL              ["openedge", "abl", "progress"]
PHP                       ["php", "php3", "php4", "php5"]
PL/pgSQL                  ["plpgsql"]
POVRay                    ["pov"]
Perl                      ["perl", "pl"]
PostScript                ["postscript"]
PostgreSQL SQL dialect    ["postgresql", "postgres"]
PostgreSQL console (psql) ["psql", "postgresql-console", "postgres-console"]
PowerShell                ["powershell", "posh", "ps1"]
Prolog                    ["prolog"]
Properties                ["properties"]
Protocol Buffer           ["protobuf"]
PyPy Log                  ["pypylog", "pypy"]
Python                    ["python", "py", "sage"]
Python 3                  ["python3", "py3"]
Python 3.0 Traceback      ["py3tb"]
Python Traceback          ["pytb"]
Python console session    ["pycon"]
RConsole                  ["rconsole", "rout"]
REBOL                     ["rebol"]
RHTML                     ["rhtml", "html+erb", "html+ruby"]
Racket                    ["racket", "rkt"]
Ragel                     ["ragel"]
Ragel in C Host           ["ragel-c"]
Ragel in CPP Host         ["ragel-cpp"]
Ragel in D Host           ["ragel-d"]
Ragel in Java Host        ["ragel-java"]
Ragel in Objective C Host ["ragel-objc"]
Ragel in Ruby Host        ["ragel-ruby", "ragel-rb"]
Raw token data            ["raw"]
Rd                        ["rd"]
Redcode                   ["redcode"]
RobotFramework            ["RobotFramework", "robotframework"]
Ruby                      ["rb", "ruby", "duby"]
Ruby irb session          ["rbcon", "irb"]
Rust                      ["rust"]
S                         ["splus", "s", "r"]
SCSS                      ["scss"]
SQL                       ["sql"]
Sass                      ["sass", "SASS"]
Scala                     ["scala"]
Scalate Server Page       ["ssp"]
Scaml                     ["scaml", "SCAML"]
Scheme                    ["scheme", "scm"]
Scilab                    ["scilab"]
Smali                     ["smali"]
Smalltalk                 ["smalltalk", "squeak"]
Smarty                    ["smarty"]
Snobol                    ["snobol"]
SourcePawn                ["sp"]
SquidConf                 ["squidconf", "squid.conf", "squid"]
Stan                      ["stan"]
Standard ML               ["sml"]
Tcl                       ["tcl"]
Tcsh                      ["tcsh", "csh"]
TeX                       ["tex", "latex"]
Tea                       ["tea"]
Text only                 ["text"]
Treetop                   ["treetop"]
UrbiScript                ["urbiscript"]
VB.net                    ["vb.net", "vbnet"]
VGL                       ["vgl"]
Vala                      ["vala", "vapi"]
Velocity                  ["velocity"]
VimL                      ["vim"]
XML                       ["xml"]
XML+Cheetah               ["xml+cheetah", "xml+spitfire"]
XML+Django/Jinja          ["xml+django", "xml+jinja"]
XML+Evoque                ["xml+evoque"]
XML+Lasso                 ["xml+lasso"]
XML+Mako                  ["xml+mako"]
XML+PHP                   ["xml+php"]
XML+Ruby                  ["xml+erb", "xml+ruby"]
XML+Smarty                ["xml+smarty"]
XML+Velocity              ["xml+velocity"]
XQuery                    ["xquery", "xqy", "xq", "xql", "xqm"]
XSLT                      ["xslt"]
Xtend                     ["xtend"]
YAML                      ["yaml"]
aspx-cs                   ["aspx-cs"]
aspx-vb                   ["aspx-vb"]
autohotkey                ["ahk"]
c-objdump                 ["c-objdump"]
cfstatement               ["cfs"]
cpp-objdump               ["cpp-objdump", "c++-objdumb", "cxx-objdump"]
d-objdump                 ["d-objdump"]
dg                        ["dg"]
eC                        ["ec"]
haXe                      ["hx", "haXe"]
objdump                   ["objdump"]
reStructuredText          ["rst", "rest", "restructuredtext"]
reg                       []
sqlite3con                ["sqlite3"]
systemverilog             ["sv"]
verilog                   ["v"]
vhdl                      ["vhdl"]
</code></pre>

<p>Et pour les curieux, voici comment l'obtenir:</p>

<p>```ruby
require &lsquo;pygments&rsquo;</p>

<p>Pygments.lexers.sort.each do |e|
  puts &ldquo;%-25s &rdquo; % e[1][:name] + &ldquo;#{e[1][:aliases]}&rdquo;
end
```</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un plugin Octopress - partie 2]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/30/comment-ecrire-un-plugin-octopress-partie-2/"/>
    <updated>2013-07-30T08:18:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/30/comment-ecrire-un-plugin-octopress-partie-2</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Dans <a href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/">la première partie</a>,
je m'étais arrêté sur le code suivant:</p>

<p>``` ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level
end

def render(context)
  "Niveau : #{@level}"
end
</code></pre>

<p>  end
end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>Aujourd'hui je montre comment permettre à l'utilisateur de personnaliser
le contenu du code Html produit.</p>

<!-- more -->


<p>Tout d'abord, voici le code du plugin terminé. Je vous rappelle que vous
pouvez trouver <a href="https://github.com/lkdjiin/octopress-level-tag">ce plugin sur Github</a>.</p>

<p>``` ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level.strip
end

def render(context)
  config = context.registers[:site].config
  label = config['level_tag_level'] || "Level: "
  level = case @level
  when "1" then config['level_tag_level_1'] || "easy"
  when "2" then config['level_tag_level_2'] || "medium"
  when "3" then config['level_tag_level_3'] || "hard"
  else
    "unknown"
  end
  classes = "class='level-tag level-tag-#{@level}'"
  "&lt;div #{classes}&gt;#{label}&lt;span&gt;#{level}&lt;/span&gt;&lt;/div&gt;"
end
</code></pre>

<p>  end</p>

<p>end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>L'appel du plugin dans les articles sera maintenant réalisé comme ceci:</p>

<p><code>ruby
<div class='level-tag level-tag-1'>Niveau : <span>facile</span></div>
</code></p>

<p>Par rapport à la première version, la méthode <code>render</code> a bien enflée. &ndash;
<em>Je trouve qu'il y a trop de code dedans, mais ce sera peut-être le sujet
d'un prochain article sur le refactoring.</em> &ndash; C'est cette méthode qui fait
tout le travail, voici les explications:</p>

<p>``` ruby</p>

<pre><code>def render(context)
  config = context.registers[:site].config
  label = config['level_tag_level'] || "Level: "
</code></pre>

<p>```</p>

<p>C'est l'objet <code>context</code> qui va permettre de récupérer les informations
nécéssaires dans le fichier de configuration <code>_config.yml</code>. Voici par
exemple ce que j'ai ajouté dans mon <code>_config.yml</code>:</p>

<p>``` yaml</p>

<h1>LevelTag plugin</h1>

<p>level_tag_level: &ldquo;Niveau : &rdquo;
level_tag_level_1: &ldquo;facile&rdquo;
level_tag_level_2: &ldquo;intermédiaire&rdquo;
level_tag_level_3: &ldquo;avancé&rdquo;
```</p>

<p>La ligne suivante:</p>

<pre><code>label = config['level_tag_level'] || "Level: "
</code></pre>

<p>initialise la
variable <code>label</code> avec le contenu de <code>level_tag_level</code>, trouvé dans le
<code>_config.yml</code>. La partie du code <code>|| "Level: "</code> est là pour s'assurer que
si <code>level_tag_level</code> n'existe pas dans le fichier de configuration, <code>label</code>
sera bien initialisé avec une valeur par défaut.</p>

<p>``` ruby</p>

<pre><code>  level = case @level
  when "1" then config['level_tag_level_1'] || "easy"
  when "2" then config['level_tag_level_2'] || "medium"
  when "3" then config['level_tag_level_3'] || "hard"
  else
    "unknown"
  end
</code></pre>

<p>```</p>

<p>C'est la même logique que précédement. La variable <code>level</code> sera initialisée
avec du contenu trouvé dans <code>_config.yml</code> ou bien, avec une valeur par
défaut.</p>

<p>``` ruby</p>

<pre><code>  classes = "class='level-tag level-tag-#{@level}'"
  "&lt;div #{classes}&gt;#{label}&lt;span&gt;#{level}&lt;/span&gt;&lt;/div&gt;"
</code></pre>

<p>```</p>

<p>Finalement, comme dans <a href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/">la première partie</a>,
on retrouve en fin de méthode la production du code Html.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment écrire un plugin Octopress]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress/"/>
    <updated>2013-07-27T12:56:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/27/comment-ecrire-un-plugin-octopress</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Pour mon blog Octopress, je voulais un repère visuel qui marque le niveau de
difficulté des articles. Un truc comme «Niveau : débutant» ou bien «Niveau :
confirmé» avec un peu de couleur. Rien de bien compliqué en fait. Si passer par
l'écriture d'un plugin pour obtenir ce genre d'effet n'est pas absolument
neccéssaire, ça rendra l'écriture des articles plus agréable et plus
rapide. Et puis je vais apprendre quelque chose de nouveau : comment écrire
un plugin pour Octopress ?</p>

<!-- more -->


<p>Tout d'abord, le site d'Octopress ne propose pas de documentation sur
l'écriture de plugins. Par contre, le wiki fournit
<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">une longue liste de plugins</a>
 dont les sources sont les bienvenues. Jekyll, le programme sur lequel est
construit Octopress, est assez spartiate en ce qui concerne
<a href="http://jekyllrb.com/docs/plugins/">l'écriture de plugin pour Jekyll</a>. Malgré
tout, ce lien peut s'avérer utile. J'ai trouvé que la meilleure source
d'information pour commencer est le contenu du dossier <code>plugin</code> de votre
blog Octopress.</p>

<p>Si vous voulez tout de suite jetez un coup d'oeil sur le
<a href="https://github.com/lkdjiin/octopress-level-tag/releases">code source du plugin</a>
terminé, vous pouvez le trouver sur Github, à la version 0.1.0.</p>

<p>Démarront avec le plugin le plus simple auquel je puisse penser. Créer un
fichier <code>plugins/level_tag.rb</code> et placez y le contenu suivant:</p>

<p>``` ruby plugins/level_tag.rb
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def render(context)
  "Niveau : facile"
end
</code></pre>

<p>  end
end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>Ensuite, dans un post, appelez le plugin de cette façon:</p>

<p><code>ruby
<div class='level-tag level-tag-'>Niveau : <span>unknown</span></div>
</code></p>

<p>Puis lancez Octopress:</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>Pointez votre navigateur sur <code>localhost:4000</code> et voilà. Un beau label
«Niveau : facile» apparait dans votre post. Voyons maintenant comment ça
marche.</p>

<p><code>ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag
</code></p>

<p>Un plugin pour Octopress est avant tout un plugin pour Jekyll.
Et Jekyll se sert du
<a href="http://rubydoc.info/gems/liquid">moteur de template Liquid</a>. Notre classe
<code>LevelTag</code> va donc hériter de <code>Liquid::Tag</code>, et être placée dans le
module Jekyll. La classe <code>Liquid::Tag</code> nous offre tout ce qu'il faut
pour générer du html, récupérer des arguments, etc.</p>

<p>``` ruby</p>

<pre><code>def render(context)
  "Niveau : facile"
end
</code></pre>

<p>```</p>

<p>La seule méthode de <code>Liquid::Tag</code> qu'il faut absolument implémenter est
<code>render</code>. C'est elle qui va produire le code html qui sera placé dans
notre article, à la place de l'appel du plugin.</p>

<p><code>ruby
Liquid::Template.register_tag('level', Jekyll::LevelTag)
</code></p>

<p>Finalement, il faut enregistrer notre plugin auprès de <code>Liquid::Template</code>.
Le premier argument passé à <code>register_tag</code> est le nom sous lequel nous
voulons appeler le plugin dans nos articles. Le second argument est la
classe de notre plugin.</p>

<p>Pour aller plus loin, il va falloir passer des arguments depuis l'appel du
plugin jusqu'à notre classe <code>LevelTag</code>. On change donc l'appel ainsi:</p>

<p><code>ruby
<div class='level-tag level-tag-facile'>Niveau : <span>unknown</span></div>
</code></p>

<p>Et on transforme le plugin de cette façon:</p>

<p>``` ruby
module Jekyll
  class LevelTag &lt; Liquid::Tag</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level
end

def render(context)
  "Niveau : #{@level}"
end
</code></pre>

<p>  end
end
Liquid::Template.register_tag(&lsquo;level&rsquo;, Jekyll::LevelTag)
```</p>

<p>Voyons les changements en détails.</p>

<p>``` ruby</p>

<pre><code>def initialize(tagname, level, tokens)
  @level = level
end
</code></pre>

<p>```</p>

<p>La variable <code>level</code> va contenir l'argument passé lors de l'appel du
plugin (<code>facile</code>), donc <code>level == 'facile'</code>. On sauvegarde
cette valeur dans un membre pour pouvoir la réutiliser plus tard.</p>

<p>``` ruby</p>

<pre><code>def render(context)
  "Niveau : #{@level}"
end
</code></pre>

<p>```</p>

<p>Grâce à <code>@level</code> on a les moyens de faire sortir à <code>render</code> l'argument
passé lors de l'appel du plugin.</p>

<p>Comme certains voudront «Niveau : facile» et d'autres voudront
«Niveau : débutant», il va nous falloir un moyen de personnaliser tout ça.
C'est ce qu'on découvrira dans un prochain numéro.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Je veux mon blog Octopress en français]]></title>
    <link href="http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais/"/>
    <updated>2013-07-13T07:19:00+02:00</updated>
    <id>http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais</id>
    <content type="html"><![CDATA[<p><div class='level-tag level-tag-1'>Niveau : <span>facile</span></div></p>

<p>Octopress n'est pas prévu pour être internationnalisé et localisé. C'est
comme ça. Je ne pense pas que ça change avant un moment, si jamais ça
change. Suite à une
<a href="https://twitter.com/lkdjiin/status/355699071895343105">conversation sur twitter</a>
avec @octopress, on m'a
conseillé de regarder du coté de Jekyll. Je le ferais surement, mais plus
tard. Je ne connais pas du tout Jekyll et je veux mon blog Octopress en
français maintenant. (Ok, je fais un caprice)</p>

<!-- more -->


<p>Je vais vous montrer comment j'ai fait pour internationnalisé Octopress.
Si vous en avez envie vous aussi, vous pourrez suivre cette procédure
pour ne pas vous prendre la tête à chercher vous-même.</p>

<h2>Les titres</h2>

<p>Les titres des articles (aussi dans le volet à droite) sont capitalisés à
l'extrème. Chaque première lettre d'un mot est en majuscule.  Alors,
capitaliser chaque mot d'un titre, ça fait cool en anglais, mais en français
c'est juste horrible et illisible. Pour arranger ça, on change la méthode
<code>titlecase</code> dans <code>plugins/titlecase.rb</code>.</p>

<p><code>ruby plugins/titlecase.rb
def titlecase
  capitalize
end
</code></p>

<p><strong>Edit 14/07/2013</strong> Pas besoin de faire tout ça en fait. Il suffit de passer
<code>titlecase:</code> à <code>false</code> dans le fichier <code>_config.yml</code>. Merci à Jonathan Georges
pour cette info.</p>

<h2>Les dates</h2>

<p>Je veux les dates en français, bien sûr. Les changements sont à faire
dans <code>plugins/date.rb</code>, et je vais vraiment y aller avec mes gros sabots.
Tout d'abord il faut modifier la méthode <code>ordinalize</code> ainsi:</p>

<p>``` ruby méthode ordinalize dans plugins/date.rb</p>

<h1>Returns an ordinal date eg 1 juillet 2007 &ndash;> 1er juillet 2007</h1>

<p>def ordinalize(date)
  date = datetime(date)
  &ldquo;#{ordinal(date.strftime(&lsquo;%e&rsquo;).to_i)} &rdquo; +
  &ldquo;#{french_month(date.strftime(&lsquo;%-m&rsquo;))} &rdquo; +
  &ldquo;#{date.strftime(&lsquo;%Y&rsquo;)}&rdquo;
end
```</p>

<p>Puis on modifie la méthode <code>ordinal</code> de cette façon:</p>

<p>``` ruby méthode ordinal dans plugins/date.rb</p>

<h1>Returns an ordinal number. 1 &ndash;> 1er.</h1>

<p>def ordinal(number)
  if number.to_i == 1</p>

<pre><code>"#{number}&lt;span&gt;er&lt;/span&gt;"
</code></pre>

<p>  else</p>

<pre><code>"#{number}"
</code></pre>

<p>  end
end
```</p>

<p>Et enfin il faut ajouter la méthode <code>french_month</code>. C'est très basique, mais ça
fonctionne:</p>

<p>``` ruby méthode french_month dans plugins/date.rb</p>

<h1>Returns a string french month. 1 &ndash;> janvier, 2 &ndash;> février, etc.</h1>

<p>def french_month(number)
  case number.to_i
  when 1; &ldquo;janvier&rdquo;
  when 2; &ldquo;février&rdquo;
  when 3; &ldquo;mars&rdquo;
  when 4; &ldquo;avril&rdquo;
  when 5; &ldquo;mai&rdquo;
  when 6; &ldquo;juin&rdquo;
  when 7; &ldquo;juillet&rdquo;
  when 8; &ldquo;août&rdquo;
  when 9; &ldquo;septembre&rdquo;
  when 10; &ldquo;octobre&rdquo;
  when 11; &ldquo;novembre&rdquo;
  when 12; &ldquo;décembre&rdquo;
  end
end
```</p>

<p>Si vous êtes en Ruby 1.9.3, il ne faut pas oublier de mettre un encodage
au début du fichier, à cause des caractères accentués :</p>

<p>``` ruby 1ère ligne de plugins/date.rb</p>

<h1>&ndash;<em>&ndash; encoding: utf-8 &ndash;</em>&ndash;</h1>

<p>```</p>

<h2>Les chaînes de caractères embarquées</h2>

<p>Rien de bien intéressant pour cette partie, il suffit de remplacer une
chaîne par une autre. Je vais donc me contenter de dresser la liste.</p>

<ul>
<li>&ldquo;Read on&rdquo; : <code>_config.yml</code></li>
<li>&ldquo;Recent Posts&rdquo; : <code>source/_includes/aside/recent_posts.html</code></li>
<li>&ldquo;Search&rdquo; : <code>source/_includes/navigation.html</code></li>
<li>&ldquo;Posted by&rdquo; : <code>source/_includes/post/author.html</code></li>
<li>&ldquo;posted in&rdquo; : <code>source/_includes/archive_post.html</code></li>
</ul>


<h3>Category:</h3>

<p>Pour remplacer «Category: » par «Catégorie : », c'est un peu différent.
Il faut <em>ajouter</em> la ligne suivante dans <code>_config.yml</code>:</p>

<p><code>
category_title_prefix: "Catégorie : "
</code></p>

<h2>Conclusion</h2>

<p>Alors voilà, j'ai bien conscience que certaines modifications risquent ne plus
fonctionner après une mise à jour d'Octopress… Mais c'est tout ce que j'ai
trouver pour faire ça dans l'heure.</p>

<p>À demain.</p>
]]></content>
  </entry>
  
</feed>
